{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Modding/","title":"Welcome to the Northstar Modding Documentation!","text":"<p>This project is under active development. Please PR everything you can!</p> <p>Check <code>/guides/contributing</code>  section for getting started with readthedocs and reStructuredText.</p> <p>::::</p>"},{"location":"Modding/#contents","title":"Contents","text":"<p>These docs contain info on squirrel usage and northstar/respawn functions. Its very much WIP.</p> <p>If you know anything about any function, object or concept please dont hesitate to contribute it, even if its just a quick and dirty PR.</p>"},{"location":"Modding/#cheatsheet","title":"Cheatsheet","text":"<ul> <li>NoSkill modding guide (highly recommended to check     out)</li> <li> <p><code>Tools for modding &lt;./guides/tools/index&gt;</code></p> </li> <li> <p>All the Squirrel     Constants</p> </li> <li>Modding     Documentation</li> <li>Squirrel Highlighting for Notepad++ and     VSCode</li> <li>List of Console Commands</li> <li>Useful     Squirrel</li> <li>List of squirrel funcs available to dedicated server with their     signatures</li> <li>Native registered script     functions,     they are from Season 3 Apex but most also exist on Titanfall 2,     especially the Titan functions. Also includes description for each     function if the developers have given it one</li> </ul> <p>TODO: link the correct files here</p>"},{"location":"Modding/refactoring/","title":"Refactoring","text":"<p>Warning</p>"},{"location":"Modding/refactoring/#this-wiki-is-wip-proceed-with-caution","title":"This wiki is WIP! Proceed with caution","text":"<p>you can find the github link Here</p>"},{"location":"Modding/refactoring/#contributing","title":"Contributing","text":"<p>If you would like to contribute to the refactoring process we would be incredibly thankfull! Here is all the information you need to know to get started:</p>"},{"location":"Modding/refactoring/#reccomended-tools","title":"Reccomended tools","text":""},{"location":"Modding/refactoring/#vscode-extensions","title":"VSCode extensions","text":"<p>Markdown admonitions</p> <p>Markdown checkboxes</p> <p>Github styling</p> <p>MDX support this one is optional, pure Markdown is prefered</p> <p>Markdown emoji's this is entirely optional</p>"},{"location":"Modding/refactoring/#more-info","title":"More info","text":"<p>When contributing you must compare your changes with the original rendered page on the old site.</p> <p>Warning</p> <p>Do not compare your changes with the documentation you were editing from.</p> <p>In order to mark things that need to be reviewed we leave <code>TODO</code> in the corresponding file next to the referenced question.In order to quickly find these, open an IDE of your choice and search <code>TODO</code>. An example is shown below using VSCode</p> <p></p> <p>Pay particular attention to the Squirrel API, Reference,and Repak folders</p>"},{"location":"Modding/refactoring/#here-is-the-current-todolist-for-completeing-the-refactor","title":"Here is the current todolist for completeing the refactor:","text":"<ul> <li> <p> Create the new wiki </p> </li> <li> <p> fix styling in every converted <code>*.md</code> file we are here \u2b50</p> </li> <li> <p> Validate all pages to make sure all the information is correct</p> </li> <li> <p> Style the new site with custom css, pages, and images</p> </li> <li> <p> Publish the site in place of the old wiki</p> </li> <li> <p> Celebrate! </p> </li> </ul>"},{"location":"Modding/refactoring/#what-we-are-not-doing-currently","title":"What we are not doing currently:","text":"<ul> <li> <p>Writing new/updated information</p> </li> <li> <p>Changing/splitting pages</p> </li> </ul> <p>Note</p> <p>THIS IS ALL SUBJECT TO CHANGE AT A MOMENTS NOTICE</p>"},{"location":"Modding/guides/contributing/","title":"Contributing to ModdingDocs","text":"<p>How can I contribute?</p> <p>All contributions to ModdingDocs are welcome.</p> <p>Including:</p> <ul> <li>GitHub Issues containing any knowledge you want to share</li> <li>Pull Requests with changes to the docs, even small ones</li> </ul> <p>What do I need to know to contribute?</p> <p>ModdingDocs uses reStructuredText.</p> <p>Cheatsheet for reStructuredText syntax: https://docs.generic-mapping-tools.org/6.2/rst-cheatsheet.html.</p> <p>The <code>.rst</code> files can be found in the <code>docs/source</code> directory. If you\\'re adding a new file, make sure to link it in <code>index.rst</code></p>"},{"location":"Modding/guides/contributing/#contributing-without-a-local-build","title":"Contributing without a local build","text":"<p>You don\\'t necessarily need to set up a local build environment.</p> <p>To contribute without doing so, you can just edit the files in an editor of your choice and create a GitHub pull request from them.</p> <p>There will be a test-build done for each PR, which you can find on your PR as a \\\"Check\\\" by clicking <code>show all checks</code> and <code>details</code>.</p> <p>This should take you to a online version of the docs with your PRs changes.</p>"},{"location":"Modding/guides/contributing/#building-locally","title":"Building locally","text":"<p>You need to have a relatively recent version of Python installed - 3.8 or higher. Download here</p> <p>Windows</p> <pre><code>git clone https://github.com/R2Northstar/ModdingDocs/\ncd ModdingDocs\n./run.ps1\n</code></pre> <p>Linux</p> <pre><code>git clone https://github.com/R2Northstar/ModdingDocs/\ncd ModdingDocs\n./run.sh\n</code></pre> <p>Warning</p> <p>On Windows, if you are not able to run the script by running <code>[./run.ps1</code>, try running it with:      powershell.exe -ExecutionPolicy Bypass -File .run.ps1]</p> <p>After this you should be able to run with just <code>./run.ps1</code>. ::::</p>"},{"location":"Modding/guides/contributing/#vscode","title":"VSCode","text":"<p>If you\\'re using Visual Studio Code, the following extensions might be of interest:</p> <ul> <li>snekvik.simple-rst:     for syntax highlighting</li> <li>lextudio.restructuredtext:     for autocompletion and syntax checks.</li> </ul> <p>Note</p> <p>To get the ReStructuredText support working, you will likely need to tell VSCode to use the Poetry environment.</p> <p>To do so, open one of the .py files, which should make the python version appear in the bottom right of VSCode.</p> <p>Click on it, and select the version with <code>(moddingdocs</code> after it.</p> <p>Then, when looking at a ReStructuredText file there should be <code>esbonio:</code> in the bottom right.</p> <p>Click that to restart the ReStructuredText support. This allows it to see all the dependencies Poetry installed. ::::</p>"},{"location":"Modding/guides/gettingstarted/","title":"Getting Started","text":"<p>Northstar supports the creation of many user mods. This guide will teach you the basics of modding to get you started.</p> <p>Check out the <code>usage</code>  section for further information, including <code>installation</code> .</p>"},{"location":"Modding/guides/gettingstarted/#basics","title":"Basics","text":"<p>This guide assumes you have basic understanding with programming and know how to use developer environments. Listed below are tools useful for exporting file formats.</p> <p>If you\\'d like a more lengthy set of tutorials covering many topics. Look at: NoSkill modding guide</p>"},{"location":"Modding/guides/gettingstarted/#tools","title":"Tools","text":"<p>To get started with modding for Northstar, we recommend getting yourself some tools. Check out the <code>tools</code>  section for more information.</p>"},{"location":"Modding/guides/gettingstarted/#quick-start","title":"Quick Start","text":"<p>In order to get started with making your mod, create a folder in <code>R2Northstar/mods</code>. While it isn\\'t required, it is best practise by mod authors to follow the naming scheme <code>Author.ModName</code>, such as <code>Northstar.Client</code>.</p> <p>After making this folder, inside it add a folder named <code>mod</code> and a file named <code>mod.json</code>.</p> <p>Provided is a template <code>mod.json</code>, for a detailed list of values read the <code>cheatsheet</code> </p> <pre><code>{\n   \"Name\": \"Yourname.Modname\",\n   \"Description\": \"Woo yeah wooo!\",\n\n   \"LoadPriority\": 0,\n   \"ConVars\": [],\n   \"Scripts\": [],\n   \"Localisation\": []\n}\n</code></pre> <p>Inside the <code>mod</code> folder, existing files found in the engine\\'s virtual file system will be overwritten and new files can be added. If you need to define new Squirrel files <code>(.nut/.gnut)</code> they must be declared in the <code>\"Scripts\"</code> array in <code>mod.json</code>. An example for this might be:</p> <pre><code>\"Scripts\": [\n   {\n      \"Path\": \"path/to/file.nut\",\n      \"RunOn\": \"( CLIENT || SERVER ) &amp;&amp; MP\"\n   },\n   {\n      \"Path\": \"path/to/another_file.nut\",\n      \"RunOn\": \"( CLIENT || SERVER ) &amp;&amp; MP\",\n      \"ClientCallback\": {\n         \"Before\": \"ClientPreMapspawnThing\",\n         \"After\": \"AfterMapspawnClientThing\"\n      },\n      \"ServerCallback\": {\n         \"Before\": \"ServerPreMapspawncrap\",\n         \"After\": \"ServerAfterMapspawnWoo\"\n      }\n   }\n]\n</code></pre> <p><code>\"Path\"</code> indicates where the script is, <code>\"RunOn\"</code> is the Squirrel VM context (see <code>../native/sqvm</code> ) as an expression, and <code>\"ClientCallback\"</code> and <code>\"ServerCallback\"</code> specify a function call that can be <code>\"Before\"</code> and/or <code>\"After\"</code> map-spawn.</p>"},{"location":"Modding/guides/gettingstarted/#detailed-modjson-architecture","title":"Detailed <code>mod.json</code> architecture","text":"<p>Located at your mod\\'s root folder, the <code>mod.json</code> file is the entrypoint of your mod; it contains human-readable information about it, which scripts to load, and a bunch of interesting stuff.</p> <p>This guide will dig into each of the possible <code>mod.json</code> fields. Please note that <code>mod.json</code> keys must start with an uppercase letter.</p> <p>This is what a well-formatted <code>mod.json</code> looks like:</p> <pre><code>{\n    \"Name\": \"Northstar.CustomServers\",\n    \"Description\": \"Attempts to recreate the behaviour of vanilla Titanfall 2 servers, as well as changing some scripts to allow better support for mods\",\n    \"Version\": \"1.5.0\",\n    \"LoadPriority\": 0,\n    \"ConVars\": [\n        {\n            \"Name\": \"ns_private_match_last_mode\",\n            \"DefaultValue\": \"tdm\"\n        },\n        {\n            \"Name\": \"ns_private_match_last_map\",\n            \"DefaultValue\": \"mp_forwardbase_kodai\"\n        }\n    ],\n    \"Scripts\": [\n        {\n            \"Path\": \"sh_northstar_utils.gnut\",\n            \"RunOn\": \"CLIENT || SERVER || UI\"\n        },\n        {\n            \"Path\": \"mp/_classic_mp_dropship_intro.gnut\",\n            \"RunOn\": \"SERVER &amp;&amp; MP\"\n        }\n    ],\n    \"Localisation\": [\n        \"resource/northstar_custom_%language%.txt\"\n    ]\n}\n</code></pre> <p>Note</p> <p>The real <code>Northstar.CustomServers</code> mod contains more convars and scripts, some have been removed for the readability of the example. ::::</p>"},{"location":"Modding/guides/gettingstarted/#name-and-description","title":"Name and description","text":"<p>Those ones are pretty self-explanatory. Both fields are used by Northstar itself to display in-game information about your mod in the main screen <code>Mods</code> menu.</p> <p>Best pratice for your mod\\'s name is to use the <code>Author.ModName</code> convention.</p>"},{"location":"Modding/guides/gettingstarted/#version","title":"Version","text":"<p>This field specifies version of your mod using <code>X.Y.Z</code> scheme; this field must be updated each time you release a new version of your mod.</p> <p>Common use is to increase Z when you publish a fix (e.g. <code>1.5.0</code> to <code>1.5.1</code>), and increase Y when you release new features (e.g. <code>1.5.1</code> to <code>1.6.0</code>).</p> <p>Best practise is to follow semantic versioning (https://semver.org/).</p>"},{"location":"Modding/guides/gettingstarted/#loadpriority","title":"LoadPriority","text":"<p>This field defines the order in which all mods will be loaded by Northstar. For example, a mod with <code>\"LoadPriority\": 1</code> will be loaded after a mod with <code>\"LoadPriority\": 0</code>.</p> <p>If your mod uses code from another mod, make sure to set a greater LoadPriority than the mod you\\'re using code from.</p>"},{"location":"Modding/guides/gettingstarted/#convars","title":"ConVars","text":"<p>This field lists configuration variables, that can be set by servers owners to modify behaviour of your mod.</p> <p>Each configuration variable must have a <code>\"Name\"</code> and a <code>\"DefaultValue\"</code>. ConVars can also have an optional <code>\"Flags\"</code> field which specifies special behaviour and an optional <code>\"HelpString\"</code> field which specifies the usage of the ConVar which can be view in-game by running <code>help &lt;convar&gt;</code>.</p> <p>You can access configuration variables from squirrel code using <code>GetConVarInt</code>, <code>GetConVarFloat</code>, <code>GetConVarBool</code> or <code>GetConVarString</code> calls.</p> <p>Warning</p> <p>No matter the type of your variables, they have to be JSON strings, otherwise game won\\'t start! ::::</p>"},{"location":"Modding/guides/gettingstarted/#example","title":"Example","text":"<p>If I don\\'t want to wait 15 seconds for matches to start on my server, <code>Northstar.CustomServers</code> mod exposes a ConVar named <code>ns_private_match_countdown_length</code> in its <code>mod.json</code> manifesto:</p> <pre><code>\"ConVars\": [\n    {\n        \"Name\": \"ns_private_match_countdown_length\",\n        \"DefaultValue\": \"15\"\n    },\n\n    ...\n]\n</code></pre> <p>I can setup the <code>ns_private_match_countdown_length</code> variable in my <code>R2Northstar/mods/Northstar.CustomServers/mod/cfg/autoexec_ns_server.cfg</code> configuration file.</p> <p>When starting a match, <code>Northstar.CustomServers</code> mod will retrieve the configuration variable value, or its default value if it hasn\\'t been specified in configuration file:</p> <pre><code>// start countdown\nSetUIVar( level, \"gameStartTime\", Time() + GetConVarFloat( \"ns_private_match_countdown_length\" ) )\n</code></pre> <p>Note</p> <p>All <code>Northstar.CustomServers</code> ConVars are listed here: https://r2northstar.gitbook.io/r2northstar-wiki/hosting-a-server-with-northstar/basic-listen-server ::::</p>"},{"location":"Modding/guides/gettingstarted/#flags","title":"Flags","text":"<p>You can assign flags to configuration variables; to use several flags at once, just add their values.</p> <p>Name                            Value        Description</p> <p>FCVAR_UNREGISTERED              1            If this is set, don\\'t add to linked list, etc.</p> <p>FCVAR_DEVELOPMENTONLY           2            Hidden in released products. Flag is removed automatically if                                                ALLOW_DEVELOPMENT_CVARS is defined.</p> <p>FCVAR_GAMEDLL                   4            Defined by the game DLL</p> <p>FCVAR_CLIENTDLL                 8            Defined by the client DLL</p> <p>FCVAR_HIDDEN                    16           Hidden. Doesn\\'t appear in find or auto complete. Not deterred                                                by ALLOW_DEVELOPMENT_CVARS.</p> <p>FCVAR_PROTECTED                 32           It\\'s a server cvar, but we don\\'t send the data since it\\'s a                                                password, etc. Sends 1 if it\\'s not bland/zero, 0 otherwise as                                                value.</p> <p>FCVAR_SPONLY                    64           This cvar cannot be changed by clients connected to a                                                multiplayer server.</p> <p>FCVAR_ARCHIVE                   128          Save this ConVar\\'s value to vars.rc - this works both server                                                and client-side.</p> <p>FCVAR_NOTIFY                    256          Notifies players when this ConVar\\'s value was changed.</p> <p>FCVAR_USERINFO                  512          Changes the client\\'s info string</p> <p>FCVAR_PRINTABLEONLY             1024         This cvar\\'s string cannot contain unprintable characters (                                                e.g., used for player name etc ).</p> <p>FCVAR_UNLOGGED                  2048         If this is a FCVAR_SERVER, don\\'t log changes to the log file /                                                console if we are creating a log</p> <p>FCVAR_NEVER_AS_STRING           4096         never try to print that cvar</p> <p>FCVAR_REPLICATED (AKA           8192         This value is set by server and replicated by clients.   FCVAR_SERVER)                                </p> <p>FCVAR_CHEAT                     16384        Do NOT allow changing of this convar by console, unless                                                sv_cheats is 1.</p> <p>FCVAR_SS                        32768        causes varnameN where N == 2 through max splitscreen slots for                                                mod to be autogenerated</p> <p>FCVAR_DEMO                      65536        Record this cvar in a demo.</p> <p>FCVAR_DONTRECORD                131072       Don\\'t record this.</p> <p>FCVAR_SS_ADDED                  262144       This is one of the \\\"added\\\" FCVAR_SS variables for the                                                splitscreen players</p> <p>FCVAR_RELEASE                   524288       This value is available to the end user.</p> <p>FCVAR_RELOAD_MATERIALS          1048576      If this cvar changes, it forces a material reload</p> <p>FCVAR_RELOAD_TEXTURES           2097152      If this cvar changes, it forces a texture reload</p> <p>FCVAR_NOT_CONNECTED             4194304      cvar cannot be changed by a client that is connected to a server</p> <p>FCVAR_MATERIAL_SYSTEM_THREAD    8388608      Indicates this cvar is read from the material system thread</p> <p>FCVAR_ARCHIVE_PLAYERPROFILE     16777216     Save this, but to profile.cfg instead - meaning this only works                                                for clients.</p> <p>FCVAR_ACCESSIBLE_FROM_THREADS   33554432     used as a debugging tool necessary to check material system                                                thread convars</p> <p>FCVAR_SERVER_CAN_EXECUTE        268435456    the server is allowed to execute this command on clients via                                                ClientCommand/NET_StringCmd/CBaseClientState::ProcessStringCmd</p> <p>FCVAR_SERVER_CANNOT_QUERY       536870912    If this is set, then the server is not allowed to query this                                                cvar\\'s value (via IServerPluginHelpers::StartQueryCvarValue).</p> <p>FCVAR_CLIENTCMD_CAN_EXECUTE     1073741824   IVEngineClient::ClientCmd is allowed to execute this command.                                                Note: IVEngineClient::ClientCmd_Unrestricted can run any client                                                command.</p> Configuration variable flags <p>Note</p> <p>Some flags have been skipped due to them being generally useless unless you have very specific requirements. ::::</p>"},{"location":"Modding/guides/gettingstarted/#scripts","title":"Scripts","text":"<p>The scripts field lets you declare an array of Squirrel files to import into your mod.</p> <p>Each script entry must have a \\\"Path\\\" value and a \\\"RunOn\\\" value.</p> <pre><code>\"Scripts\": [\n    {\n        \"Path\": \"path/to/file.nut\",\n        \"RunOn\": \"( CLIENT || SERVER ) &amp;&amp; MP\"\n    },\n    {\n        \"Path\": \"path/to/another_file.nut\",\n        \"RunOn\": \"( CLIENT || SERVER ) &amp;&amp; MP\",\n        \"ClientCallback\": {\n            \"Before\": \"ClientPreMapspawnThing\",\n            \"After\": \"AfterMapspawnClientThing\"\n        },\n        \"ServerCallback\": {\n            \"Before\": \"ServerPreMapspawncrap\",\n            \"After\": \"ServerAfterMapspawnWoo\"\n        }\n    }\n]\n</code></pre>"},{"location":"Modding/guides/gettingstarted/#path","title":"Path","text":"<p>Path of the Squirrel file to import, without <code>mod/scripts/vscripts</code> prefix (that\\'s where your script files should go).</p>"},{"location":"Modding/guides/gettingstarted/#runon","title":"RunOn","text":"<p>A boolean expression which tells the game when and in which context to compile the script.</p> <p>Name                                Description</p> <p>SERVER                              Server script VM, recompiles on map                                       change</p> <p>CLIENT                              Client script VM, recompiles on map                                       change</p> <p>UI                                  UI script VM, recompiles on when                                       [uiscript_reset] is ran</p> <p>SP                                  Singleplayer</p> <p>MP                                  Multiplayer</p> <p>DEV                                 Value of developer convar</p> <p>LOBBY                               True in mp_lobby. (Server and                                       client VMs only)</p> <p>MAP_mp_box                          True if the given map name is being                                       loaded</p> <p>GAMEMODE_at                         True if the given game mode is                                       being loaded</p> Avalible flags <p><code>CLIENT &amp;&amp; !LOBBY</code> - Compiles on client and not in the lobby. So during actual singeplayer and multiplayer gameplay.</p> <p><code>CLIENT &amp;&amp; MP &amp;&amp; !LOBBY</code> - Compiles on client, only in multiplayer and not in the lobby.</p> <p><code>( CLIENT || SERVER ) &amp;&amp; MP</code> - Compiles on both client and server only in multiplayer.</p> <p><code>CLIENT &amp;&amp; SP &amp;&amp; MAP_sp_boomtown</code> - Compiles only on client in singleplayer only when the map <code>sp_boomtown</code> is loaded. ( Here <code>SP</code> isn\\'t needed as <code>sp_boomtown</code> is singleplayer only )</p> <p><code>CLIENT &amp;&amp; GAMEMODE_aitdm</code> - Compiles on client on both singleplayer and multiplayer only when the <code>aitdm</code> gamemode is set. ( <code>aitdm</code> is attrition which is multiplayer only so this script only compiles on multiplayer )</p>"},{"location":"Modding/guides/gettingstarted/#clientcallback-servercallback","title":"ClientCallback / ServerCallback","text":"<p>Specify methods that will be called before/after map spawn.</p>"},{"location":"Modding/guides/gettingstarted/#localisation","title":"Localisation","text":"<p>This field is an array listing localisation files relative paths.</p> <p>For more info about localisation works on Northstar, read the <code>localisation</code>  section.</p> <p>Note</p> <p>This project is under active development. ::::</p>"},{"location":"Modding/guides/publishing/","title":"Publishing your mod","text":""},{"location":"Modding/guides/publishing/#best-practices","title":"Best practices","text":"<p>Make sure to name your mod in the form <code>&lt;your name&gt;.&lt;mod name&gt;</code>, similar to the existing default mods, like <code>Northstar.Client</code>, <code>Northstar.CusomServer</code>, Note that the Northstar name (<code>Northstar.Xyz</code>) is reserved for mods that come with the Northstar install and should therefore not be used.</p> <p>It is recommended to upload the source code of your mod to a public repository like Github to give your users a place to suggest changes and leave feedback in an organised manner.</p> <p>If the changes your mod makes can be represented in screenshots, gameplay recordings, or GIFs, consider adding those to your README. This way anyone coming across your mod can tell which aspects of the game it changes even before installing it.</p> <p>To do so, simply upload the image or gif to a host of your choice (Imgur, GitHub, and even Discord all work). To display the image directly on your page in Thunderstore, add the following line to your README:</p> <pre><code>![alt text, this text shows up when image cannot be loaded](https://example.com/image/to/link/to.gif)\n</code></pre>"},{"location":"Modding/guides/publishing/#thunderstore","title":"Thunderstore","text":"<p>The best place to publish your mod is Thunderstore. To do so, you need to package your mod as a zip with a specific folder structure. You can either set the structure up manually or use this GitHub template</p>"},{"location":"Modding/guides/publishing/#package-structure","title":"Package structure","text":"<p>The Thunderstore package zip structure is as follows:</p> <pre><code>mods/&lt;your name&gt;.&lt;mod name&gt;/\nicon.png\nmanifest.json\nREADME.md\n</code></pre> <ul> <li><code>icon.png</code>: 256x256px icon for your mod.</li> <li><code>README.md</code>: the description page for your mod</li> <li><code>manifest.json</code> outlined     here</li> </ul> <p>You can put multiple mods in the <code>mods/</code> folder, but only do this if neccessary.</p> <p><code>manifest.json</code> checker: https://northstar.thunderstore.io/tools/manifest-v1-validator/</p>"},{"location":"Modding/guides/publishing/#uploading","title":"Uploading","text":"<p>After you have set up the folder structure, head to https://northstar.thunderstore.io and log in with either Discord or Github. Then you can use the [Upload] button at the top of the page to upload your zip.</p> <p>When uploading, it will verify your package structure and you can publish after it\\'s successfully checked.</p> <p>To update a mod, change the version in <code>mod.json</code> and <code>manifest.json</code>, and upload again. If the mod name is the same, it will update the previous version.</p>"},{"location":"Modding/guides/publishing/#github-workflows","title":"Github Workflows","text":"<p>If you want to create a Github repository for your mod, you can use a template that automatically packages and uploads your mod to Thunderstore when you create a Github release of your mod.</p> <p>Github only supports files smaller than 100mb without using git-lfs. Using git-lfs isn\\'t recommended. Instead you should use scripts that split your assets like in this template</p>"},{"location":"Modding/guides/keyvalue/","title":"Index","text":"<p>Weapon and key value modding ===========================</p>"},{"location":"Modding/guides/keyvalue/#weapon-modding","title":"Weapon Modding","text":"<p>Do keep in mind that these are usually changed server-side.</p> <p>To actually change the keyvalues of weapons you\\'d have to name them appropriately inside a mod folder For example: <code>R2Northstar\\mods\\Northstar.Custom\\keyvalues\\scripts\\weapons</code> You can find all the weapon keyvalues here</p> <p>Example for modding crossshairs using keyvalues: <code>crosshairmodding</code> </p> <ul> <li>Mod Examples:<ul> <li>Northstar.Custom</li> <li>Unholy     Trinity</li> <li>Kraber9K</li> </ul> </li> </ul> <p>Note</p> <p>This project is under active development, and this section needs expanding :::</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/","title":"Crosshair Modding","text":"<p>Example Mod: Custom.Crosshairs</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#how-to-modify-crosshairs","title":"How To Modify Crosshairs:","text":"<p>1: Create the following file <code>~/Your.Mod/keyvalues/scripts/weapons/mp_weapon_[desired weapon].txt</code></p> <p>2: Put the following into the newly created .txt file:</p> <pre><code>{   \n        RUI_CrosshairData\n    {\n        Crosshair_1 \n        {\n            \"ui\"                        \"ui/crosshair_alternator\" \n        }\n    }\n}\n</code></pre> <p>3: change \\\"ui/crosshair_alternator\\\" to your desired crosshair</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#overlapping-crosshairs","title":"Overlapping Crosshairs","text":"<p>It is possible to combine crosshairs by modifying the .txt mp_weapon used to be here</p> <p>Below is an example of combining the Alternator and R201 crosshairs into one</p> <pre><code>                    active_crosshair_count              \"2\" //Amount of crosshairs you want to use\n\n                    RUI_CrosshairData\n                    {\n                        Crosshair_1                                                                     \n                        {\n                            \"ui\"                        \"ui/crosshair_alternator\"   \n                        }                                                                               \n                        Crosshair_2                                                                     \n                        {\n                            \"ui\"                        \"ui/crosshair_tri\"          \n                        }                                                                              \n                    }\n</code></pre> <p>To add more crosshairs add another Crosshair_X following the formating in the script above.</p> <p>Note</p> <p>The limit for this seems to be 4 Crosshairs onscreen at once ::::</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#how-the-script-above-appears","title":"How the script above appears:","text":""},{"location":"Modding/guides/keyvalue/crosshairmodding/#adjust-crosshair-spread","title":"Adjust Crosshair Spread?","text":"<p>| Simply add the following line below the \\\"ui\\\" line | <code>\"base_spread\"               \"3.0\"</code> | Below the \\\"ui\\\" line, Like this: <pre><code>    {   \n       RUI_CrosshairData\n       {\n           Crosshair_1 \n           {\n               \"ui\"                        \"ui/crosshair_alternator\" //THis is the Croshair\n               \"base_spread\"               \"3.0\"   //This is a spread Multiplier, Line doesn't exist by default\n           }\n       }\n    }\n</code></pre> -   This only affects the visual spread of the crosshair, not the actual     bullet spread. Positive Values increase spread while negative     decrease it. By default it is based on the weapon\\'s own stats.</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#no-crosshair","title":"No Crosshair?","text":"<pre><code>    WeaponData\n    {   \n        RUI_CrosshairData\n        {\n            Crosshair_1 \n            {\n                \"ui\"                        \"ui/crosshair_sniper_amped\" //This means NO crosshair\n            }\n        }\n    }\n</code></pre>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#crosshair-index","title":"Crosshair Index:","text":"<p>These are the available crosshairs in-game, along with their in-game reference:</p> <p></p> <p>Crosshair images are taken from the modding guide on https://noskill.gitbook.io/titanfall2/</p>"},{"location":"Modding/guides/keyvalue/crosshairmodding/#examples","title":"Examples","text":""},{"location":"Modding/guides/keyvalue/crosshairmodding/#extra-info","title":"Extra Info","text":"<ul> <li> <p>As with any mod, it is recommended to test this out in a private     match first. Save any changes you made to the desired weapon\\'s file     and type <code>reload</code> in your console</p> </li> <li> Keep in mind that some weapons have animated or dynamic crosshairs. Weapons like the Charge Rifle, Cold War, Frag Grenade, etc... have custom animations for their crosshairs. which can cause weirdness or jank when used on other weapons or when using other crosshairs on them. <ul> <li>Animated weapons like the Charge rifle will work with     animated crosshairs like <code>ui/crosshair_titan_sniper</code></li> </ul> </li> </ul> <p>Thank you to <code>Cpone#0001</code> and <code>Nixie#8251</code> from the Northstar Discord for helping me figure this out</p>"},{"location":"Modding/guides/keyvalue/localisation/","title":"Localisation","text":"<p>For your content to reach as many people as possible, it is important to have it translated in users\\' natural language. This guide will help you do that!</p>"},{"location":"Modding/guides/keyvalue/localisation/#languages-list","title":"Languages list","text":"<p>Languages natively supported by Titanfall2 are:</p> <ul> <li>English</li> <li>French</li> <li>German</li> <li>Italian</li> <li>Japanese</li> <li>Portuguese</li> <li>Russian</li> <li>Spanish</li> <li>Traditional Chinese (<code>\"tchinese\"</code>)</li> </ul>"},{"location":"Modding/guides/keyvalue/localisation/#create-translation-files","title":"Create translation files","text":"<p>Here\\'s what a translation file looks like:</p> <pre><code>\"lang\"\n{\n    \"Language\" \"english\"\n    \"Tokens\"\n    {\n        \"MENU_LAUNCH_NORTHSTAR\" \"Launch Northstar\"\n        \"MENU_TITLE_MODS\" \"Mods\"\n        \"RELOAD_MODS\" \"Reload Mods\"\n        \"WARNING\" \"Warning\"\n        \"CORE_MOD_DISABLE_WARNING\" \"Disabling core mods can break your client!\"\n        \"DISABLE\" \"Disable\"\n    }\n}\n</code></pre> <p>It begins with the <code>\"lang\"</code> instruction, contains a <code>\"Language\"</code> key indicating language of current file\\'s translations, and a <code>\"Token\"</code> key indexing all translations.</p> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>If the translation file contains any non-ASCII character, it must use <code>\"UTF-16 LE\"</code> encoding. ::::</p> <p>You\\'ll have to create one file per supported language, and all your files must be named in a similar fashion.</p> <p>For example, Northstar translation files are named <code>\"northstar_client_localisation_english.txt\"</code>, <code>\"northstar_client_localisation_french.txt\"</code>, <code>\"northstar_client_localisation_german.txt\"</code> etc.</p> <p>You can import them from your <code>mod.json</code> manifesto this way:</p> <pre><code>{\n    \"Localisation\": [\n        \"resource/northstar_client_localisation_%language%.txt\"\n    ]\n}\n</code></pre> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>The <code>\"%language%\"</code> syntax allows VM to load up translations matching game language (e.g. an English client will automatically use <code>\"northstar_client_localisation_english.txt\"</code> file) ::::</p>"},{"location":"Modding/guides/keyvalue/localisation/#use-translations-in-your-code","title":"Use translations in your code","text":"<p>To translate UI elements like menus, you have to insert strings containing your translation keys, preceded by a <code>#</code>.</p> <p>For example, to translate the \\\"Launch Northstar\\\" button on main menu, instead of calling:</p> <pre><code>AddComboButton( comboStruct, headerIndex, buttonIndex++, \"Launch Northstar\" )\n</code></pre> <p>We\\'ll use:</p> <pre><code>AddComboButton( comboStruct, headerIndex, buttonIndex++, \"#MENU_LAUNCH_NORTHSTAR\" )\n</code></pre> <p>You can also use the <code>Localize</code> method client-side:</p> <pre><code>Localize( \"#MENU_LAUNCH_NORTHSTAR\" )\n</code></pre>"},{"location":"Modding/guides/keyvalue/localisation/#northstar-translations","title":"Northstar translations","text":"<p>Northstar adds new strings to the game which can be localised to match the language you are using on your Titanfall 2 installation.</p> <p>They\\'re all located in <code>\"Northstar.Client\"</code> mod: Northstar localisation files on GitHub</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>To test your modifications, change your game language: with Origin, go to [Origin (My games library) -&gt; Titanfall 2 (right click) -&gt; Game Properties -&gt; Advanced Launch Options] ; with Steam, go to [Titanfall 2 page -&gt; Manage (cog) -&gt; Properties -&gt; Language] . ::::</p>"},{"location":"Modding/guides/reversing/","title":"Reverse Engineering Guides","text":"<p>Guides to explain the process of reverse engineering of the game.</p> <p>Toctree</p> <p>/guides/reversing/squirrelreversing :::</p>"},{"location":"Modding/guides/reversing/squirrelreversing/","title":"Pushing Values to the SQVM Stack","text":"<p>Before starting to reverse engineer how to push values to the Squirrel stack, it\\'s recommended to read the Squirrel documentation, especially the Embedding- and API Reference.</p> <p>A lot of Respawn\\'s fork of Squirrel is very similar to Squirrel3, especially the Squirrel API functions.</p>"},{"location":"Modding/guides/reversing/squirrelreversing/#setup","title":"Setup","text":"<p>Before you can start reverse engineering you need to install software to disassemble and decompile the binaries. This guide will use Ghidra, an open source reverse engineering tool developed by the NSA.</p> <p>Since code decompiled by Ghidra is often closer to the raw assembly than the original code, you might want to use IDA for decompilation. Keep in mind that IDA is not open source and the free version is lacking a lot of features and only offers a cloud decompiler.</p> <ol> <li>Download the latest Ghidra archive from the Github releases     page.     Usually the archive is called like <code>ghidra_[version]_PUBLIC_[date]</code>.</li> <li>Unzip the archive in a new folder.</li> <li>Run <code>ghidraRun.bat</code> on windows or if you\\'re on Linux make     <code>ghidraRun</code> executable and run it. On Linux, there\\'s a Flatpak     image available as     well.</li> <li>Create a new project under <code>File &gt; New Project</code> and select     <code>Non-Shared Project</code>, then hit next. Afterwards select a location     for the project and a name like <code>Titanfall2</code>.</li> <li>Import the binary you want to reverse with <code>File &gt; Import File</code>.     This guide will use <code>server.dll</code>, found in your Titanfall2 install     directory. Don\\'t change the settings ghidra auto detects when     importing the file.</li> <li>Open <code>server.dll</code> in the Ghidra project overview. When Ghidra asks     you if you want to analyse the file now, click yes. You do not need     to change any analysis settings.</li> <li>Wait for Ghidra to finish the analysis.</li> </ol>"},{"location":"Modding/guides/reversing/squirrelreversing/#understanding-native-squirrel-closures","title":"Understanding native Squirrel Closures","text":"<p>In vanilla Squirrel you can push values with functions like <code>sq_pushbool</code>. Since Respawn changed a lot in the SQVM, you should expect these API functions to be different as well.</p> <p>To start you\\'ll need a simple Squirrel function that is executing native code without any calculations or similar, like <code>IsServer</code>, or <code>IsClient</code>. These Squirrel functions are registered in native code and return <code>true</code> / <code>false</code> if the script VM is being ran in the <code>SERVER</code> or <code>CLIENT</code>.</p> <p>You can search for a string in memory with <code>Search &gt; Memory</code>. Select <code>String</code> as the format you\\'re searching for and enter <code>IsServer</code> as the search value.</p> <p>The first occurence is at <code>server.dll+0x2b44f3</code>. If you wait for the function to be decompiled, you\\'ll see the string in this code:</p> <pre><code>_DAT_181055f60 = \"IsServer\";\n_DAT_181055f68 = \"IsServer\";\n_DAT_181055fb8 = 0;\n_DAT_181055f90 = 0;\n_DAT_181055f98 = 0;\n_DAT_181055fc0 = FUN_18029a630;\n_DAT_181055f88 = _DAT_181055f88 &amp; 0xff;\n_DAT_181055f70 = ZEXT816(0x1808fa7f8);\n_DAT_181055f80 = 0;\n_DAT_181055f8c = 0;\n_DAT_181055f9c = 6;\n</code></pre> <p>Because the squirrel function executes native code, the callback <code>FUN_18029a630</code> is probably where it\\'s located. You can double click the reference to decompile the function.</p> <pre><code>undefined4 FUN_18029a630(undefined8 param_1)\n{\n    char cVar1;\n    undefined4 uVar2;\n\n    uVar2 = 1;\n    FUN_180003710(param_1,1);\n    cVar1 = FUN_18001d840(param_1);\n    if (cVar1 != '\\0') {\n        uVar2 = 0xffffffff;\n    }\n    return uVar2;\n}\n</code></pre> <p>From this you can assume that native closures in squirrel_re still use the <code>SQRESULT</code> convention, because the closure returns <code>-1</code> if <code>FUN_18001d840</code> returns <code>NULL</code>, which is typically an error and <code>1</code> if nothing happens. It\\'s also obvious that either <code>FUN_180003710</code> or <code>FUN_18001d840</code> pushes a boolean to the stack. It\\'s probably <code>FUN_180003710</code> because it takes an extra parameter but you can check <code>IsClient</code> at <code>server.dll+0x29a4d0</code> as a reference.</p> <pre><code>undefined4 FUN_18029a4d0(undefined8 param_1)\n{\n    char cVar1;\n    undefined4 uVar2;\n\n    FUN_180003710(param_1,0);\n    cVar1 = FUN_18001d840(param_1);\n    uVar2 = 1;\n    if (cVar1 != '\\0') {\n        uVar2 = 0xffffffff;\n    }\n    return uVar2;\n}\n</code></pre> <p>This is virtually the same, except that <code>FUN_180003710</code> is being called with a <code>0</code>. This makes it pretty obvious that <code>FUN_180003710</code> is the equivalent of <code>sq_pushbool</code>. Decompile the function, then right click the function and select <code>Edit Function Signature</code>. Right now the signature looks like this:</p> <pre><code>void FUN_180003710(longlong param_1, int param_2)\n</code></pre> <p><code>param_1</code> has to be a pointer to the Squirrel VM, because a pointer on 64x systems is 8 bytes long (the same as <code>longlong</code>) and the <code>HSquirrelVM</code> struct is larger than 8 bytes.</p> <p>The second parameter has to be the value that will be pushed to the VM as a boolean, since it was <code>1</code> in <code>IsServer</code> (which always returns <code>true</code>) and <code>0</code> in <code>IsClient</code> which always returns <code>false</code>.</p> <p>You can change the signature now to this, to make code using the function more readable. Because <code>HSquirrelVM</code> isn\\'t defined yet, the type needs to stay <code>longlong</code> for now.</p> <pre><code>void sq_pushbool(longlong sqvm, int value)\n</code></pre>"},{"location":"Modding/guides/scripting/","title":"Scripting tutorials","text":"<p>In depth tutorials</p> <p>Toctree</p> <p>/guides/scripting/gamemodemods /guides/scripting/custommenus :::</p>"},{"location":"Modding/guides/scripting/custommenus/","title":"Creating a custom Menu","text":"<p>This tutorial will explain how to create a mod that adds a new menu that\\'s viewable by a footer in the main menu.</p>"},{"location":"Modding/guides/scripting/custommenus/#setup","title":"Setup","text":"<p>First, create a new folder with this <code>mod.json</code>:</p> <pre><code>{\n    \"Name\": \"CustomMenuTutorial\",\n    \"Description\": \"Custom menu tutorial\",\n    \"LoadPriority\": 1,\n    \"Scripts\": [\n        {\n            \"Path\": \"ui/custom_menu.nut\",\n            \"RunOn\": \"UI\",\n            \"UICallback\": {\n                \"Before\": \"AddCustomMenu\"\n            }\n        }\n    ]\n}\n</code></pre> <p>Then create <code>custom_menu.nut</code> in <code>./mod/scripts/vscripts/ui</code>.</p>"},{"location":"Modding/guides/scripting/custommenus/#minimal-example","title":"Minimal Example","text":"<p>Create <code>AddCustomMenu</code> in <code>custom_menu.nut</code> like this and make it global:</p> <pre><code>global function AddCustomMenu\n\nvoid function AddCustomMenu()\n{\n    AddMenu( \"CustomMenu\", $\"resource/ui/menus/custommenu.menu\", CustomMenu_Init )\n}\n</code></pre> <p><code>AddCustomMenu</code> will get called when the UI vm is initializing and instantiate your menu. You can access your menu with <code>GetMenu( \"CustomMenu\" )</code> after it has been initialized.</p> <p>Next, create the file that defines the layout of your menu. It\\'s already referenced in the above code at <code>$\"resource/ui/menus/custommenu.menu\"</code>. Create the file <code>./mod/resource/ui/menus/custommenu.menu</code> and paste this code in it.</p> <p>Dropdown</p> <p>.menu configuration</p> <p><pre><code>resource/ui/menus/custommenu.menu\n{\n    menu\n    {\n        ControlName Frame\n        xpos 0\n        ypos 0\n        zpos 3\n        wide f0\n        tall f0\n        autoResize 0\n        visible 1\n        enabled 1\n        pinCorner 0\n        PaintBackgroundType 0\n        infocus_bgcolor_override \"0 0 0 0\"\n        outoffocus_bgcolor_override \"0 0 0 0\"\n\n        Vignette // Darkened frame edges\n        {\n            ControlName ImagePanel\n            InheritProperties MenuVignette\n        }\n\n        Title // The title of this menu\n        {\n            ControlName Label\n            InheritProperties MenuTitle\n            labelText \"#CUSTOM_MENU_TITLE\"\n        }\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/// Content\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n        SomeLabel // A label that is placed in the middle of the screen\n        {\n            ControlName Label\n\n            labelText \"Some Label\"\n\n            auto_wide_tocontents 1 // Set width automatically relative to the label content\n\n            xpos %50\n            ypos %50\n        }\n\n        SomeButton // A button that is placed directly beneath the label\n        {\n            ControlName RuiButton\n            InheritProperties RuiSmallButton\n\n            tall 50\n            wide 250\n\n            labelText \"Some Button\"\n            textAlignment center\n\n            pin_to_sibling SomeLabel\n            pin_corner_to_sibling TOP\n            pin_to_sibling_corner BOTTOM\n        }\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/// Footer\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n        FooterButtons // Allow adding footers to this menu\n        {\n            ControlName         CNestedPanel\n            InheritProperties   FooterButtons\n        }\n    }\n}\n</code></pre> :::</p> <p>Now you\\'ll need to define <code>CustomMenu_Init</code>. This is the function previously defined that contains all initializations needed for this menu.</p> <p>First, create an instantiated struct for variables that should be available in the scope of your custom menu script.</p> <pre><code>struct {\n    var menu\n} file\n</code></pre> <p>At the moment, this struct can only contain your menu. To set it, edit <code>AddCustomMenu</code> like this:</p> <pre><code>void function AddCustomMenu()\n{\n   AddMenu( \"CustomMenu\", $\"resource/ui/menus/custommenu.menu\", CustomMenu_Init )\n+   file.menu = GetMenu( \"CustomMenu\" )\n}\n</code></pre> <p>Now, define <code>CustomMenu_Init</code>. It doesn\\'t need to be global.</p> <pre><code>void function CustomMenu_Init()\n{\n    AddMenuFooterOption( file.menu, BUTTON_B, \"#B_BUTTON_BACK\", \"#BACK\" )\n}\n</code></pre> <p>This adds a footer to your menu, that allows the user to navigate back.</p>"},{"location":"Modding/guides/scripting/custommenus/#adding-a-footer-to-the-main-menu","title":"Adding a footer to the Main menu","text":"<p>Currently, there is no way to access your menu. You can open your (or any other menu) with <code>AdvanceMenu</code>.</p> <pre><code>AdvanceMenu( GetMenu( \"CustomMenu\" ) )\n</code></pre> <p>This is useful for callbacks triggered by button presses like from footers. To add a footer to the Main menu, first edit your <code>mod.json</code> code callbacks:</p> <pre><code>\"Scripts\": [\n   {\n       \"Path\": \"ui/custom_menu.nut\",\n       \"RunOn\": \"UI\",\n       \"UICallback\": {\n+           \"Before\": \"AddCustomMenu\", // &lt;- Notice the added comma\n+           \"After\": \"AddCustomMenuFooter\"\n       }\n   }\n]\n</code></pre> <p>We need a new callback that\\'s run after all menus are initialized to add any footers to them. Create the global function <code>AddCustomMenuFooter</code> in <code>custom_menu.nut</code> like this:</p> <pre><code>void function AddCustomMenuFooter()\n{\n    AddMenuFooterOption(\n        GetMenu( \"MainMenu\" ), // Get the main menu. We want to add a footer to this one. Change this if you want to add a footer to another menu\n        BUTTON_X, // This sets the gamepad button that will trigger the click callback defined later\n        PrependControllerPrompts( BUTTON_X, \" Custom Menu\" ), // This is the text that will show as the label of the footer if a gamepad is used\n        \"Custom Menu\", // This is the label text of the footer if no gamepad is used\n        void function( var button ) // This is the click callback.\n        {\n            /*\n                This is an anonymous function.\n                It will be run every time the footer is pressed.\n            */\n            AdvanceMenu( file.menu )\n        }\n    )\n}\n</code></pre>"},{"location":"Modding/guides/scripting/custommenus/#scripting-menu-logic","title":"Scripting Menu Logic","text":""},{"location":"Modding/guides/scripting/custommenus/#adding-a-counter","title":"Adding a Counter","text":"<p>We\\'ll use the button we defined earlier in the <code>.menu</code> file to increase a number of clicks and the label to show how often the user has clicked that button.</p> <p>first, add <code>someLabel</code> and <code>clicks</code> to the <code>file</code> struct. Then define the label in the <code>AddCustomMenu</code> and add a callback to the button.</p> <pre><code>struct {\n   var menu\n+   var someLabel\n+   int clicks\n} file\n\nvoid function AddCustomMenu()\n{\n   AddMenu( \"CustomMenu\", $\"resource/ui/menus/custommenu.menu\", CustomMenu_Init )\n   file.menu = GetMenu( \"CustomMenu\" )\n+   file.someLabel = Hud_GetChild( file.menu, \"SomeLabel\" )\n\n+   var someButton = Hud_GetChild( file.menu, \"SomeButton\" )\n+   Hud_AddEventHandler( someButton, UIE_CLICK, OnSomeButtonClick )\n}\n</code></pre> <p>Now you need to define the <code>OnSomeButtonClick</code> callback that\\'s triggered when the button is activated.</p> <pre><code>void function OnSomeButtonClick( var button )\n{\n    file.clicks++\n    Hud_SetText( file.someLabel, format( \"clicked the button %i times\", file.clicks ) )\n}\n</code></pre>"},{"location":"Modding/guides/scripting/custommenus/#adding-a-reset-button","title":"Adding a Reset Button","text":"<p>First you need to add a definition in your <code>custommenu.menu</code> file:</p> <pre><code>ResetButton\n{\n    ControlName RuiButton\n    InheritProperties RuiSmallButton\n\n    tall 50\n    wide 250\n\n    labelText \"Reset Counter\"\n    textAlignment center\n\n    pin_to_sibling SomeButton\n    pin_corner_to_sibling TOP\n    pin_to_sibling_corner BOTTOM\n}\n</code></pre> <p>Then add a <code>UIE_CLICK</code> callback for the button. It also makes sense to move the code that updates the label text to it\\'s own function so it can be reused by the reset button.</p> <pre><code>void function AddCustomMenu()\n{\n   AddMenu( \"CustomMenu\", $\"resource/ui/menus/custommenu.menu\", CustomMenu_Init )\n   file.menu = GetMenu( \"CustomMenu\" )\n   file.someLabel = Hud_GetChild( file.menu, \"SomeLabel\" )\n\n   var someButton = Hud_GetChild( file.menu, \"SomeButton\" )\n+   var resetButton = Hud_GetChild( file.menu, \"ResetButton\" )\n\n   Hud_AddEventHandler( someButton, UIE_CLICK, OnSomeButtonClick )\n+   Hud_AddEventHandler( resetButton, UIE_CLICK, OnResetButtonClick )\n}\n\nvoid function OnSomeButtonClick( var button )\n{\n   file.clicks++\n-   Hud_SetText( file.someLabel, format( \"clicked the button %i times\", file.clicks ) )\n+   UpdateClickLabel()\n}\n\nvoid function OnResetButtonClick( var button )\n{\n   file.clicks = 0\n+   UpdateClickLabel()\n}\n\n+void function UpdateClickLabel()\n+{\n+   Hud_SetText( file.someLabel, format( \"clicked the button %i times\", file.clicks ) )\n+}\n</code></pre>"},{"location":"Modding/guides/scripting/custommenus/#resetting-the-counter-when-the-menu-is-closed","title":"Resetting the Counter when the Menu is closed","text":"<p>You can add callbacks for menu events, for example when a menu is closed or opened.</p> <p>If you want to reset the counter if the menu is closed, edit <code>AddCustomMenu</code> like this:</p> <pre><code>void function AddCustomMenu()\n{\n   AddMenu( \"CustomMenu\", $\"resource/ui/menus/custommenu.menu\", CustomMenu_Init )\n   file.menu = GetMenu( \"CustomMenu\" )\n   file.someLabel = Hud_GetChild( file.menu, \"SomeLabel\" )\n\n   var someButton = Hud_GetChild( file.menu, \"SomeButton\" )\n   var resetButton = Hud_GetChild( file.menu, \"ResetButton\" )\n\n   Hud_AddEventHandler( someButton, UIE_CLICK, OnSomeButtonClick )\n   Hud_AddEventHandler( resetButton, UIE_CLICK, OnResetButtonClick )\n\n+   AddMenuEventHandler( file.menu, eUIEvent.MENU_CLOSE, OnCloseCustomMenu )\n}\n</code></pre> <p>And define the callback <code>OnCloseCustomMenu</code> to simply call <code>OnResetButtonClick</code>.</p> <pre><code>void function OnCloseCustomMenu()\n{\n    OnResetButtonClick( null )\n}\n</code></pre>"},{"location":"Modding/guides/scripting/gamemodemods/","title":"Creating gamemodes","text":"<p>Creating a gamemode is significantly more complex than making mutators. The main differences are the number of things you must define in order to create a functioning gamemode.</p> <p>For example, the client localisation, the way the gamemode is defined (FFA, TDM, etc), the scoring system, respawn system (FFA or TDM spawnpoints) and team mechanics must all be considered.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#the-modjson","title":"The <code>mod.json</code>","text":"<p>The <code>mod.json</code> is responsible for governing when, and where your mod is loaded, and follows a layout that is fairly complicated at first glance. However, once you get the hang of it, it should be fairly easy to use.</p> <pre><code>{\n    \"Name\" : \"SimpleRandomiser\",\n    \"Description\" : \"A randomiser gamemode that randomizes your loadouts!\",\n    \"Version\": \"0.1.0\",\n    \"LoadPriority\": 1,\n</code></pre> <p>The script above defines the pubic and listed details of the mod.</p> <pre><code>\"Scripts\": [\n    {\n        \"Path\": \"gamemodes/_gamemode_simplerandomiser.nut\",\n    \"RunOn\": \"SERVER &amp;&amp; MP\"\n    },\n    {\n        \"Path\": \"gamemodes/cl_gamemode_simplerandomiser.nut\",\n        \"RunOn\": \"CLIENT &amp;&amp; MP\"\n    },\n    {\n        \"Path\": \"sh_gamemode_simplerandomiser.nut\",\n        \"RunOn\": \"MP\",\n        \"ClientCallback\": {\n            \"Before\": \"simplerandomiser_init\"\n        },\n        \"ServerCallback\": {\n            \"Before\": \"simplerandomiser_init\"\n        }\n    }\n],\n</code></pre> <p>The script above defines both what functions to run, when to run them and WHERE to run them,</p> <p>The first one being <code>_gamemode_simplerandomiser.nut</code> runs the server scripts, which handles the portion of everything related to the player, such as taking their weapons and replacing it with a different one.</p> <p>Second one being <code>cl_gamemode_simplerandomiser.nut</code> is where the client scripts run to perform stuff locally on the player\\'s game, such as playing music, receiving announcement texts from the server and so on.</p> <p>Lastly, <code>sh_gamemode_simplerandomiser.nut</code> is a shared script between server and client, in this case it runs your <code>simplerandomiser_init</code> in order to assign many variables for the server and client to \\\"know\\\" about this gamemode.</p> <p>For example, both server and client needs to know whether if this gamemode exists in the private match settings, the scoring HUD and system, the spawnpoints configuration and many more.</p> <pre><code>\"Localisation\": [\n    \"resource/simplerandomiser_localisation_%language%.txt\"\n]\n}\n</code></pre> <p>This defines the path to the language file, and its main use is to localize strings such as the announcement texts, gamemode and so on.</p> <p>Name this file <code>mod.json</code>, and it should go in the mods root folder, that being /yourmodname.</p> <p>Here\\'s what the end result would look like:</p> <pre><code>{\n    \"Name\" : \"SimpleRandomiser\",\n    \"Description\" : \"SimpleRandomiser\",\n    \"Version\": \"0.1.0\",\n    \"LoadPriority\": 1,\n    \"Scripts\": [\n    {\n        \"Path\": \"gamemodes/_gamemode_simplerandomiser.nut\",\n    \"RunOn\": \"SERVER &amp;&amp; MP\"\n    },\n    {\n        \"Path\": \"gamemodes/cl_gamemode_simplerandomiser.nut\",\n        \"RunOn\": \"CLIENT &amp;&amp; MP\"\n    },\n    {\n        \"Path\": \"sh_gamemode_simplerandomiser.nut\",\n        \"RunOn\": \"MP\",\n        \"ClientCallback\": {\n            \"Before\": \"simplerandomiser_init\"\n        },\n        \"ServerCallback\": {\n            \"Before\": \"simplerandomiser_init\"\n        }\n    }\n],\n    \"Localisation\": [\n        \"resource/simplerandomiser_localisation_%language%.txt\"\n    ]\n}\n</code></pre>"},{"location":"Modding/guides/scripting/gamemodemods/#language-file","title":"Language file","text":"<p>This follows a fairly simple template, the only thing of note is that you often get strange behaviour using <code>UTF-8</code> when saving the file instead of using <code>UTF-16 LE</code>.</p> <pre><code>\"lang\"\n{\n    \"Language\" \"english\"\n    \"Tokens\"\n    {\n        \"MODE_SETTING_CATEGORY_SIMPLERANDOMISER\" \"Simple Randomiser\"\n        \"SIMPLERANDOMISER\" \"Randomise\"\n    }\n}\n</code></pre> <p>Name this file <code>simplerandomiser_localisation_english.txt</code> and place it in the <code>yourmodsname/mod/resource/</code> folder.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#shared-functions","title":"Shared functions","text":"<p>Let\\'s begin the process by first creating the file <code>sh_gamemode_simplerandomiser.nut</code> and making the core components of the gamemode, which is to define the gamemode properties.</p> <pre><code>global function simplerandomiser_init // initializing functions\nglobal const string GAMEMODE_SIMPLERANDOMISER = \"rand\" \n// we want a short term to use which allows server owners to \n// select our gamemode without typing the entire name\n// also makes it easier for us lol\n\nvoid function simplerandomiser_init()\n{\n    // start defining what to do before the map loads on this gamemode\nAddCallback_OnCustomGamemodesInit( CreateGamemodeRand ) // define various properties such as name, desc, so on\nAddCallback_OnRegisteringCustomNetworkVars( RandRegisterNetworkVars ) // server callbacks stuff\n}\n\nvoid function CreateGamemodeRand()\n{\nGameMode_Create( GAMEMODE_SIMPLERANDOMISER )\nGameMode_SetName( GAMEMODE_SIMPLERANDOMISER, \"#GAMEMODE_SIMPLERANDOMISER\" ) // localizations will be handled later\nGameMode_SetDesc( GAMEMODE_SIMPLERANDOMISER, \"#PL_rand_desc\" )\nGameMode_SetGameModeAnnouncement( GAMEMODE_SIMPLERANDOMISER, \"grnc_modeDesc\" )\nGameMode_SetDefaultTimeLimits( GAMEMODE_SIMPLERANDOMISER, 10, 0.0 ) // a time limit of 10 minutes\nGameMode_AddScoreboardColumnData( GAMEMODE_SIMPLERANDOMISER, \"#SCOREBOARD_SCORE\", PGS_ASSAULT_SCORE, 2 ) // dont fuck with it\nGameMode_AddScoreboardColumnData( GAMEMODE_SIMPLERANDOMISER, \"#SCOREBOARD_PILOT_KILLS\", PGS_PILOT_KILLS, 2 ) // dont fuck with it\nGameMode_SetColor( GAMEMODE_SIMPLERANDOMISER, [147, 204, 57, 255] ) // dont fuck with it\n\nAddPrivateMatchMode( GAMEMODE_SIMPLERANDOMISER ) // add to private lobby modes\n\nAddPrivateMatchModeSettingEnum(\"#PL_rand\", \"rand_enableannouncements\", [\"#SETTING_DISABLED\", \"#SETTING_ENABLED\"], \"1\")\n// creates a togglable riff whether or not we want to announce a text to the client\nAddPrivateMatchModeSettingArbitrary(\"#PL_rand\", \"rand_announcementduration\", \"3\")\n// Creates a riff with an arbitrary numerical value for how long the announcement text remains on screen\n// These riffs can be accessed from server configs or from the private match settings screen, under the \"Simple Randomiser\" category\n\n\n// set this to 25 score limit default\nGameMode_SetDefaultScoreLimits( GAMEMODE_SIMPLERANDOMISER, 25, 0 )\n\n#if SERVER\n    GameMode_AddServerInit( GAMEMODE_SIMPLERANDOMISER, GamemodeRand_Init ) // server side initalizing function\n    GameMode_SetPilotSpawnpointsRatingFunc( GAMEMODE_SIMPLERANDOMISER, RateSpawnpoints_Generic )\n    GameMode_SetTitanSpawnpointsRatingFunc( GAMEMODE_SIMPLERANDOMISER, RateSpawnpoints_Generic )\n            // until northstar adds more spawnpoints algorithm, we are using the default.\n#elseif CLIENT\n    GameMode_AddClientInit( GAMEMODE_SIMPLERANDOMISER, ClGamemodeRand_Init ) // client side initializing function\n#endif\n#if !UI\n    GameMode_SetScoreCompareFunc( GAMEMODE_SIMPLERANDOMISER, CompareAssaultScore ) \n            // usually compares which team's score is higher and places the winning team on top of the losing team in the scoreboard\n#endif\n}\n\nvoid function RandRegisterNetworkVars()\n{\nif ( GAMETYPE != GAMEMODE_SIMPLERANDOMISER )\n    return\n\nRemote_RegisterFunction( \"ServerCallback_Randomiser\" )\n    // will come in useful later when we want the server to communicate to the client\n    // for example, making an announcement appear on the client\n}\n</code></pre> <p>The comments should hopefully explain what most of everything does, but just to summarize:</p> <ul> <li>we defined the gamemode\\'s name and description using a string that     we will localize ourselves later.</li> <li>we set the default scoring method, what spawnpoint algorithm to use,     as well as the scoreboard size.</li> <li>we defined server callbacks, which we will use later on in the     server scripts portion of this gamemode.</li> </ul> <p>Now that we\\'re done, name this file <code>sh_gamemode_simplerandomiser.nut</code> and place it in the <code>yourmodsname/mod/scripts/vscripts/gamemodes</code> folder.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#server-side-function","title":"Server-side function","text":"<p>Now that we\\'re down with defining the gamemode, its time to focus on the component on that makes the gamemode function in-game. For this, it will be mostly handled by the server scripts, so head into <code>_gamemode_simplerandomiser.nut</code> to begin writing the randomizing script.</p> <pre><code>global function GamemodeRand_Init\n\nvoid function GamemodeRand_Init()\n{\n    #if SERVER\nSetLoadoutGracePeriodEnabled( false ) // prevent modifying loadouts with grace period\nSetWeaponDropsEnabled( false ) // prevents picking up weapons on the ground\n    AddCallback_OnPlayerRespawned( GiveRandomGun )\n    #endif\n}\n</code></pre> <p>As you may have noticed, checking if it is a server is a special case, so we use <code>#if SERVER</code> and <code>#endif</code> instead of the usual <code>if(thing){stuff}</code></p> <p>Now that our initial function is created, we now have the game triggering [GiveRandomGun] when a player spawns, but we don\\'t have any such function, so let\\'s begin creating one.</p> <p>Firstly, we need to know what weapons we can equip. For this we define an array:</p> <pre><code>array&lt;string&gt; pilotWeapons = [\"mp_weapon_alternator_smg\",\n                              \"mp_weapon_autopistol\",\n                              \"mp_weapon_car\",\n                              \"mp_weapon_dmr\"]\n</code></pre> <p>Here we have defined an array with only 4 weapons in it, you can make this list however you like but remember to separate all but the last item with a <code>,</code></p>"},{"location":"Modding/guides/scripting/gamemodemods/#randomise-function","title":"Randomise function","text":"<p>As we already know its going to call the function <code>GiveRandomGun</code> when a player respawns, let\\'s define that now. First we strip any existing weapons:</p> <pre><code>void function GiveRandomGun(entity player)\n{\n    foreach ( entity weapon in player.GetMainWeapons() )\n        player.TakeWeaponNow( weapon.GetWeaponClassName() )\n</code></pre> <p>This iterates through each weapon (that being the primary, secondary and anti-titan weapons) and removes them individually.</p> <p>Then lets give them a new, random weapon by selecting a random item from our previous array:</p> <pre><code>player.GiveWeapon( pilotWeapons[ RandomInt( pilotWeapons.len() ) ] )\n</code></pre> <p>Now, remember the server callback that we defined earlier in <code>sh_gamemode_simplerandomiser.nut</code>? Let\\'s put that to use. We are going to make it so the player receives an announcement whenever they have their weapons randomized.</p> <pre><code>// checks if the toggle option is set to enabled\nif ( GetCurrentPlaylistVarInt( \"rand_enableannouncements\", 1 ) == 1 )\n    Remote_CallFunction_NonReplay( player, \"ServerCallback_Randomiser\" ) // call the function that will be used client-side\n</code></pre> <p>Overall, the server script should look like this.</p> <pre><code>global function GamemodeRand_Init\n\nvoid function GamemodeRand_Init()\n{\n    #if SERVER\nSetLoadoutGracePeriodEnabled( false ) // prevent modifying loadouts with grace period\nSetWeaponDropsEnabled( false ) // prevents picking up weapons on the ground\n    AddCallback_OnPlayerRespawned( GiveRandomGun )\n    #endif\n}\n\narray&lt;string&gt; pilotWeapons = [\"mp_weapon_alternator_smg\",\n                              \"mp_weapon_autopistol\",\n                              \"mp_weapon_car\",\n                              \"mp_weapon_dmr\"]\n\nvoid function GiveRandomGun(entity player)\n{\n    foreach ( entity weapon in player.GetMainWeapons() )\n        player.TakeWeaponNow( weapon.GetWeaponClassName() )\n\n    player.GiveWeapon( pilotWeapons[ RandomInt( pilotWeapons.len() ) ] )\n\n    // checks if the toggle option is set to enabled\n    if ( GetCurrentPlaylistVarInt( \"rand_enableannouncements\", 1 ) == 1 )\n        Remote_CallFunction_NonReplay( player, \"ServerCallback_Randomiser\", GetCurrentPlaylistVarFloat( \"rand_announcementduration\", 3 ) ) // call the function that will be used client-side\n}\n</code></pre> <p>Name this file <code>_gamemode_simplerandomiser.nut</code> and place it in the <code>yourmodsname/mod/scripts/vscripts/gamemodes</code> folder as well. Make sure to double check that all spellings are correct in your mod as everything is case-sensitive.</p> <p>Client-side functions ------------------Lastly, for your <code>cl_gamemode_simplerandomiser.nut</code>, we are going to utilize the callback functions from earlier, as well as add some music to play during the gamemode.</p> <pre><code>global function ClGamemodeRand_Init\nglobal function ServerCallback_Randomiser\n\nvoid function ClGamemodeRand_Init()\n{\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_INTRO, \"music_mp_freeagents_intro\", TEAM_IMC )\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_INTRO, \"music_mp_freeagents_intro\", TEAM_MILITIA )\n\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_WIN, \"music_mp_freeagents_outro_win\", TEAM_IMC )\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_WIN, \"music_mp_freeagents_outro_win\", TEAM_MILITIA )\n\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_DRAW, \"music_mp_freeagents_outro_lose\", TEAM_IMC )\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_DRAW, \"music_mp_freeagents_outro_lose\", TEAM_MILITIA )\n\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LOSS, \"music_mp_freeagents_outro_lose\", TEAM_IMC )\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LOSS, \"music_mp_freeagents_outro_lose\", TEAM_MILITIA )\n\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_THREE_MINUTE, \"music_mp_freeagents_almostdone\", TEAM_IMC )\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_THREE_MINUTE, \"music_mp_freeagents_almostdone\", TEAM_MILITIA )\n\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LAST_MINUTE, \"music_mp_freeagents_lastminute\", TEAM_IMC )\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LAST_MINUTE, \"music_mp_freeagents_lastminute\", TEAM_MILITIA )\n}\n\nvoid function ServerCallback_Randomiser( float duration )\n{\n    AnnouncementData announcement = Announcement_Create( \"#RAND_RANDOMIZED\" )\nAnnouncement_SetSubText( announcement, \"#RAND_RANDOMIZED_DESC\" )\nAnnouncement_SetTitleColor( announcement, &lt;0,0,1&gt; )\nAnnouncement_SetPurge( announcement, true )\nAnnouncement_SetPriority( announcement, 200 ) //Be higher priority than Titanfall ready indicator etc\nAnnouncement_SetSoundAlias( announcement, SFX_HUD_ANNOUNCE_QUICK )\nAnnouncement_SetDuration( announcement, duration )\nAnnouncement_SetStyle( announcement, ANNOUNCEMENT_STYLE_QUICK )\nAnnouncementFromClass( GetLocalViewPlayer(), announcement )\n}\n</code></pre> <p>What this script does is quite simple. It registers default music to play during the intro portion, when winning, drawing or losing, as well as the event when the timelimit reaches 3 minutes or 1 minute left.</p> <p>Also, it also displays an announcement towards the player when they have their weapons randomized.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#localization","title":"Localization","text":"<p>\\\"So we\\'re all done with the scripting stuff, right? That means we can finally run the gamemode itself!\\\"</p> <p>Technically, yes, you could. But it wouldn\\'t look pretty. Remember all those strings with the # symbol in front of them? We have to localize them first so it displays correctly.</p> <p>Hence, open your <code>simplerandomiser_localisation_english.txt</code> which is located in the <code>yourmodsname/mod/resource/</code> folder.</p> <pre><code>\"lang\"\n{\n\"Language\" \"english\"\n\"Tokens\"\n{\n    \"PL_rand\" \"Simple Randomiser\" // displays in the lobby settings\n            \"rand_enableannouncements\" \"Toggle announcements\" // describe the togglable setting\n    \"rand_announcementduration\" \"Announcement duration\" // describe the numerical setting\n    \"PL_rand_lobby\" \"Simple Randomiser Lobby\" // displays in lobby\n    \"PL_rand_desc\" \"Your weapons are randomised! Fight and win!\" // displays in the description of the gamemode in the lobby\n    \"PL_rand_hint\" \"Your weapons are randomised! Fight and win!\" // displays in the scoreboard of the gamemode ingame\n    \"PL_rand_abbr\" \"RAND\"\n    \"GAMEMODE_TBAG\" \"Simple Randomiser\" // displays in the loading screen\n            \"RAND_RANDOMIZED\" \"Weapons Randomized\" // displays in the announcement text\n            \"RAND_RANDOMIZED_DESC\" \"Fight and win!\" // displays below the announcement text, as a description\n}\n}\n</code></pre> <p>Alright, we\\'re finally done! However, there\\'s just one thing missing, which is to let the game know what maps are available for this gamemode to play on.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#maps","title":"Maps","text":"<p>We will need to create a file called <code>playlists_v2.txt</code> and place it in <code>yourmodsname/keyvalues</code> folder.</p> <p>Yes, you will need to create a folder called <code>keyvalues</code> which is separate from the <code>mod</code> folder that we placed all our scripts and localization inside.</p> <p>Next, inside this <code>playlists_v2.txt</code>, we will need to allow/disallow what maps can the gamemode be played on.</p> <pre><code>playlists\n{\nGamemodes\n{\n    rand\n    {\n        inherit defaults\n        vars\n        {\n            name #PL_rand\n            lobbytitle #PL_rand_lobby\n            description #PL_rand_desc\n            hint #PL_rand_hint\n            abbreviation #PL_rand_abbr\n            max_players 12\n            max_teams 2\n            classic_mp 1\n\n            gamemode_score_hint #GAMEMODE_SCORE_HINT_TDM\n        }\n    }\n    }\n    Playlists\n{\n    rand\n    {\n        inherit defaults\n        vars\n        {\n            name #PL_rand\n            lobbytitle #PL_rand_lobby\n            description #PL_rand_desc\n            abbreviation #PL_rand_abbr\n            image ps\n            //mixtape_slot 7\n            mixtape_timeout 120\n            visible 0\n        }\n        gamemodes\n        {\n            rand\n            {\n                    maps\n                {\n                        mp_forwardbase_kodai 1\n                                            mp_grave 1\n                                            mp_homestead 1\n                                            mp_thaw 1\n                                            mp_black_water_canal 1\n                                            mp_eden 1\n                                            mp_drydock 1\n                                            mp_crashsite3 1\n                                            mp_complex3 1\n                                            mp_angel_city 1\n                                            mp_colony02 1\n                                            mp_glitch 1\n                    mp_lf_stacks 1\n                    mp_lf_deck 1\n                    mp_lf_meadow 1\n                    mp_lf_traffic 1\n                    mp_lf_township 1\n                    mp_lf_uma 1\n                    mp_relic02 1\n                    mp_wargames 1\n                    mp_rise 1\n                                            mp_coliseum 1\n                                            mp_coliseum_column 1\n                }\n            }\n        }\n    }\n    }\n}\n</code></pre> <p>There isn\\'t much to say here except that we enabled this gamemode to played on all maps. So if this gamemode is set to auto-rotate maps in a server, it will go from one map to the next in order. You could disable certain maps by changing the <code>1</code> to a <code>0</code>.</p> <p>Another thing to note is that under the <code>Playlists</code> tab, there is an <code>image</code> slot. You could change the image that displays when selecting a gamemode in the private match lobby. You can find out what the keyvalues for the other images by checking out other gamemodes in <code>Northstar.Custom/keyvalues/playlists_v2.txt</code>.</p>"},{"location":"Modding/guides/scripting/gamemodemods/#closing-words","title":"Closing words","text":"<p>And that should be all you need in order to create a gamemode. Thanks for reading all the way to this point, and I hope you have learnt a thing or two.</p> <p>If you ever have a question or two, feel free to head into the Northstar Discord and ask about in #modding-chat.</p> <ul> <li>Revised by <code>x3Karma#6984</code></li> </ul>"},{"location":"Modding/guides/tools/","title":"Modding Tools","text":"<p>Toctree</p> <p>/guides/tools/rpakmodding /guides/tools/soundmodding /guides/tools/tools /guides/tools/VTFModding /guides/tools/MDLModding /guides/tools/BIKVideoModding :::</p>"},{"location":"Modding/guides/tools/BIKVideoModding/","title":"BIK Video Modding","text":""},{"location":"Modding/guides/tools/BIKVideoModding/#prequisites-to-video-modding","title":"Prequisites to Video Modding","text":"<p>- The RAD Video Tools installed on your PC .. note:: The ZIP file containing the installer is password protected, you can find it on the download page</p>"},{"location":"Modding/guides/tools/BIKVideoModding/#converting-the-video","title":"Converting the Video","text":"<ol> <li>Open RAD Video Tools</li> <li>Browse to your Video in the File Browser and select it</li> <li>Press \\\"Bink it!\\\"</li> <li>In the newly opened window press \\\"Bink\\\"</li> <li>Wait for the Conversion to finish, then press done</li> </ol> <p>The Video will now be in the same folder as the original one and converted to a .bik file</p>"},{"location":"Modding/guides/tools/BIKVideoModding/#making-a-main-menu-video-mod","title":"Making a Main Menu Video Mod","text":"<ol> <li> <p>Convert a Video to .bik</p> </li> <li> <p>Rename the newly converted .bik to <code>menu_act01.bik</code></p> </li> <li> <p>Make a mod according to Getting     Started</p> </li> <li> Copy the .bik to the following path in your mod folder: <p><code>text author.mod/ \u251c\u2500 mod.json \u251c\u2500 media/ \u2502  \u251c\u2500 menu_act01.bik</code></p> </li> <li> <p>Your mod should now load a custom Main Menu Video</p> </li> </ol>"},{"location":"Modding/guides/tools/BIKVideoModding/#playing-a-custom-bik-video","title":"Playing a Custom BIK Video","text":"<p>Not only can you replace the pre-existing BIK files Respawn uses, you can also make your own custom ones and play them whenever you like with console commands.</p> <p><code>playvideo [video name] [horizontal resolution] [vertical resolution]</code> will play the named BIK file within the specified resolution.</p> <p>EX. <code>playvideo mycoolvideo 100 100</code> will play the BIK file named \\\"mycoolvideo\\\" within a 100x100 resolution square in the top-left corner.</p> <p>The <code>stopvideos</code> command will end any currently playing BIK videos.</p> <p>With these commands, BIK files can be used as a substitute for custom audio outside of audio overrides, though they of course can only be played directly on the client and have no directional audio. Videos running in a 1x1 resolution in the top-left corner will be nearly unnoticeable outside of whatever audio they\\'re playing.</p> <p>Some things to note while using custom BIK videos:</p> <ul> <li>BIKs will always play anchored to the top-left corner of the screen.</li> <li>BIK sound is only affected by the Master volume slider.</li> <li>If a resolution within the playvideo command is not entered or is     invalid, it will be auto-filled by whatever the current window\\'s     resolution is. Any number from 1 to 32767 is valid. Anything higher     will cause the video to not play.</li> <li>Videos will NOT stretch based on resolution, any extra space is     just black.</li> <li>You can also convert files like .mp3 and .wav into .bik. However,     the audio quality in-game diminishes considerably.</li> <li>While BIKs are allowed to have transparency, Titanfall 2 does not     process it appropriately.</li> <li>BIK videos will layer on top of each other based on when their     command is run. There is no way to change how they are layered.</li> <li>When a BIK video ends, if there are any other videos currently     running above it, they will be forced to disappear for a single     frame right before that video ends. This causes a noticeable flicker     for any BIKs that are being used for actual video rather than just     sound.</li> <li>While the resolution used in the playvideo command does not affect     performance, the actual video\\'s resolution can. It\\'s recommended     your actual video\\'s resolution is lowered only to what is needed.     In the case of only using BIKs for sound, it\\'s recommended you     lower resolution and framerate as much as possible with whatever     video editor you use.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/","title":"MDL Modding","text":""},{"location":"Modding/guides/tools/MDLModding/#mdl-overview","title":"MDL Overview","text":"<p>Model (MDL) is the extension for Source\\'s proprietary model format. It defines the structure of the model along with animation, bounding box, hit box, materials, mesh and LOD information. Unlike other Source games in Titanfall 2 files like the .phy, .vtx, .vvd etc. are not separate files and are instead included in the .mdl file.</p> <p>VALVe developer docs \\\"Model\\\"</p>"},{"location":"Modding/guides/tools/MDLModding/#editing-an-existing-model","title":"Editing an existing Model","text":"<p>While creating an entire Model from scratch is possible it would be an extremely long and tedious task. Instead its recommended to use an existing Model as your base.</p>"},{"location":"Modding/guides/tools/MDLModding/#prequisites","title":"Prequisites","text":"<ul> <li> <p>Blender (min. 2.92)</p> </li> <li> <p>Blender Source     Tools     (refer to Download page for install instructions)</p> </li> <li> <p>Crowbar (min 0.74)</p> <ul> <li>One of the following on Steam:</li> <li>Portal 2     (and its Authoring Tools Portal 2     SDK)</li> <li>SourceFilmMaker     (FREE)</li> </ul> </li> <li> <p>mdlshit</p> </li> <li> <p>Harmony VPK (optional     if you want to extract the model yourself)</p> </li> </ul> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>This Guide is tailored towards users with atleast some experience with Blender. If you are new to Blender I recommend you to first familiarize yourself with the basics of Blender. There are many tutorials on the Internet that can help you with that. Especially the following topics are important for modifying or creating game assets:</p> <ul> <li>Modeling</li> <li>UV Mapping</li> <li>Texturing</li> <li>Rigging</li> </ul> <p>These things work in conjunction with each other and are all important for creating a game ready model. An understanding of these topics is very helpful for proper usage of Blender. ::::</p>"},{"location":"Modding/guides/tools/MDLModding/#workflow","title":"Workflow","text":"<p>The workflow for editing a model is as follows:</p> <ul> <li>Extract the model using HARMONY VPK or Downloading     the model from the Titanfall 2 Skin Modding     Repo</li> <li>Decompile the model using CROWBAR</li> <li>Importing the model in BLENDER</li> <li>Editing the model to our liking</li> <li>Assigning a material to parts of our model</li> <li>Exporting the model from BLENDER</li> <li>Compiling using CROWBAR</li> <li>Converting the MDL file with other output files using     MDLSHIT</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#short-video-guide","title":"Short Video Guide","text":"<p>This is a short video guide on MDL Editing, there are some discrepancies between the video and this guide but the general workflow is the same. Its relatively quick but shows the process quite well.</p> <p>Youtube</p> <p>mZg5AlWvXZs :::</p>"},{"location":"Modding/guides/tools/MDLModding/#blender","title":"Blender","text":"<p>Blender will be used to edit the model. It is a free and open-source 3D computer graphics software toolset with many features. It is widely used for animation, modeling, scene creation, and game development.</p> <p>The Source Tools add-on for Blender allows us to import and export Source Engine assets. It is a community-driven project that aims to provide users with a convenient way to import and export Source Engine assets from and to Blender, for a wide range of applications, including animation, modeling, scene creation, and game development.</p> <p>We will use both in conjunction to edit the model.</p>"},{"location":"Modding/guides/tools/MDLModding/#crowbar","title":"Crowbar","text":"<p>Crowbar is a tool written by ZeqMacaw. It is used to decompile and compile Source Engine assets, such as models, textures, and sounds.</p> <p>We will use it to decompile and compile the model.</p>"},{"location":"Modding/guides/tools/MDLModding/#mdlshit","title":"MDLShit","text":"<p>MDLShit is a tool written by headassbtw. It is used to combine the MDL file with the other output files from Crowbar.</p> <p>We will use it to combine the MDL file with the other output files from Crowbar.</p>"},{"location":"Modding/guides/tools/MDLModding/#harmony-vpk","title":"Harmony VPK","text":"<p>Harmony VPK is a tool written by the Harmony Team. It\\'s an electron-based GUI for VPKTool, and is used to extract files from VPK files.</p> <p>We will use it to extract the model from the game files.</p>"},{"location":"Modding/guides/tools/MDLModding/#workflow-in-detail","title":"Workflow in Detail","text":"<p>In this section we will go through the workflow in detail by using the Flatline as an example. We will add a cube to the side of the Flatline and assign a custom material to it.</p>"},{"location":"Modding/guides/tools/MDLModding/#step-1-extracting","title":"Step 1: Extracting","text":"<p>Note</p> <p>Title</p> <p>Note :::</p> <p>Can be skipped if you downloaded the model from the Titanfall 2 Skin Modding Repo. ::::</p> <ul> <li>Open HARMONY VPK.</li> <li>On the top right click on the <code>Open VPK</code> button.</li> <li>Navigate to the location of your Titanfall 2 installions <code>/vpk/</code>     folder.</li> <li>Open the <code>.vpk</code> file you want to extract (most multiplayer weapons     are in <code>client_mp_common.bsp.pak000_000.vpk</code> since you most likely     want one of those).</li> <li>You will now see a list of all files in the <code>.vpk</code> file on the left     side looking something like this:</li> </ul> <pre><code>RootDir\n\u251c\u2500\u2500 materials\n\u251c\u2500\u2500 resource\n\u251c\u2500\u2500 cfg\n\u251c\u2500\u2500 scripts\n\u251c\u2500\u2500 models\n\u251c\u2500\u2500 maps\n\u2514\u2500\u2500 depot\n</code></pre> <ul> <li> <p>Navigate to the <code>models</code> folder (this is where all models in this     file are located).</p> </li> <li> <p>Navigate to the folder of the model you want to extract (for example     <code>weapons/vinson</code> which is the internal name for the Flatline).</p> </li> <li> <p>Select the <code>.mdl</code> file you want to extract (for example     <code>ptpov_vinson.mdl</code>).</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Weapons are mostly split into two models, one for the first person view(<code>ptpov_</code> and the world model <code>w_</code>.</p> <p><code>ptpov</code> is used when you are in first person.</p> <p><code>w_</code> is used when the weapon is viewed in the world (for example when its dropped on the ground). ::::</p> </li> <li> <p>Click on the <code>Unpack</code> button on the top right.</p> </li> <li> <p>You are now prompted to select a folder to extract the model to,     select a folder of your choice and click on <code>Select Folder</code>.</p> </li> <li> <p>Your model is now extracted and you can close Harmony VPK.</p> </li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-2-decompiling-the-model","title":"Step 2: Decompiling the model","text":"<p>Note</p> <p>Title</p> <p>Note :::</p> <p>In order to use Crowbar the way we will we need to setup a few things first.</p> <p>This step only needs to be done once ::::</p> <p>Setup Crowbar (one time only) ~~~~~~~~~~~~~</p> <ul> <li> <p>Uppon first launch select the <code>Set Up Games</code> tab on the top left.</p> </li> <li> <p>Select either <code>Portal 2</code> or <code>Source Filmmaker</code> in the dropdown menu     on the top.</p> </li> <li> <p>Make sure your Library Path is set to the location of the Steam     library you have the game installed in on the bottom.</p> </li> <li> <p>The <code>Game Setup</code> section should now be filled with the correct     paths.</p> </li> <li> <p>Select the <code>Decompile</code> tab on the top.</p> </li> <li> <p>In this tab make sure the following settings are set:</p> <ul> <li><code>MDL input</code>: <code>File</code></li> </ul> <p>- <code>Output to</code>: <code>Subfolder (of MDL input)</code> (change the text in the box to the right of that to <code>decompiled</code>) Check the following boxes:</p> <ul> <li><code>QC file</code></li> <li><code>Each $texturegroup skin-familiy on single line</code></li> <li><code>Include $definebones lines (typical for view models)</code></li> <li><code>Use MixedCase for keywords</code></li> <li><code>Reference mesh SMD file</code></li> <li><code>Physics mesh SMD file</code></li> <li><code>Vertex animation VTA file (flexes)</code></li> <li><code>Procedural bones VRD file</code></li> <li><code>Bone animation SMD files</code></li> <li><code>Place in \"anims\" subfolder</code></li> <li><code>Prefix mesh file names with model name</code></li> </ul> </li> <li> <p>Select the <code>Compile</code> tab on the top.</p> </li> <li> <p>In this tab make sure the following settings are set:</p> <ul> <li><code>QC input</code>: <code>File</code></li> </ul> <p>- <code>Output to</code>: <code>Subfolder (of QC input)</code> (change the text in the box to the right of that to <code>compiled</code>) Check the following boxes:</p> <ul> <li><code>No P4</code></li> <li><code>Verbose</code></li> </ul> <p>Set <code>Game that has the model compiler</code> to the game you selected in the <code>Set Up Games</code> tab on the top left.</p> </li> <li> <p>This concludes the setup for crowbar these settings will be saved     and you will not need to do this again.</p> </li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#decompiling-the-model","title":"Decompiling the model","text":"<ul> <li>Click on the <code>Browse</code> button on the top right.</li> <li>Navigate to the folder you extracted the model to in the previous     step.</li> <li>Select the <code>.mdl</code> file you want to decompile (for example     <code>ptpov_vinson.mdl</code>).</li> <li>Press the <code>Decompile</code> button.</li> <li>Crowbar now decompiles the model and outputs the files to the     <code>decompiled</code> folder in the same folder as the <code>.mdl</code> file.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-3-importing-to-blender","title":"Step 3: Importing to Blender","text":"<ul> <li>Open Blender.</li> <li>In the top left corner select <code>File</code> -&gt; <code>Import</code> -&gt;     <code>Source Engine</code>.</li> <li>Navigate to the folder you extracted the model to in the previous     step and select the <code>.qc</code> file (for example <code>ptpov_vinson.qc</code>) and     uncheck the <code>Import Animations</code> box and check the     <code>Create Collections</code> box.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-4-editing-the-model","title":"Step 4: Editing the model","text":"<p>Note</p> <p>Title</p> <p>Note :::</p> <p>This step is entirely up to you and depends on what you want to do with the model. In this example we will add a cube to the side of the Flatline and assign a custom material to it. ::::</p> <p>Before editing let me explain how the model is structured in Blender. By selecting a qc file in the import menu we told Blender to import all SMD files referenced in that qc file. This means that the model is split into multiple collections based on the SMD files referenced in the qc file. For example the <code>ptpov_vinson.qc</code> file references the <code>ptpov_vinson_v_vinson.smd</code> file which contains the model for the Flatline. For now the smd file will be imported into blender when you import the qc file, later we will change this to be an dmx file instead.</p> <ul> <li>Select the <code>ptpov_vinson_v_vinson.smd</code> mesh in the outliner.</li> <li>Enter <code>EDIT Mode</code>.</li> <li>In <code>EDIT Mode</code> add a cube to the side of the Flatline.</li> <li>Exit <code>EDIT Mode</code>.</li> <li>This cube should now be part of the <code>ptpov_vinson_v_vinson</code> mesh.</li> <li>Make sure that you now weight paint the cube to the correct bones.</li> <li>.. note:: On Weapons the most safe bone to weight paint to is     <code>def_c_base</code> since it is the root bone of the weapon. This means     that the cube will always move with the weapon. If you want the cube     to move with a specific part of the weapon you can also weight paint     it to the bone that moves that part of the weapon. Again, remember     to somewhat learn how rigging works in Blender to properly     understand this process.</li> <li>Now that we have our cube we want to assign a material to it.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-5-assigning-materials","title":"Step 5: Assigning Materials","text":"<p>This step has two ways of being done, using a <code>qc</code> file that references <code>smd</code> files or references <code>dmx</code> files. Usually the <code>smd</code> way is what you will want todo when first importing and editing a model, however if you want to reimport a EDITED model you will need to use the <code>dmx</code> way.</p>"},{"location":"Modding/guides/tools/MDLModding/#assigning-materials-smd","title":"Assigning Materials (smd)","text":"<p>This is the way you will usually do it when first importing a vanilla model that you have not edited yet. - Enter <code>EDIT Mode</code>. - Select the cube. - In the <code>Material Properties</code> tab on the right click on the <code>New</code> button. - Set the name of the material to its path in the game files, to learn more about materials and how to make them see RPak Modding or VTF Modding. (for example <code>models\\weapons_r2\\coolmaterial\\cool_material</code>) - Exit <code>EDIT Mode</code>. - Your cube should now have the material assigned to it ingame after compiling.</p>"},{"location":"Modding/guides/tools/MDLModding/#assigning-materials-dmx","title":"Assigning Materials (dmx)","text":"<p>This is the way you will usually do it when reimporting a model that you have edited. - Enter <code>EDIT Mode</code>. - Select the cube. - In the <code>Material Properties</code> tab on the right click on the <code>New</code> button. - Set the name of the material to its NAME in the game files</p> <p>Note</p> <p>Title</p> <p>Note ::: ::::</p> <p>with dmx files you can set the material path later on in the export menu. If you have multiple needed paths we will talk about that in the next step Multiple Material Paths. This is why we set the name of the material to its name in the game files instead of its path.</p> <ul> <li> <p>Exit <code>EDIT Mode</code>.</p> </li> <li> <p>Your cube should now have the material assigned to it ingame after     compiling.</p> <p>Note</p> <p>Title</p> <p>Note ::: ::::</p> <p>To clearify: the material of a mesh or individual faces in the game will be associated using the name of the assigned material in Blender.</p> </li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-55-multiple-material-paths-dmx","title":"Step 5.5: Multiple Material Paths (dmx)","text":"<p>If you have materials with multiple paths (different folders in the game files) you will want to use the <code>$renamematerial</code> command in the qc file. Usage:</p> <pre><code>$renamematerial &lt;current material&gt;  &lt;new material&gt;\n</code></pre> <p>Example:</p> <pre><code>$renamematerial \"models\\weapons_r2\\coolmaterial\\cool_material\"  \"models\\amazing\\uncoolmaterial\\cool_material2\"\n</code></pre> <p>Command docs: VALVe developer docs \\$renamematerial</p>"},{"location":"Modding/guides/tools/MDLModding/#step-6-exporting-from-blender","title":"Step 6: Exporting from Blender","text":"<ul> <li> <p>In the <code>Source Engine Export</code> Menu in the <code>Scene Properties</code> select     an <code>Export Path</code> usually the same folder as the original qc file.</p> </li> <li> <p>Set the <code>Export Format</code> to <code>DMX</code>.</p> <p>Note</p> <p>Title</p> <p>Note ::: ::::</p> <p>This is important since we want to export the model as a dmx file instead of an smd file, this is because of limitation in the smd format that we want to avoid. dmx by default will, uppon importing set a \\\"material path\\\" which is the path to the material in the game files, if you reimport this model later on you will need to</p> </li> <li> <p>Press the <code>Export</code> button and select <code>Scene Export</code> (this will     export all meshes in the scene to DMX files, you can also     individually export meshes by selecting them in the outliner and     then pressing the <code>Export</code> button and selecting the mesh in the     Export Menu).</p> </li> <li> <p>Your DMX files are now exported and you can close Blender.</p> </li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-7-compiling-the-model","title":"Step 7: Compiling the model","text":"<ul> <li> <p>Open your <code>.qc</code> file in a text editor of your choice.</p> </li> <li> <p>On the top of the file you will see so called \\\"bodygroup\\\" lines,     these are used to define the bodygroups of the model. They look a     bit like this:</p> <pre><code>$bodygroup \"body\"\n{\n    studio \"ptpov_vinson_v_vinson.smd\"\n    blank\n}\n</code></pre> </li> <li> <p>For each bodygroup you will want to change the files to be the dmx     files you exported in the previous step. (in most cases its gonna be     just renaming all the files to <code>.dmx</code> instead of <code>.smd</code>).</p> <p>Note</p> <p>Title</p> <p>Note ::: ::::</p> <p>If you have multiple bodygroups you will need to do this for each bodygroup, if you have multiple meshes in a bodygroup you will need to do this for each mesh in the bodygroup. We do this so Crowbar uses the dmx files instead of the smd files when compiling the model.</p> </li> <li> <p>Open Crowbar.</p> </li> <li> <p>Select the <code>Compile</code> tab on the top.</p> </li> <li> <p>Click on the <code>Browse</code> button on the top right.</p> </li> <li> <p>Select the <code>.qc</code> file you want to compile (for example     <code>ptpov_vinson.qc</code>).</p> </li> <li> <p>Choose your game from the dropdown labeled     <code>Games that has the model compiler</code> (for example <code>Portal 2</code>)</p> </li> <li> <p>Press the <code>Compile</code> button.</p> </li> <li> <p>Crowbar now compiles the model and outputs the files to the     <code>compiled</code> folder in the same folder as the <code>.qc</code> file, inside the     <code>compiled</code> folder you will find the full folder path of the model     (for example <code>models\\weapons\\vinson\\</code>).</p> <p>Note</p> <p>Title</p> <p>Note ::: ::::</p> <p>Usually the error is self explainatory and you can fix it by yourself. By default Crowbar will not output a compiled file if any errors occur during the compilation process.</p> <p>If you have Visual Studio Code installed you can also use the <code>Valve KeyValue Files Support</code> extension to have a better overview of the qc file, extension id: <code>GEEKiDoS.vdf</code></p> </li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#step-8-combining-model-files","title":"Step 8: Combining model files","text":"<ul> <li>Open MDLShit.</li> <li>In a file explorer navigate to the compiled folder of your model     (for example <code>compiled\\models\\weapons\\vinson\\</code>).</li> <li>In this folder you will find the <code>.mdl</code> file and multiple other     files, in our case there will be 3 files <code>.mdl</code>, <code>.vvd</code> and <code>.vtx</code>)     all with the same name.</li> <li>In MDLShit drag these into their respective boxes.</li> <li>Make sure they are checked and the boxes you dont have files for are     unchecked.</li> <li>Press the <code>Check</code> button.</li> <li>Press the <code>Convert</code> button.</li> <li>MDLShit will now combine the files into a single <code>_conv.mdl</code> file,     this is our final exported and working model you can now close     MDLShit and use that model in a mod.</li> </ul>"},{"location":"Modding/guides/tools/MDLModding/#common-errors","title":"Common errors","text":"<p>In this list the word <code>&lt;filename&gt;</code> will be used to refer to the name of the file that is causing the error and X will refer to a number depending on your file, <code>line</code> will refer to the line in the qc file that is causing the error. The following words correspond to the following:</p> <ul> <li><code>&lt;filename&gt;</code>: The name of the file that is causing the error.</li> <li><code>&lt;line&gt;</code>: The line in the qc file that is causing the error.</li> </ul> <code>modelpath.qc(&lt;line&gt;): - could not load file '&lt;&lt;filename&gt;.smd'</code>: <p>This error means that the qc file is trying to reference a file that does not exist, make sure that the file is in the same folder as the qc file and that the name of the file is correct. If the above solution does not work think about if you need said file actually, if not you can remove it from the qc file. Or if you need it you can create it yourself. You can also see if a Physics or LOD file is the missing file, if it is make sure you have the correct settings in Crowbar for the file to be generated.</p> <p><code>Crowbar ERROR: The model compiler, \"&lt;filename&gt;\", does not exist.</code></p> <code>Crowbar ERROR: The game's \"&lt;filename&gt;\" file does not exist.</code> <p>Mostly happens if you did not properly set up Crowbar, make sure you set the <code>Game that has the model compiler</code> to your prerequisite game.</p>"},{"location":"Modding/guides/tools/VTFModding/","title":"VTF Modding","text":""},{"location":"Modding/guides/tools/VTFModding/#vtf-overview","title":"VTF Overview","text":"<p>VTF, short for \\\"Valve Texture Format\\\", is a texture type used by Valve in the source engine and is occasionally in Titanfall. vtf\\'s are used for fx, animation, and other textures.</p>"},{"location":"Modding/guides/tools/VTFModding/#vmt-overview","title":"VMT Overview","text":"<p>VMT, short for \\\"Valve Material Type\\\", is a text material system that dictates how the game perceives a vtf outside of how it looks. It uses parameters and proxies to dictate how shaders will show the game. We will go into greater detail later.</p>"},{"location":"Modding/guides/tools/VTFModding/#editing-fx-that-use-vtfs","title":"Editing FX that use VTFs","text":"<p>A lot of fx in Titanfall use vtf\\'s as textures. Therefore, if the corresponding vtf can be found, we can do almost anything with the fx\\'s appearence. Example Mod: Exrill\\'s Blue L-Star. Since the L-Star has a physical bullet that is counted as fx, we can edit how it looks.</p>"},{"location":"Modding/guides/tools/VTFModding/#vtf-skins","title":"VTF Skins","text":"<p>Since vtf modding was originally for introducing custom weapon skins, most of the development on it was focused on that. The same concepts apply to modding other textures though.</p> <p>Most textures in the game use .dds but we can make them use .vtf.</p> <p>What we\\'ll be doing is:</p> <ul> <li>Extracting the model.</li> <li>Replacing the texture path in the mdl to point to our texture.</li> <li>Creating our directory.</li> <li>Setting up a .vmt file.</li> </ul>"},{"location":"Modding/guides/tools/VTFModding/#vpk-tool","title":"VPK Tool","text":"<p>You have 2 options for a VPK tool. Pick either the older VPK tool: cra0 VPKTool or the Newer VPK tool: Harmony VPKTool (better).</p> <p>With your VPK tool opened. \\'Open\\' <code>englishclient_mp_common.pak000_dir.vpk</code> which is located in <code>Titanfall2/vpk</code>.</p> <p>Inside of the VPK, not all guns filenames match their ingame names. Here is list of weapon names to help you out.</p> <p>Navigate to <code>models/weapons/car101</code>. Extract all the viewmodel versions (ptpov) and normal model (w) mdl\\'s.</p>"},{"location":"Modding/guides/tools/VTFModding/#hex-editor","title":"Hex Editor","text":"<p>To change the path in the .mdl to the custom .vmt. We need a hex editor. Before editing with hex editors, you need to be aware that hex editors cannot add or delete data, only replace it. I will use HxD, but you can also use ida, or anything else as its personal preference.</p> <p>Open your .mdl in your hex editor.</p> <p>We want to get closer to the path we need or else you\\'ll be scrolling and searching for hours. Search:(CTRL+F) for skin_31. If you don\\'t get any matches, try skn_31, skin31, elite, or prime. The path should look something like <code>.models\\Weapons_R2\\weaponname\\weaponname_skin_31</code>. Don\\'t change this unless you want to effect skin31 textures.</p> <p>The path we do need to change is <code>.models\\Weapons_R2\\weaponname\\weaponname</code>. This comes before the <code>skin_31</code> path. I recommend only changing the last section of the path. We\\'ll change <code>.models\\Weapons_r2\\car_smg\\CAR_smg</code> to <code>.models\\weapons_r2\\car_smg\\car_ctm</code>. Note the capitalization, as some vpk repacking tools cannot repack properly if the changed path contains capitals.</p> <p>Now copy these changes for <code>ptpov_</code> and/or <code>w_</code> model(s). As these are the stow (On your back) and main menu models. If don\\'t change these. Your texture will only work when in a match.</p>"},{"location":"Modding/guides/tools/VTFModding/#creating-vmt","title":"Creating VMT","text":"<p>In the same folder you extracted your mdl\\'s. Make a <code>materials</code> folder next to the <code>models</code> folder.</p> <p>Example: <code>.. code-block:: text</code></p>"},{"location":"Modding/guides/tools/VTFModding/#models-materials","title":"models materials","text":"<p>Recreate the path you changed in the <code>materials</code> folder, such that the last section is a .vmt file:</p> <pre><code>materials\n\u2514\u2500 models\n      \u2514\u2500 weapons_r2\n            \u2514\u2500 car_smg\n                 \u2514\u2500 car_ctm.vmt\n</code></pre> <p>Inside your .vmt paste: .. code-block:: text</p> <p>```\"UnlitTwoTexture\\\" {</p> <p>\\\"\\$surfaceprop\\\" \\\"metal\\\" \\\"\\$basetexture\\\" \\\"\\\" \\\"\\$texture2\\\" \\\"\\\" \\\"\\$bumpmap\\\" \\\"\\\" \\\"\\$allowoverbright\\\" \\\"1\\\" \\\"\\$vertexcolor\\\" 1 \\\"\\$vertexalpha\\\" 1 \\\"\\$decal\\\" \\\"1\\\" \\\"\\$model\\\" 1 \\\"\\$nocull\\\" \\\"1\\\"</p> <p>}</p> <p>When we use vtf textures, we can only use the albedo and normal. Learn more about texture maps here.</p>"},{"location":"Modding/guides/tools/VTFModding/#vtfedit","title":"VTFEdit","text":"<p>VTFEdit is a tool to edit, view, and create .vtf files.</p> <p>Launch VTFEdit. Top left, click <code>File</code>, <code>Import</code>, find and Import your custom texture(s).</p> <p>When importing your normal map. Choose to import as a <code>Volume Map</code> When importing your diffuse map. Choose to import as a <code>Animated Map</code></p> <p>More info about .vtf format possibilities here, or the official source docs here.</p> <p>After that, save your new .vtf\\'s into the same folder as your custom .vmt with a simple name.</p>"},{"location":"Modding/guides/tools/VTFModding/#configuring-your-vmt","title":"Configuring your .vmt","text":"<p>In the <code>\"$basetexture\"</code> argument enter your .vtf texture directory. We\\'ll use <code>models\\weapons_r2\\car_smg\\car_ctm\\NAMEOFVTF</code>. This should point to your custom diffuse .vtf with the simple name. The game expects these paths to be without the <code>.vtf</code> file extension - don\\'t add it.</p> <p>Do the same for your normal map with the ```bluemapp```` argument.</p> <p>In some cases you might have to create another vtf with literally any image. Put its path in the <code>\"$texture2\"</code> argument. As far as i know, this is sometimes necessary even though the texture isn\\'t used.</p>"},{"location":"Modding/guides/tools/VTFModding/#final-vpk-folder","title":"Final VPK folder","text":"<p>Your root folder should look somewhat like this</p> <pre><code>root\n\u251c\u2500 materials\n\u2502  \u2514\u2500 models\n\u2502     \u2514\u2500 weapons_r2\n\u2502        \u2514\u2500 car_smg\n\u2502           \u251c\u2500 YOURTEXTURE.vtf\n\u2502           \u251c\u2500 YOURTEXTURE.vtf\n\u2502           \u2514\u2500 car_ctm.vmt\n\u2514\u2500 models\n   \u2514\u2500 weapons\n      \u2514\u2500car101\n        \u251c\u2500 ptpov_car101.mdl\n        \u2514\u2500 w_car101.mdl\n</code></pre>"},{"location":"Modding/guides/tools/VTFModding/#finished","title":"Finished.","text":"<p>You\\'re done! You just need to pack it into a vpk with a vpk tool (for our gun mod, we\\'d repack to <code>englishclient_mp_common.pak000_dir.vpk</code>), and put the vpk into a Northstar mod inside a <code>vpk</code> folder.</p> <p>Help with repacking here, and help with Northstar mods here.</p>"},{"location":"Modding/guides/tools/VTFModding/#making-your-skin-animated","title":"Making your Skin Animated","text":"<p>To add animation functionality, all we need to do is add a Proxie; which is just a modifier inside a <code>.vmt</code>, and change our albedo vtf texture.</p> <p>You need to create a .vtf texture with multiple frames imported to a single .vtf texture, that\\'s your animated texture. You can do this with VTFEdit. Then assign the texture in <code>$basetexture</code>.</p> <p>At the bottom of your vmt but before the <code>}</code>, add this:</p> <p><code>\\\"Proxies\\\" { AnimatedTexture { animatedTextureVar \\$basetexture animatedTextureFrameNumVar \\$frame animatedTextureFrameRate 30 } }</code></p> <p>To change the fps of the texture, change the value after <code>animatedTextureFrameRate</code>, and you\\'ll be done making your texture animated!</p>"},{"location":"Modding/guides/tools/rpakmodding/","title":"RPak Modding","text":""},{"location":"Modding/guides/tools/rpakmodding/#what-are-rpaksstarpaks","title":"What Are RPaks/Starpaks?","text":"<p>.rpak files are a file format created by Respawn as the main way to store and load in-game assets, such as textures, materials, datatables, animation recordings, etc. The assets in the .rpak file are kept stored in memory as long as the .rpak file is loaded.</p> <p>.starpak files are another file format created by Respawn to complement the .rpak file format. They contain streamed asset data, saving hardware resources by only loading the data when needed. The most common example of streamed asset data is high resolution textures. The low resolution versions are kept permanently loaded in a .rpak file, whilst the higher resolution versions are loaded as needed.</p>"},{"location":"Modding/guides/tools/rpakmodding/#what-can-rpak-mods-do","title":"What can RPak mods do?","text":"<p>RPak mods can be used for the following:</p> <ul> <li>Custom UI</li> <li>Skins</li> <li>World Materials</li> <li>Texture replacements</li> </ul>"},{"location":"Modding/guides/tools/rpakmodding/#repak-first-time-setup","title":"RePak First-Time Setup","text":"<p>The lastest RePak release can be downloaded from here. Once it has been downloaded, it is recommended to set up your file structure as follows:</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Depending on the version of RePak, some of these folders and files might be already there for you ::::</p> <pre><code>RePak\n\u251c\u2500\u2500 RePak.exe\n\u251c\u2500\u2500 pack_all.bat\n\u251c\u2500\u2500 rpaks\n\u251c\u2500\u2500 maps\n\u2514\u2500\u2500 assets\n</code></pre> <ul> <li><code>RePak</code>: the base folder where your RePak/RPak related files go</li> <li><code>RePak.exe</code>: the [unzipped] file you downloaded from     GitHub</li> <li><code>pack_all.bat</code>: a .bat file that will pack all of your RPaks when     opened (outlined below)</li> <li><code>rpaks</code>: the folder where RePak.exe will put your RPaks when they     have been created</li> <li><code>maps</code>: the folder where you will write your \\\"map\\\" files, these     define the contents of your RPaks</li> <li><code>assets</code>: the folder where you will put your various different     images and folders, used to create your RPaks</li> </ul>"},{"location":"Modding/guides/tools/rpakmodding/#making-pack_allbat","title":"Making pack_all.bat","text":"<p><code>pack_all.bat</code> is recommended for using RePak, as it allows for quick and easy packing of all of your RPaks. Below is the script that should be copied into the file.</p> <pre><code>for %%i in (\"%~dp0maps\\*\") do \"%~dp0RePak.exe\" \"%%i\"\npause\n</code></pre>"},{"location":"Modding/guides/tools/rpakmodding/#making-rpaks","title":"Making RPaks","text":"<p>This section will walk you through the process of making an RPak that replaces a camo. For information on making other types of RPaks, check the RePak Docs:</p> <ul> <li><code>../repak/map</code> </li> <li><code>../repak/index</code> </li> </ul>"},{"location":"Modding/guides/tools/rpakmodding/#finding-the-camo","title":"Finding the camo","text":"<p>Before you can make your RPak, you need to know which assets you want to replace. Camos in Titanfall 2 tend to have their own RPaks, with the naming scheme <code>camo_skin&lt;number&gt;_col.rpak</code></p> <p>Firstly, make sure you have LegionPlus downloaded, if you don\\'t, it can be downloaded from here.</p> <p>Then use LegionPlus to open one of the <code>camo_skin&lt;number&gt;_col.rpak</code> RPaks, it should look like this:</p> <p></p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>If your LegionPlus doesn\\'t show the \\\"Name\\\" as a full path, go into \\\"Settings\\\" and make sure that \\\"Show Full Asset Paths\\\" is ticked, then click \\\"Refresh\\\" ::::</p> <p>Extract the asset by double clicking on it, or by selecting it and clicking \\\"Export Selected\\\"</p> <p>Make a note of the Name of the asset, in this example it\\'s <code>models\\camo_skins\\camo_skin04_col</code></p>"},{"location":"Modding/guides/tools/rpakmodding/#editing-the-texture","title":"Editing the texture","text":"<p>Find the extracted file that LegionPlus created, and open it in some image editing software</p> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>The image editing software you choose must be able to export images as .dds files</p> <p>Examples of image editing software that supports .dds files:</p> <ul> <li>GIMP (No SRGB support)</li> <li>paint.net</li> <li>Adobe Photoshop ::::</li> </ul> <p>After you have made the desired changes to the image, export it as a .dds file with DXT1 (BC1) compression and the same name as it had originally.</p> <p></p> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>Try to make your textures have dimensions that are powers of two, so that mipmaps can be used. For example <code>256x256</code> <code>512x512</code> <code>1024x512</code> <code>4096x1024</code> are all fine, but <code>350x700</code> might cause issues.</p> <p> ::::</p> <p>Place your newly created .dds file in the <code>assets\\texture</code> folder, following the path in the Name you noted down above. In this example the .dds file would go in <code>RePak\\assets\\texture\\models\\camo_skins</code>, with the path of the image being <code>..\\RePak\\assets\\texture\\models\\camo_skins\\camo_skin04_col.dds</code></p>"},{"location":"Modding/guides/tools/rpakmodding/#making-a-map-file","title":"Making a map file","text":"<p>Once you have edited your texture image and placed it in the right folder, you are ready to make your map file.</p> <p>Map files are what RePak uses to create the .rpak file (and .starpak files if needed) and are in the .json file format. They can be named anything you want, but should be put in the <code>RePak\\maps</code> folder.</p> <p>Below is an example of a map file that creates an RPak called <code>example.rpak</code> which contains 1 texture asset.</p> <pre><code>{\n    \"name\":\"example\",\n    \"assetsDir\":\"../assets\",\n    \"outputDir\":\"../rpaks\",\n    \"starpakPath\": \"example.starpak\",\n    \"version\": 7,\n    \"files\":[\n        {\n            \"$type\":\"txtr\",\n            \"path\":\"texture/models/camo_skins/camo_skin04_col\"\n        }\n    ]\n}\n</code></pre> <ul> <li><code>name</code>: the name of the file that gets created by RePak.</li> <li><code>assetsDir</code>: the folder that RePak bases the file path on when     looking for textures.</li> <li><code>outputDir</code>: the folder that RePak will put the files that it     creates in.</li> <li><code>starpakPath</code>: the path of the starpak file for streaming textures.</li> <li><code>version</code>: the RPak version RePak will use when creating the RPaks.     Version 7 is Titanfall 2, version 8 is Apex Legends.</li> <li><code>files</code>: an array of all of the assets that RePak will create in the     RPak.</li> <li><code>$type</code>: the type of asset that this asset is, use <code>txtr</code> for     textures.</li> <li><code>path</code>: the path of the asset, used in texture assets for finding     the image. This should start with <code>texture/</code> and the rest     should match the Name given by LegionPlus.</li> </ul> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>If the <code>path</code> doesn\\'t match up with the location of your file, RePak will throw an error ::::</p> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>If the <code>path</code> contains any <code>\\</code> characters, make sure that you either replace them with <code>/</code> or you duplicate them (<code>\\\\</code>)</p> <p>This is because <code>\\</code> is the escape character in JSON, and will therefore break the <code>path</code> ::::</p>"},{"location":"Modding/guides/tools/rpakmodding/#creating-the-rpak","title":"Creating the RPak","text":"<p>To create your RPak file, simply open <code>pack_all.bat</code>.</p> <p>Alternatively, click and drag your map file over <code>RePak.exe</code>. (I don\\'t recommend this, it\\'s a pain)</p> <p>Look at the console for any errors. If there are no errors, a .rpak file should have been created in the <code>rpaks</code> folder.</p>"},{"location":"Modding/guides/tools/rpakmodding/#using-the-rpak-in-a-mod","title":"Using the RPak in a mod","text":"<p>Create the basis of the mod using the <code>gettingstarted</code>  guide.</p> <p>Inside the mod\\'s folder, create a new folder, called <code>paks</code>. Move your .rpak file (and .starpak files if you have any) into the folder.</p> <p></p> <p>Inside the <code>paks</code> folder that you created, make a new .json file called <code>rpak.json</code>. In this example, the <code>camo_skin04_col.rpak</code> rpak is completely replaced by <code>example.rpak</code>. This is fine for camo RPaks, but isn\\'t suitable for more complex RPaks</p> <pre><code>{\n    \"Preload\":\n    {\n        \"example.rpak\": false\n    },\n    \"Aliases\":\n    {\n        \"camo_skin04_col.rpak\": \"example.rpak\"\n    },\n    \"Postload\":\n    {\n\n    }\n}\n</code></pre> <ul> <li><code>Preload</code>: if set to <code>true</code> this makes RPaks get loaded as soon as     possible.</li> <li><code>Aliases</code>: this completely replaces the RPak with the specified     RPak. In this example <code>camo_skin04_col.rpak</code> is replaced by     <code>example.rpak</code>.</li> <li><code>Postload</code>: this makes RPaks get loaded directly after the specified     RPak.</li> </ul>"},{"location":"Modding/guides/tools/rpakmodding/#preload","title":"Preload","text":"<p>This field tells Northstar whether or not to load a specific RPak as soon as RPak loading starts.</p> <p>The field is a boolean. (<code>true</code> or <code>false</code>) and should be formatted like <code>\"&lt;target_rpak&gt;\": true</code> or <code>\"&lt;target_rpak&gt;\": false</code></p> <p>Example: <code>\"my_new.rpak\": true</code></p>"},{"location":"Modding/guides/tools/rpakmodding/#aliases","title":"Aliases","text":"<p>This field tells Northstar that a specific RPak should never be loaded, and a different RPak should be loaded instead.</p> <p>The field should be formatted like <code>\"&lt;target_rpak&gt;\": \"&lt;replacement_rpak&gt;\"</code></p> <p>Example: <code>\"common.rpak\": \"my_new.rpak\"</code></p>"},{"location":"Modding/guides/tools/rpakmodding/#postload","title":"Postload","text":"<p>This field tells Northstar that a specific RPak must be loaded directly after another specified RPak has finished loading.</p> <p>The field should be formatted like <code>\"&lt;target_rpak&gt;\": \"&lt;rpak_to_load_after&gt;\"</code></p> <p>Example: <code>\"my_new.rpak\": \"common.rpak\"</code></p> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>If an asset in your RPak references another asset, it must be loaded after the asset that it references, or the game will infinitely loop when launched. This is mostly a problem for <code>matl</code> assets, <code>txtr</code> assets don\\'t reference other assets. ::::</p> <p>The file structure of your <code>paks</code> folder should be similar to this:</p> <p></p> <pre><code>paks\n\u251c\u2500\u2500 example.rpak\n\u251c\u2500\u2500 example.starpak\n\u2514\u2500\u2500 rpak.json\n</code></pre> <ul> <li><code>example.rpak</code>: this is the RPak file that you made.</li> <li><code>rpak.json</code>: this controls how the game loads your RPak files</li> </ul> <p>After <code>rpak.json</code> is set up correctly, your RPak mod should be complete and functional!</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>If when you test the rpak the colour looks weird, use SRGB in the .dds compression, or use non-SRGB if you were already using SRGB ::::</p>"},{"location":"Modding/guides/tools/soundmodding/","title":"Sound Modding","text":""},{"location":"Modding/guides/tools/soundmodding/#audio-type","title":"Audio Type","text":"<ul> <li>You will need to use <code>WAV</code> format and either <code>48000hz</code> or <code>44100hz</code>     sample rate.</li> <li>More details below in creating_your_sound</li> </ul>"},{"location":"Modding/guides/tools/soundmodding/#step-1-identifying-the-sound","title":"Step 1 - Identifying the Sound","text":"<p>First you need to identify the exact sound. There\\'s a command for this: <code>ns_print_played_sounds 1</code> It will show all the audio events that are happening at that moment on the console.</p> <p>For example, use your Grapple and open the console the event ID will be <code>pilot_grapple_fire</code></p> <p>How it looks in the console: </p> <p>All weapons, boosts, tacticals have different events IDs on different surfaces (concrete, solidmetal, wood, dirt etc.) That\\'s why you must identify the exact event/s. Examples based on Grapple:</p> <ul> <li>Concrete impact: <code>concrete_grapple_impact_1p_vs_3p</code></li> <li>Solidmetal impact: <code>solidmetal_grapple_extract_1p_vs_3p</code> etc.</li> </ul> <p>NOTE: <code>ns_print_played_sounds 1</code> will show you every event ID. Not just in-match ones. For example:</p> <ul> <li>The sound when you move the cursor to an option it will be     <code>menu_focus</code>, and clicking sound will be <code>menu_accept</code> or menu music     <code>mainmenu_music</code></li> </ul> <p>Check the console often, as it\\'s easy to miss your sound - there can be a lot of sounds playing.</p> <p>There\\'s also a list of all EvenIDs (audio).</p> <p>Sounds can be played in-game from the console via <code>script_ui EmitUISound(soundname)</code>.</p> <p>Additionally subtitles in the form of plain text can also be useful.</p> <p>You can also export sounds with LegionPlus instead of playing them in-game.</p> <p>Open LegionPlus.exe -&gt; Load File -&gt; Titanfall 2/r2/sound pick general.mbnk</p> <p>If you want to export only a specific sound use search. It\\'s possible to export selected sounds and all (after a search it exports only the found assets).</p>"},{"location":"Modding/guides/tools/soundmodding/#step-2-creating-folders","title":"Step 2 - Creating Folders","text":"<p>When you successfully identified your event and have the audio file/s ready it\\'s time to set up the folder structure. Assuming the event name is <code>pilot_grapple_fire</code>, the folder structure of your mod should look like this:</p> <pre><code>author.mod/\n\u251c\u2500\u2500 audio/\n\u2502   \u251c\u2500\u2500 pilot_grapple_fire/\n\u2502   \u2502   \u2514\u2500\u2500 my_audio.wav\n\u2502   \u2514\u2500\u2500 pilot_grapple_fire.json\n\u2514\u2500\u2500 mod.json\n</code></pre> <p>Example of a <code>mod.json</code> (documented here: <code>/guides/gettingstarted</code> )</p> <pre><code>{\n  \"Name\": \"MOD_NAME_HERE\",\n  \"Description\": \"DESCRIPTION_HERE\",\n  \"Version\": \"0.1.0\",\n  \"LoadPriority\": 2\n}\n</code></pre> <p>Inside the ``audio/`` folder:</p> <ul> <li><code>pilot_grapple_fire/</code> folder which needs to contain your .wav     file(s)</li> <li><code>pilot_grapple_fire.json</code> json used to configure the sound override,     dont forget to edit.</li> </ul> <p>You will have to add that folder with your sound and the json for each event you want to override. The event JSON files must contain both <code>EventId</code> and <code>AudioSelectionStrategy</code> like this:</p> <pre><code>{\n    \"EventId\": [ \"pilot_grapple_fire\" ],\n    \"AudioSelectionStrategy\": \"sequential\"\n}\n</code></pre> <p>The <code>AudioSelectionStrategy</code> can be either:</p> <ul> <li><code>sequential</code>: If you have one sound or you want to play them in     alphabetical order.</li> <li><code>random</code>: If you have more than one sound and you want to randomize     them.</li> </ul>"},{"location":"Modding/guides/tools/soundmodding/#creating_your_sound","title":"Creating Your Sound","text":"<ul> <li>Recommended tool: Audacity</li> </ul> <p>Open/Add your audio as a track to Audacity and set the project rate accordingly. Either <code>48000hz</code> or <code>44100hz</code> can work well in most cases, but a few sounds don\\'t use either. Which sampling rate you should use depends on the original sound\\'s sampling rate.</p> <p>For example: if you use <code>44100khz</code> and the sound is slightly too high pitched in game, use <code>48000khz</code>. If you use <code>48000khz</code> and it\\'s slightly low pitched in game, use <code>44100khz</code>.</p> <p>If you\\'re unsure which to use, or the sound still seems too high, or low pitched, you can use LegionPlus to determine the original rate.</p> <p>After that, export your track as a 16-bit <code>wav</code> file (any other bit-depth will cause Northstar to crash). Make sure you don\\'t add any metadata as this will cause white noise to be at the end of the sound.</p>"},{"location":"Modding/guides/tools/soundmodding/#issues_with_sounds","title":"Issues With Sounds","text":"<ul> <li>White noise after the sound ends.</li> </ul> <p>This is usually because there\\'s some metadata left in the audio. Remove it to fix this issue.</p> <p>:!!! tab-set</p> <p>Tab-item</p> <p>Windows</p> <p>You can bulk remove it with Mp3tag or individually with Audacity. :::</p> <p>Tab-item</p> <p>Linux</p> <p>You can bulk remove it with Metadata Cleaner or a shell script (requires ffmpeg to be installed) and also individually with Audacity.</p> <p><code>metadata_remover.sh</code> (WAV only)</p> <p>Dropdown</p> <p>Script</p> <p><pre><code>shopt -s globstar nullglob\nfor f in *.wav **/*.wav\ndo\nffmpeg -i \"$f\" -map 0 -map_metadata -1 -c:v copy -c:a copy \"${f%.wav}.new.wav\"\nmv -f \"${f%.wav}.new.wav\" \"$f\"\ndone\n</code></pre> ::: :::: ::::::</p> <ul> <li>Sound is slightly higher/lower pitched in game. This is usually     because the sampling rate of your sound doesn\\'t match the original     sound\\'s sampling rate. You can use a tool like Audacity to resample     your sound to match the original rate. Consult     <code>_creating_your_sound</code>  for more     information.</li> </ul>"},{"location":"Modding/guides/tools/soundmodding/#sound_tools","title":"Sound Tools","text":"<ul> <li>Converters</li> </ul> <p>::::!!! tab-set</p> <p>Tab-item</p> <p>Windows</p> <p># todo :::</p> <p>::!!! tab-item Linux</p> <p>On Linux you can use shell scripts that convert all WAV or MP3 audio files from the current directory (including folders) to WAV 48000Hz 16-bit. They require ffmpeg to be installed.</p> <p>MP3 and other formats scripts don\\'t delete previous files, so just search for them (.format) and delete after conversion. WAV script automatically replaces old files.</p> <p>:!!! tab-set</p> <p>Tab-item</p> <p>WAV script</p> <p><pre><code>#WAV to WAV 16-bit 48000 Hz.\n#wav_converter.sh\n\nshopt -s globstar nullglob\nfor f in *.wav **/*.wav\ndo\nffmpeg -i \"$f\" -acodec pcm_s16le -ar 48000 \"${f%.wav}.new.wav\"\nmv -f \"${f%.wav}.new.wav\" \"$f\"\ndone\n</code></pre> :::</p> <p>Tab-item</p> <p>MP3 Script</p> <p><pre><code>#MP3 to WAV 16-bit 48000 Hz.\n#mp3-wav_converter.sh\n\nshopt -s globstar nullglob\nfor f in *.mp3\ndo\nffmpeg -i \"${f}\" -vn -c:a pcm_s16le  -ar 48000 \"${f%.*}.wav\"\ndone\n</code></pre> :::</p> <p>Tab-item</p> <p>Script for other formats</p> <p><pre><code>#Replace .format with the one you want to convert.\n#format-wav_converter.sh\n\nshopt -s globstar nullglob\nfor f in *.format\ndo\nffmpeg -i \"${f}\" -vn -c:a pcm_s16le  -ar 48000 \"${f%.*}.wav\"\ndone\n</code></pre> ::: :::::: ::::::: :::::::::</p>"},{"location":"Modding/guides/tools/soundmodding/#installation","title":"Installation","text":"<ul> <li>As with any mod, the folder which contains your <code>mod.json</code> needs to     be inside <code>Titanfall 2/r2Northstar/Mods/</code>.</li> </ul>"},{"location":"Modding/guides/tools/tools/","title":"Modding Tools","text":""},{"location":"Modding/guides/tools/tools/#source-engine","title":"Source engine","text":""},{"location":"Modding/guides/tools/tools/#titanfall","title":"Titanfall","text":"<ul> <li>Titanfall VPK     Tool</li> <li>Harmony VPK Tool</li> <li>Legion+</li> </ul>"},{"location":"Modding/guides/tools/tools/#rpsnvpks","title":"RPSNVPK\\'s","text":"<ul> <li>squidgyberries RSPNVPK</li> <li>taskinoz RSPNVPK</li> <li>Provoxin RSPNVPK</li> </ul>"},{"location":"Modding/guides/tools/tools/#vtf-vmt","title":"VTF &amp; VMT","text":"<ul> <li>VTFEdit</li> <li>VTF Shell     Extensions -     Info</li> <li>VMT Editor</li> </ul>"},{"location":"Modding/guides/tools/tools/#other-utilities","title":"Other utilities","text":""},{"location":"Modding/guides/tools/tools/#file-editors","title":"File editors","text":"<ul> <li>Atom Text<ul> <li>Syntax color     KeyValue</li> <li>Syntax color     Squirrel</li> <li>Color picker</li> </ul> </li> <li>TextCrawler 3</li> <li>Visual Studio Code</li> <li>VSCodium</li> <li>Notepad++</li> <li>Kate<ul> <li>Kate syntax highlighting for     Squirrel</li> </ul> </li> </ul>"},{"location":"Modding/guides/tools/tools/#graphics-animation-color-editors","title":"Graphics / animation / color editors","text":"<ul> <li>Paint.net<ul> <li>Gradient Mapping     plug-in</li> <li>Animation     Helper</li> </ul> </li> <li>Source VMT Color</li> <li>GIMP<ul> <li>VTF     plug-in</li> </ul> </li> <li>RGB Tool     converter</li> <li>Color Pick Windows</li> <li>GIF splitter</li> <li>Rad Tools Bik (needs     Quicktime 7.6)</li> <li>TexFactory easy DDS     conversion</li> <li>Substance Painter to     TF2</li> </ul> <p>- Tacent View - DDS viewer. Archives ~~~~~~~~</p> <ul> <li>7zip</li> </ul>"},{"location":"Modding/guides/tools/tools/#driver-editors","title":"Driver editors","text":"<ul> <li>NVidia Profile     Inspector</li> <li>ATI Radeon Tray     Tools</li> </ul>"},{"location":"Modding/guides/tools/tools/#3d-models","title":"3D Models","text":"<ul> <li>Blender<ul> <li>Blender Source     Tool</li> <li>Blender VMT</li> <li>IO import VMF &amp; VMT</li> </ul> </li> <li>Crowbar</li> <li>Ninja Ripper v1.7.1</li> </ul> <p>Highly recommended to check the NoSkill Gitbook modding section for more tools.</p>"},{"location":"Modding/mapping/info-dump/","title":"Info-Dump","text":"<p>Loosely structured dump of information to be sorted in the future:</p>"},{"location":"Modding/mapping/info-dump/#tools","title":"Tools:","text":""},{"location":"Modding/mapping/info-dump/#mrvn-radiant","title":"MRVN-Radiant:","text":"<p>Level editor for Respawn Entertainment Source based games.</p> <p>https://github.com/F1F7Y/MRVN-radiant</p>"},{"location":"Modding/mapping/info-dump/#bsp-tool","title":"BSP Tool:","text":"<p>Python library for analysing .bsp files</p> <p>https://github.com/snake-biscuits/bsp_tool</p> <p>Docs: https://github.com/snake-biscuits/bsp_tool/blob/master/docs/supported/titanfall.md</p>"},{"location":"Modding/mapping/info-dump/#other","title":"Other:","text":"<p>Netradiant Custom Tutorial - Part 2:</p> <p>!!! info[Youtube] JZO8H4rBqtA :::</p> <p>How titanfall custom map:</p> <p>!!! info[Youtube] gmNzc5Go2ow :::</p>"},{"location":"Modding/mapping/info-dump/#how-to-make-corners-correctly","title":"How to make corners correctly","text":"<p>Improper corners can cause the player to get stuck</p> <p>!!! info[Youtube] mwvxonuCm8U :::</p> <p>Sample clip:</p> <p>!!! info[Youtube] zgWDme7Y6oI :::</p> <p>Sample map: https://cdn.discordapp.com/attachments/925435799057604709/1041813222547791953/corner_test_map.map</p>"},{"location":"Modding/plugins/interfacesapi/","title":"Interface API","text":"<p>the plugins system now use source interfaces.</p> <p>The launcher exposes almost everything required by plugins in interfaces that allow for backwards compatibility. The only thing that\\'s passed to a plugin directly is the northstar dll HWND and a struct of data that\\'s different for each plugin.</p> <p>Plugins are required to expose a <code>void* CreateInterface(const char* name, int* status)</code> function to share their own interfaces. The launcher loads the <code>PluginId</code> interface from the plugin to query info such as it\\'s name.</p> <p>Plugins can use the <code>CreateInterface</code> function exposed by the northstarDll to use northstar interfaces such as for logging. An interface is just an abstract class to force all functions into a vftable.</p>"},{"location":"Modding/plugins/interfacesapi/#northstar-interfaces","title":"Northstar Interfaces","text":""},{"location":"Modding/plugins/interfacesapi/#nssys001","title":"NSSys001","text":"<p>Exposes some system functionality to plugins</p> <pre><code>// 32 bit\nenum LogLevel {\n  INFO,\n  WARN,\n  ERR,\n};\n\n// handle: handle of the plugin. Passed to the plugin on init.\nvoid Log(HMODULE handle, LogLevel level, char* msg); // logs a message with the plugin's log name\nvoid Unload(HMODULE handle); // unloads the plugin\nvoid Reload(HMODULE handle);\n</code></pre>"},{"location":"Modding/plugins/interfacesapi/#required-plugin-interfaces","title":"Required Plugin Interfaces","text":"<p>Interfaces that have to be exposed for the plugin to be loaded.</p>"},{"location":"Modding/plugins/interfacesapi/#pluginid001","title":"PluginId001","text":"<pre><code>// strings of data about the plugin itself. may be extended in the future\n// 32 bit\nenum PluginString {\n  NAME, // the name of the plugin\n  LOG_NAME, // the name used for logging\n  DEPENDENCY_NAME, // the name used for squirrel dependency constants created. The value returned for this has to be a valid squirrel identifier or the plugin will fail to load\n}\n\n// bitfields about the plugin\n// 32 bit\nenum PluginField {\n  CONTEXT // 0x1 if the plugin is allowed to run on dedicated servers and 0x2 if the plugin is allowed to run on clients (is this even needed seems useless to me)\n}\n\nchar* GetString(PluginString prop);\ni64 GetField(PluginField prop);\n</code></pre>"},{"location":"Modding/plugins/interfacesapi/#plugincallbacks001","title":"PluginCallbacks001","text":"<pre><code>struct PluginNorthstarData { HMODULE handle; };\n\n// COPY THE initData IT MAY BE MOVED AT RUNTIME\nvoid Init(HMODULE nsModule, const PluginNorthstarData* initData, bool reloaded); // called after the plugin has been validated. The nsmodule allows northstar plugins to work for the ronin client as well (assuming they update their fork lmao)\nvoid Finalize(); // called after all plugins have been loaded. Useful for dependencies\nvoid Unload(); // called just before the plugin is getting unloaded\nvoid OnSqvmCreated(CSquirrelVM* sqvm); // the context of the sqvm is contained in the instance\nvoid OnSqvmDestroying(CSquirrelVM* sqvm); // callback with the sqvm instance that's about to be destroyed (for UI, CLIENT is destroyed for some reason??)\nvoid OnLibraryLoaded(HMODULE module, const char* libraryName); // called for any library loaded by the game (for example engine.dll)\nvoid RunFrame(); // just runs on every frame of the game I think\n</code></pre>"},{"location":"Modding/plugins/interfacesapi/#whats-an-interface-anyways","title":"What\\'s an interface anyways?","text":"<p>Interfaces are just abstract classes. So make sure the first parameter is always a pointer to the instance of the interface you\\'re using.</p> <p>an example what NSSys001 looks like in C:</p> <pre><code>typedef enum {\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERR,\n};\n\ntypedef struct CSys {\n  struct {\n    void (*log)(struct CSys* self, HMODULE handle, LogLevel level, char* msg);\n    void (*unload)(struct CSys* self, HMODULE handle);\n  }* vftable;\n} CSys;\n\n// use like this\ng_c_sys-&gt;vftable-&gt;log(g_c_sys, g_handle, LOG_INFO, \"my balls are itching\");\n</code></pre> <p>Interfaces are created with CreateInterface that\\'s exposed in another dll.</p>"},{"location":"Modding/plugins/resources/","title":"Resources","text":""},{"location":"Modding/plugins/resources/#templates","title":"Templates","text":"<ul> <li>NSPluginTemplate: https://github.com/uniboi/NSPluginTemplate/</li> </ul>"},{"location":"Modding/plugins/resources/#libs","title":"Libs","text":"<ul> <li>rrplug: https://crates.io/crates/rrplug</li> </ul>"},{"location":"Modding/reference/","title":"Northstar API","text":"<p>Note</p> <p>/reference/northstar/callbacks /reference/northstar/chathooks /reference/northstar/dependencyconstants /reference/northstar/customdamagesources /reference/northstar/serversiderui /reference/northstar/httprequests /reference/northstar/msinterface /reference/northstar/usefulfuncs /reference/northstar/modsettings /reference/northstar/safeio :::</p>"},{"location":"Modding/reference/#respawn-api","title":"Respawn API","text":"<p>Note</p> <p>/reference/respawn/native_server/index /reference/respawn/callbacks /reference/respawn/player /reference/respawn/entities /reference/respawn/rui /reference/respawn/topology /reference/respawn/clientcommands /reference/respawn/movers /reference/respawn/dialog /reference/respawn/damagehistory :::</p>"},{"location":"Modding/reference/#hud","title":"HUD","text":"<p>Note</p> <p>/reference/respawn/hud_menus /reference/respawn/hud_element_notation /reference/respawn/hud_script :::</p>"},{"location":"Modding/reference/northstar/callbacks/","title":"Custom Northstar Callbacks","text":"<p>Callbacks added by Northstar</p> <p>Callbacks within squirrel trigger functions when certain events occur.</p> <p>They will also often pass arguments to those functions based on the callbacks used.</p>"},{"location":"Modding/reference/northstar/callbacks/#list-of-callbacks","title":"List of callbacks","text":"<p>Please refer to Respawn <code>../respawn/callbacks</code>  for the list of callbacks defined in respawn code.</p>"},{"location":"Modding/reference/northstar/callbacks/#_codecallbacks_commongnut","title":"_codecallbacks_common.gnut:","text":""},{"location":"Modding/reference/northstar/callbacks/#_custom_codecallbacksgnut","title":"_custom_codecallbacks.gnut:","text":""},{"location":"Modding/reference/northstar/callbacks/#_itemsnut","title":"_items.nut:","text":""},{"location":"Modding/reference/northstar/callbacks/#_loadouts_mpgnut","title":"_loadouts_mp.gnut:","text":""},{"location":"Modding/reference/northstar/callbacks/#_menu_callbacksgnut","title":"_menu_callbacks.gnut:","text":""},{"location":"Modding/reference/northstar/callbacks/#sh_remote_functions_mp_customgnut","title":"sh_remote_functions_mp_custom.gnut:","text":"<p>evac\\_evac.gnut: ^^^^^^^^^^^^^^^^</p> <p>gamemodes\\_gamemode_fra.nut: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p> <p>gamemodes\\sh_gamemodes_custom.gnut: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p> <p>lobby\\_lobby.gnut: ^^^^^^^^^^^^^^^^^^</p> <p>lobby\\_private_lobby.gnut: ^^^^^^^^^^^^^^^^^^^^^^^^^^</p> <p>melee\\sh_melee.gnut: ^^^^^^^^^^^^^^^^^^^^</p> <p>This callback gets triggered after the melee button is pressed to check if the action to execute the target is still valid. If one of the added callbacks return false the target won\\'t be executed and will just be meleed.</p> <p>Note</p> <p>The execution prompt still pops up. ::::</p> <p>mp\\_ai_mp.gnut: ^^^^^^^^^^^^^^^</p> <p>mp\\_base_gametype_mp.gnut: ^^^^^^^^^^^^^^^^^^^^^^^^^^</p> <p>mp\\_gamestate_mp.nut: ^^^^^^^^^^^^^^^^^^^^^</p> <p>ui\\ui_mouse_capture.nut: ^^^^^^^^^^^^^^^^^^^^^^^^</p>"},{"location":"Modding/reference/northstar/chathooks/","title":"Chathooks","text":"<p>This document provides usage of the Chathook API added in Northstar <code>v1.6.0</code>. For an example of chathooks in use, check out EmmaM\\'s OwOfier mod.</p> <p>Warning</p> <p>Title</p> <p>Warning</p> <p>Your mod needs to be load priority 1 or above to use the structs and callbacks in your script. ::::</p>"},{"location":"Modding/reference/northstar/chathooks/#client-chat-api","title":"Client chat API","text":""},{"location":"Modding/reference/northstar/chathooks/#callbacks","title":"Callbacks","text":"<p>The client chat callbacks allow you to intercept chat messages and modify or block them.</p>"},{"location":"Modding/reference/northstar/chathooks/#clclient_messagestruct","title":"clclient_messagestruct","text":"<p>Contains details on a chat message to be displayed. You can receive one of these by adding a chat callback with <code>AddCallback_OnReceivedSayTextMessage &lt;addcallback_onreceivedsaytextmessage&gt;</code>.</p> <p>the text sent by the player.</p> <p>the player who sent the chat.</p> <p>the display name of the player who sent the chat.</p> <p>whether this chat has a <code>[TEAM]</code> tag.</p> <p>whether this chat has a <code>[DEAD]</code> tag.</p> <p>whether this chat has a <code>[WHISPER]</code> tag.</p> <p>if true, this chat will not be displayed.</p>"},{"location":"Modding/reference/northstar/chathooks/#addcallback_onreceivedsaytextmessage","title":"addcallback_onreceivedsaytextmessage","text":"<p>Adds a callback that will be run when a chat message is received from the server. This will only be triggered for messages from players, not server messages.</p> <p>The provided function should accept a <code>ClClient_MessageStruct &lt;clclient_messagestruct&gt;</code> and return an optionally modified copy of it. When a chat message is received, each registered callback is run in sequence to modify or block the message.</p> <p>Example:</p> <pre><code>ClClient_MessageStruct function MyChatFilter(ClClient_MessageStruct message)\n{\n    if (message.message.find(\"nft\") != null)\n    {\n        message.shouldBlock = true\n    }\n\n    message.message = StringReplace(message.message, \"yes\", \"no\", true, true)\n\n    return message\n}\n\nvoid function MyModInit()\n{\n    AddCallback_OnReceivedSayTextMessage(MyChatFilter)\n}\n</code></pre>"},{"location":"Modding/reference/northstar/chathooks/#writing-to-chat","title":"Writing to Chat","text":"<p>A handful of functions are provided to write messages in local chat windows. These do not send messages to other players, they only display them locally.</p> <p>Writes a line of text in local game chat panels. Supports <code>ANSI escape codes &lt;ansi_escape&gt;</code> .</p> <p>Example:</p> <pre><code>void function OnGameStarted()\n{\n    Chat_GameWriteLine(\"You got this, \" + GetLocalClientPlayer().GetPlayerName() + \"!\")\n}\n</code></pre> <p>Appends text to local game chat panels. Supports <code>ANSI escape codes &lt;ansi_escape&gt;</code> .</p> <p>Example:</p> <pre><code>void function InitialiseHEVSuit()\n{\n    Chat_GameWriteLine(\"SENSOR ARRAYS-\")\n    ActivateSensorArrays()\n    Chat_GameWrite(\"ACTIVATED\")\n    wait 1\n    Chat_GameWriteLine(\"BIOMETRIC MONITORING SYSTEMS-\")\n    ActivateBiometricMonitoringSystems()\n    Chat_GameWrite(\"ACTIVATED\")\n    wait 1\n    Chat_GameWriteLine(\"HAVE A VERY SAFE DAY.\")\n}\n</code></pre> <p>Writes a line of text in local network chat panels. Supports <code>ANSI escape codes &lt;ansi_escape&gt;</code> .</p> <p>Example:</p> <pre><code>void function MyModInit()\n{\n    Chat_NetworkWriteLine(\"MyMod v1.0.0 is good to go!\")\n}\n</code></pre> <p>Appends text to local network chat panels. Supports <code>ANSI escape codes &lt;ansi_escape&gt;</code> .</p> <p>Example:</p> <pre><code>void function OnButtonPressed()\n{\n    Chat_NetworkWrite(\"Connecting in 3...\")\n    wait 1\n    Chat_NetworkWrite(\"2...\")\n    wait 1\n    Chat_NetworkWrite(\"1...\")\n    wait 1\n    Chat_NetworkWrite(\"0\")\n    Connect()\n}\n</code></pre>"},{"location":"Modding/reference/northstar/chathooks/#server-chat-api","title":"Server Chat API","text":""},{"location":"Modding/reference/northstar/chathooks/#callbacks_1","title":"Callbacks","text":"<p>The server chat callbacks allow you to intercept incoming chat messages and modify or block them.</p>"},{"location":"Modding/reference/northstar/chathooks/#clserver_messagestruct","title":"clserver_messagestruct}","text":"<p>Contains details on an incoming chat message. You can receive one of these by adding a chat callback with <code>AddCallback_OnReceivedSayTextMessage &lt;addcallback_onreceivedsaytextmessage_server&gt;</code>.</p> <p>the text sent by the player.</p> <p>the player who sent the chat.</p> <p>whether this chat is only sent to the player\\'s team.</p> <p>if true, this chat will not be sent.</p> <p>Adds a callback that will be run when a chat message is received from a player. This will not be fired for custom messages sent by server mods.</p> <p>The provided function should accept a <code>ClServer_MessageStruct &lt;clserver_messagestruct&gt;</code> and return an optionally modified copy of it. When a chat message is received, each registered callback is run in sequence to modify or block the message.</p> <p>Example:</p> <pre><code>ClServer_MessageStruct function MyChatFilter(ClServer_MessageStruct message)\n{\n    if (message.message.find(\"nft\") != null)\n    {\n        message.shouldBlock = true\n    }\n\n    message.message = StringReplace(message.message, \"yes\", \"no\", true, true)\n\n    return message\n}\nvoid function MyModInit()\n{\n    AddCallback_OnReceivedSayTextMessage(MyChatFilter)\n}\n</code></pre>"},{"location":"Modding/reference/northstar/chathooks/#custom-messages","title":"Custom Messages","text":"<p>With custom messages you can send chat messages at any time, to all players or to specific players.</p> <p>Displays a chat message as if the player sent it. Only use this when the player has performed a clear action to send a chat message.</p> <p>Parameters:</p> <ul> <li><code>entity player</code> - the player that the chat message will appear to     be from.</li> <li><code>string text</code> - the contents of the chat message. Supports     <code>ANSI escape codes &lt;ansi_escape&gt;</code>      for colors.</li> <li><code>bool isTeamChat</code> - whether this chat is only sent to the     player\\'s team.</li> </ul> <p>Example:</p> <pre><code>void function OnSayRedCommand(entity player, string text)\n{\n    Chat_Impersonate(player, \"red text -&gt; \\x1b[31m\" + text)\n}\n</code></pre> <p>Sends a private chat message from a player that is only displayed to one other player. Only use this when the player has performed a clear action to send a chat message.</p> <p>Parameters:</p> <ul> <li><code>entity fromPlayer</code> - the player the message will be from.</li> <li><code>entity toPlayer</code> - the player that the message will be shown to.</li> <li><code>string text</code> - the contents of the chat message. Supports     <code>ANSI escape codes &lt;ansi_escape&gt;</code>      for colors.</li> <li><code>bool whisper</code> - if true, <code>[WHISPER]</code> will be displayed before the     message to indicate the message is private.</li> </ul> <p>Example:</p> <pre><code>void function OnSendToFriendsCommand(entity fromPlayer, string text)\n{\n    array&lt;entity&gt; friends = GetPlayerFriends(fromPlayer)\n    foreach (friend in friends)\n    {\n        Chat_PrivateMessage(fromPlayer, friend, text, true)\n    }\n}\n</code></pre> <p>Displays a server message to all players in the chat.</p> <p>Parameters:</p> <ul> <li><code>string text</code> - the contents of the chat message. Supports     <code>ANSI escape codes &lt;ansi_escape&gt;</code>      for colors.</li> <li><code>bool withServerTag</code> - if true, <code>[SERVER]</code> will appear before the     message in chat. Defaults to true.</li> </ul> <p>Example:</p> <pre><code>void function RestartServerThread()\n{\n    // wait one hour\n    wait 3600\n    Chat_ServerBroadcast(\"Server will be shut down in \\x1b[93m5 seconds\")\n    wait 1\n    Chat_ServerBroadcast(\"Server will be shut down in \\x1b[93m4 seconds\")\n    wait 1\n    Chat_ServerBroadcast(\"Server will be shut down in \\x1b[93m3 seconds\")\n    wait 1\n    Chat_ServerBroadcast(\"Server will be shut down in \\x1b[93m2 seconds\")\n    wait 1\n    Chat_ServerBroadcast(\"Server will be shut down in \\x1b[93m1 second\")\n    wait 1\n    StopServer()\n}\n</code></pre> <p>Sends a server message to a specific player in the chat.</p> <p>Parameters:</p> <ul> <li><code>entity toPlayer</code> - the player that the message will be shown to.</li> <li><code>string text</code> - the contents of the chat message. Supports     <code>ANSI escape codes &lt;ansi_escape&gt;</code>      for colors.</li> <li><code>bool whisper</code> - if true, <code>[WHISPER]</code> will be displayed before the     message to indicate the message is private.</li> <li><code>bool withServerTag</code> - if true, <code>[SERVER]</code> will appear before the     message in chat. Defaults to true.</li> </ul> <p>Example:</p> <pre><code>void function OnBanCommand(entity player, array&lt;string&gt; args)\n{\n    if (!PlayerIsModerator(player))\n    {\n        Chat_ServerPrivateMessage(player, \"You do not have the permissions to perform this command.\", true, false)\n        return\n    }\n\n    BanPlayerByName(args[0])\n}\n</code></pre>"},{"location":"Modding/reference/northstar/chathooks/#ansi_escape","title":"ANSI Escape Codes","text":"<p>All messages support ANSI escape codes for customising text color. These are commands in strings that have special meaning. For example, the string:</p> <pre><code>Hello world, \\x1b[31mthis text is red\\x1b[0m. And \\x1b[34mthis text is blue\\x1b[0m.\n</code></pre> <p><code>\\x1b</code> is a special character that Squirrel (and other languages) replace with a reserved ASCII character. For future reference this will be referred to with <code>ESC</code> (e.g. setting red text is <code>ESC[31m</code>).</p> <p>The following commands are available:</p> <p>Codes                        Description   <code>ESC[0m</code> and <code>ESC[39m</code>       Reset text formatting.   <code>ESC[30-37m</code>, <code>ESC[90-97m</code>   Set to one of the available color presets.   <code>ESC[38;5;Xm</code>                Set to one of the available 8-bit colors.   <code>ESC[38;2;R;G;Bm</code>            Set to an RGB color, with <code>R</code>, <code>G</code> and <code>B</code> in the range 0-255.   <code>ESC[110m</code>                   Set to chat text color.   <code>ESC[111m</code>                   Set to friendly player name color.   <code>ESC[112m</code>                   Set to enemy player name color.   <code>ESC[113m</code>                   Set to network name color.</p> ANSI Codes"},{"location":"Modding/reference/northstar/customdamagesources/","title":"Custom Damage Source IDs","text":"<p>Custom damage source IDs can be used to create new damage source IDs for modded weapons, abilities, damage, etc.</p> <p>They can only be registered server-side and cannot modify existing damage source IDs. Clients pre-1.9.4 will not see the custom damage sources in the obituary.</p> <p>To add a single damage source ID, use:</p> <p>To add multiple damage source IDs, use</p> <p>The first string parameter is the in-code weapon name while the latter is the name displayed in the obituary.</p> <p>Damage source IDs should be added in <code>\"After\"</code> server callbacks.</p> <p>For example, we can call the methods from a function in <code>damage_source_example.nut</code>:</p> <pre><code>global function SimpleSourceInit\n\nvoid function SimpleSourceInit()\n{\n    // Server-side code\n\n    // Register a single damage source ID\n    RegisterWeaponDamageSource( \"mp_weapon_minigun\", \"Minigun\" )\n\n    // Register multiple damage source IDs\n    RegisterWeaponDamageSources(\n        {\n            mp_titanweapon_barrage_core_launcher = \"Barrage Core\",\n            mp_titanweapon_grenade_launcher = \"Grenade Launcher\"\n        }\n    )\n}\n</code></pre> <p>Then call the function as an <code>\"After\"</code> server callback in the <code>mod.json</code>:</p> <pre><code>{\n    \"Scripts\": [\n        {\n            \"Path\": \"damage_source_example.nut\",\n            \"RunOn\": \"SERVER &amp;&amp; MP\",\n            \"ServerCallback\": {\n                \"After\": \"SimpleSourceInit\"\n            }\n        },\n    ]\n}\n</code></pre> <p>Now, these damage source IDs can be referenced in script like so:</p> <pre><code>eDamageSourceId.mp_weapon_minigun\neDamageSourceId.mp_titanweapon_barrage_core_launcher\neDamageSourceId.mp_titanweapon_grenade_launcher\n</code></pre> <p>and their corresponding precached weapons (if applicable) will automatically use their custom damage source IDs.</p>"},{"location":"Modding/reference/northstar/dependencyconstants/","title":"Dependency Constants and Compiler Directives","text":""},{"location":"Modding/reference/northstar/dependencyconstants/#compiler-directives","title":"Compiler Directives","text":"<p>Compiler directives are a way to compile code only if a specific condition is met. To use this you have the <code>#if</code>, <code>#endif</code>, <code>#else</code> and <code>#elseif</code> keyword.</p> Contditons you can check for are <ul> <li><code>SERVER</code> Checks if the code is compiled on the server VM.</li> <li><code>CLIENT</code> Checks if the code is compiled on the client VM.</li> <li><code>UI</code> Checks if the code is compiled on the UI VM.</li> <li><code>MP</code> Checks if the code is compiled in a multiplayer match.</li> <li><code>SP</code> Checks if the code is compiled in a singeplayer match.</li> <li><code>DEV</code> Checks if the code is compiled with the <code>-dev</code> keyword in     the startup arguments.</li> </ul> <p>These conditions can also be combined with the regular squirrel boolean expressions</p> <pre><code>#if SERVER\nChat_ServerBroadcast(\"Message from the server VM\")\n#endif\n</code></pre> <pre><code>#if (CLIENT &amp;&amp; MP) || DEV\n...\n#elseif SP\n...\n#endif\n</code></pre>"},{"location":"Modding/reference/northstar/dependencyconstants/#dependency-constants","title":"Dependency Constants","text":"<p>Dependency constants are used to only compile code if a dependency your mod requires is loaded, these use the Compiler directives syntax.</p> <p>Inside your <code>mod.json</code> define a constant as:</p> <pre><code>{\n    // mod.json stuff\n    \"Dependencies\": {\n        // sets the constant to 0 or 1, depending if the mod with the name \"Mod Name\" exists and is enabled\n        \"CONSTANT_NAME\": \"Mod Name\"\n    }\n}\n</code></pre> <p>For Example:</p> <pre><code>\"PLAYER_HAS_ROGUELIKE_MOD\": \"TF|Roguelike\"\n</code></pre> <p>Will define a constant <code>PLAYER_HAS_ROGUELIKE_MOD</code> that is set to <code>0</code> or <code>1</code> depending if the mod is enabled. It then can be used as a constant/compiler flag.</p> <pre><code>#if PLAYER_HAS_ROGUELIKE_MOD\nprint(\"player has roguelike mod\")\nRoguelike_Function();\n#else\nprint(\"Can't use the function because the mod is off :'(\")\n#endif\n</code></pre>"},{"location":"Modding/reference/northstar/httprequests/","title":"HTTP and JSON","text":"<p>As of v1.12.0, you can now make HTTP requests from Squirrel scripts. HTTP requests allow you to query online APIs, send, retrieve data and much more.</p> <p>This is particularly useful for custom APIs you might want to build for your servers, for instance if you want to wrap a database with an API so that your servers can save player stats.</p> <p>Warning</p> <p>For security reasons, private network hosts, such as <code>localhost</code> or <code>192.168.1.106</code> are blocked by default, meaning you cannot make HTTP requests to them. This includes a blanket ban on IPv6 hosts.</p> <p>You are also limited to <code>HTTP</code> and <code>HTTPS</code> for protocols. Any other protocols will prevent the request from being made. ::::</p>"},{"location":"Modding/reference/northstar/httprequests/#launch-arguments","title":"Launch Arguments","text":"<p>There are a few launch arguments you may use to bypass some of the limitations, or outright disable HTTP requests.</p> <p>These should be applied to your client or server\\'s launch commandline.</p> <p>Name                     Description   <code>-allowlocalhttp</code>        Disables private network checks for HTTP requests, allowing any IPv4 and IPv6 host to be used.   <code>-disablehttprequests</code>   Disables HTTP requests. Any attempts at making requests will fail.   <code>-disablehttpssl</code>        Disables SSL verifications, useful when the host\\'s SSL certificate is invalid, and insecure HTTP cannot be used.</p> Launch Arguments"},{"location":"Modding/reference/northstar/httprequests/#http-api","title":"HTTP API","text":"<p>This section documents all the available functions, structs and enums used to make HTTP request in Squirrel scripts.</p> <p>Warning</p> <p>HTTP requests are multithreaded, as such they will run in the background until completion, whether successful or failed. Be mindful of how many requests you make at a time, as you may potentially get ratelimited or blacklisted by the remote host. Use the callbacks to execute code when a request has completed. ::::</p>"},{"location":"Modding/reference/northstar/httprequests/#data","title":"Data","text":"<p>The HTTP system uses a few enums and structs for requests and their callbacks.</p>"},{"location":"Modding/reference/northstar/httprequests/#httpapi_enums_httpmethod","title":"httpapi_enums_httpmethod","text":"<p>Contains the different allowed methods for a HTTP request. Please work.</p> <p>Uses the <code>GET</code> HTTP method for the request.</p> <p>Uses the <code>POST</code> HTTP method for the request.</p> <p>Uses the <code>HEAD</code> HTTP method for the request.</p> <p>Uses the <code>PUT</code> HTTP method for the request.</p> <p>Uses the <code>DELETE</code> HTTP method for the request.</p> <p>Uses the <code>PATCH</code> HTTP method for the request.</p> <p>Uses the <code>OPTIONS</code> HTTP method for the request.</p>"},{"location":"Modding/reference/northstar/httprequests/#httpapi_structs_httprequest","title":"httpapi_structs_httprequest","text":"<p>Contains the settings for a HTTP request. This is used for the more flexible <code>NSHttpRequest</code> function.</p> <p>HTTP method used for this HTTP request.</p> <p>Base URL of this HTTP request.</p> <p>Headers used for this HTTP request. Some may get overridden or ignored.</p> <p>Query parameters for this HTTP request.</p> <p>The content type of this HTTP request. Defaults to application/json &amp; UTF-8 charset.</p> <p>The body of this HTTP request. If set, will override queryParameters.</p> <p>The timeout for this HTTP request in seconds. Clamped between 1 and 60.</p> <p>If set, the override to use for the User-Agent header.</p> <p>Warning</p> <p>Only <code>POST</code> requests can send a body to the remote end. You may only choose to send a body, or query parameters. Having both will give priority to the body and clear the parameters. ::::</p>"},{"location":"Modding/reference/northstar/httprequests/#httpapi_structs_httprequestresponse","title":"httpapi_structs_httprequestresponse","text":"<p>Contains the response from the remote host for a successful HTTP request.</p> <p>The status code returned by the remote the call was made to.</p> <p>The body of the response.</p> <p>The raw headers returned by the remote.</p> <p>A key -&gt; values table of headers returned by the remote.</p>"},{"location":"Modding/reference/northstar/httprequests/#httpapi_structs_httprequestfailure","title":"httpapi_structs_httprequestfailure","text":"<p>Contains the failure code and message when Northstar fails to make a HTTP request.</p> <p>The status code returned by the remote the call was made to.</p> <p>The reason why this HTTP request failed.</p>"},{"location":"Modding/reference/northstar/httprequests/#functions","title":"Functions","text":"<p>Warning</p> <p>Your mod needs to be load priority 1 or above to use <code>HttpRequest</code> and <code>HttpRequestResponse</code> in your script. ::::</p>"},{"location":"Modding/reference/northstar/httprequests/#httpapi_funcs_nshttprequest","title":"httpapi_funcs_nshttprequest","text":"<p>:::</p> <p>Launches a HTTP request with the given request data. This function is async, and the provided callbacks will be called when it is completed, if any.</p> <p>Parameters:</p> <ul> <li><code>HttpRequest requestParameters</code> - The parameters to use for this     request.</li> <li><code>[OPTIONAL] void functionref( HttpRequestResponse ) onSuccess</code> -     The callback to execute if the request is successful.</li> <li><code>[OPTIONAL] void functionref( HttpRequestFailure ) onFailure</code> -     The callback to execute if the request has failed.</li> </ul> <p>Returns:</p> <ul> <li>Whether or not the request has been successfully started.</li> </ul> <p>Example:</p> <p>Below is a working example of an HTTP request for a mod.</p> <p>As you can see, you can either use named functions for the callbacks, or create lambdas. Lambdas are particularly useful as they let you capture local variables of the functions to re-use later such as <code>callback</code> in this example.</p> <pre><code>HttpRequest request\nrequest.method = HttpRequestMethod.GET\nrequest.url = \"https://my.spyglass.api/sanctions/get_by_id\"\nrequest.queryParameters[ \"id\" ] &lt;- [ id.tostring() ]\n\nvoid functionref( HttpRequestResponse ) onSuccess = void function ( HttpRequestResponse response ) : ( callback )\n{\n    SpyglassApi_OnQuerySanctionByIdSuccessful( response, callback )\n}\n\nvoid functionref( HttpRequestFailure ) onFailure = void function ( HttpRequestFailure failure ) : ( callback )\n{\n    SpyglassApi_OnQuerySanctionByIdFailed( failure, callback )\n}\n\nreturn NSHttpRequest( request, onSuccess, onFailure )\n</code></pre>"},{"location":"Modding/reference/northstar/httprequests/#httpapi_funcs_nshttpget","title":"httpapi_funcs_nshttpget","text":"<p>Launches an HTTP GET request at the specified URL with the given query parameters. Shortcut wrapper of NSHttpRequest(). This function is async, and the provided callbacks will be called when it is completed, if any.</p> <p>Parameters:</p> <ul> <li><code>string url</code> - The url to make the HTTP request at.</li> <li><code>[OPTIONAL] table&lt; string, array&lt; string &gt; &gt; queryParameters</code> - A     table of key value parameters to insert in the url.</li> <li><code>[OPTIONAL] void functionref( HttpRequestResponse ) onSuccess</code> -     The callback to execute if the request is successful.</li> <li><code>[OPTIONAL] void functionref( HttpRequestFailure ) onFailure</code> -     The callback to execute if the request has failed.</li> </ul> <p>Returns:</p> <ul> <li>Whether or not the request has been successfully started.</li> </ul> <p>Example:</p> <p>This is the same example as NSHttpRequest()\\'s example. However, it uses this function instead.</p> <pre><code>table&lt;string, array&lt;string&gt; &gt; params\nparams[ \"id\" ] &lt;- [ id.tostring() ]\n\nvoid functionref( HttpRequestResponse ) onSuccess = void function ( HttpRequestResponse response ) : ( callback )\n{\n    SpyglassApi_OnQuerySanctionByIdSuccessful( response, callback )\n}\n\nvoid functionref( HttpRequestFailure ) onFailure = void function ( HttpRequestFailure failure ) : ( callback )\n{\n    SpyglassApi_OnQuerySanctionByIdFailed( failure, callback )\n}\n\nreturn NSHttpGet( \"https://my.spyglass.api/sanctions/get_by_id\", params, onSuccess, onFailure )\n</code></pre>"},{"location":"Modding/reference/northstar/httprequests/#httpapi_funcs_nshttppostquery","title":"httpapi_funcs_nshttppostquery","text":"<p>Launches an HTTP POST request at the specified URL with the given query parameters. Shortcut wrapper of NSHttpRequest(). This function is async, and the provided callbacks will be called when it is completed, if any.</p> <p>Parameters:</p> <ul> <li><code>string url</code> - The url to make the HTTP request at.</li> <li><code>[OPTIONAL] table&lt; string, array&lt; string &gt; &gt; queryParameters</code> - A     table of key value parameters to insert in the url.</li> <li><code>[OPTIONAL] void functionref( HttpRequestResponse ) onSuccess</code> -     The callback to execute if the request is successful.</li> <li><code>[OPTIONAL] void functionref( HttpRequestFailure ) onFailure</code> -     The callback to execute if the request has failed.</li> </ul> <p>Returns:</p> <ul> <li>Whether or not the request has been successfully started.</li> </ul>"},{"location":"Modding/reference/northstar/httprequests/#httpapi_funcs_nshttppostbody","title":"httpapi_funcs_nshttppostbody","text":"<p>Launches an HTTP POST request at the specified URL with the given body. Shortcut wrapper of NSHttpRequest(). This function is async, and the provided callbacks will be called when it is completed, if any.</p> <p>This is the more interesting POST function, as you can use it to convert a table into JSON and \\\"POST\\\" it to the remote server.</p> <p>Parameters:</p> <ul> <li><code>string url</code> - The url to make the HTTP request at.</li> <li><code>string body</code> - The body to send with the request. Expects JSON by     default.</li> <li><code>[OPTIONAL] void functionref( HttpRequestResponse ) onSuccess</code> -     The callback to execute if the request is successful.</li> <li><code>[OPTIONAL] void functionref( HttpRequestFailure ) onFailure</code> -     The callback to execute if the request has failed.</li> </ul> <p>Returns:</p> <ul> <li>Whether or not the request has been successfully started.</li> </ul> <p>Example:</p> <p>In this example, we\\'ll convert a table to JSON, and send it over to a web API.</p> <pre><code>table myData = {}\nmyData[ \"uid\" ] &lt;- player.GetUID()\nmyData[ \"username\" ] &lt;- player.GetPlayerName()\nmyData[ \"isBot\" ] &lt;- player.IsBot().tostring()\n\nstring json = EncodeJSON( myData )\nif ( NSHttpPostBody( \"https://api.stats.tf/player/connect\", json ) )\n{\n    printt( \"Successfully attempted to upload player connection stats to API.\" )\n} \n</code></pre>"},{"location":"Modding/reference/northstar/httprequests/#httpapi_funcs_nsissuccesshtppcode","title":"httpapi_funcs_nsissuccesshtppcode","text":"<p>Checks whether or not the given HTTP status code is considered a \\\"success\\\" code.</p> <p>This is true for status codes between 200 and 299.</p> <p>Parameters:</p> <ul> <li><code>int statusCode</code> - The status code to verify.</li> </ul> <p>Returns:</p> <ul> <li>Whether or not the given status code is considered successful.</li> </ul>"},{"location":"Modding/reference/northstar/httprequests/#json_overview","title":"JSON API","text":"<p>Warning</p> <p>The JSON parser currently supports the following types for values: <code>string</code>, <code>integer</code>, <code>float</code>, <code>bool</code>, <code>table</code>, and <code>array</code>.</p> <p>Tables and arrays can only hold supported types. Unsupported types will be ignored. Keys can only be strings.</p> <p>The JSON parser currently does not support keys holding <code>null</code> values, and simply won\\'t include them in decoded tables or encoded JSON strings. ::::</p>"},{"location":"Modding/reference/northstar/httprequests/#json_funcs_decodejson","title":"json_funcs_decodejson","text":"<p>Converts a JSON string to a Squirrel table.</p> <p>Parameters:</p> <ul> <li><code>string json</code> - The JSON string to decode into a table.</li> <li><code>[OPTIONAL] bool fatalParseErrors</code> - Whether or not parsing errors     should throw a fatal script error. Default to false.</li> </ul> <p>Returns:</p> <ul> <li>The table decoded from the JSON string on success, or an empty     table <code>{}</code> on parse failure (if fatalParseErrors is false).</li> </ul>"},{"location":"Modding/reference/northstar/httprequests/#json_funcs_encodejson","title":"json_funcs_encodejson","text":"<p>Converts a Squirrel table to a JSON string.</p> <p>Parameters:</p> <ul> <li><code>table data</code> - The table to encode to a JSON string.</li> </ul> <p>Returns:</p> <ul> <li>The JSON string parsed from the Squirrel table.</li> </ul> <p>Paired with <code>/reference/northstar/httprequests</code> , this allows you to send and retrieve JSON data from external sources.</p>"},{"location":"Modding/reference/northstar/modsettings/","title":"Modsettings","text":"<p>Mod Settings ====</p> <p>Setup ----</p> <p>ConVars are the easiest way to implement settings for your mod using the Mod Settings API.</p> <p>Your mod needs to register itself and all ConVars that are a part of your mod that should be accessible in the Mod Settings menu. To do this, simply add a new script to your mod that runs only in the UI VM like this:</p> <pre><code>\"Path\": \"ui/ms_example_mod.nut\",\n\"RunOn\": \"UI\",\n\"UICallback\": {\n  \"Before\": \"ExampleMod_AddModSettings\"\n}\n</code></pre> <p>Inside of the callback specified here, you can add your settings.</p>"},{"location":"Modding/reference/northstar/modsettings/#api","title":"API","text":"<p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>ConVar values will only persist if the ConVar has an ARCHIVE flag. For Clients, use <code>FCVAR_ARCHIVE_PLAYERPROFILE</code>.</p> <p>All Mod Settings functions have a <code>stackPos</code> paramter. This parameter should only be changed if you\\'re writing custom wrappers for the settings. ::::</p> <p>Adds a new category in the settings for your mod</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>It\\'s mandatory to register a mod before you can add any settings ::::</p> <p>Adds a new category to your mod</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>It\\'s mandatory to register a category for your mod. A mod may have multiple categories ::::</p> <p>Adds a basic setting to the last declared category.</p> <p>Parameters:</p> <ul> <li><code>string conVar</code> - the ConVar this setting modifies</li> <li><code>string displayName</code> - The display string of this setting. This     can be a localization token.</li> <li><code>string type = \"\"</code> - Optional type of this ConVar. This guards     against users inserting invalid values.</li> <li><code>int stackPos = 2</code></li> </ul> <p>Types:</p> <ul> <li><code>int</code></li> <li><code>bool</code></li> <li><code>float</code></li> <li><code>float2</code></li> <li><code>float3</code> / <code>vector</code></li> </ul> <p>other types will default to setting a string for the ConVar.</p> <p>Adds a setting to the menu that uses an enum. Users can navigate with buttons next to the input between possible values.</p> <p>Parameters:</p> <ul> <li><code>string conVar</code> - the ConVar this setting modifies</li> <li><code>string displayName</code> - The display string of this setting. This     can be a localization token.</li> <li><code>array&lt;string&gt; values</code> - all possible values of this enum. The     ConVar value will be set to the index of the selected value.</li> <li><code>int stackPos = 2</code></li> </ul> <p>Adds a ConVar setting to the menu that has a slider.</p> <p>Parameters:</p> <ul> <li><code>string conVar</code> - the conVar this setting modifies</li> <li><code>string displayName</code> - The display string of this setting. This     can be a localization token.</li> <li><code>float min = 0.0</code> - the minimum value of the ConVar</li> <li><code>float max = 0.0</code> - the maximum value of the ConVar</li> <li><code>float stepSize = 0.1</code> - the distance between each possible value.</li> <li><code>bool forceClamp = false</code> - wether to force the value to round to     the nearest interval of <code>stepValue</code>.</li> </ul> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Whenever Mod Settings is used, the value will be clamped to the nearest value available in the slider. ::::</p> <p>Examples ----</p> <p>Settings Declaration ^^^^</p> <pre><code>AddModTitle( \"#MY_LOCALIZED_MOD_TITLE\" )\n\nAddModCategory( \"Gameplay\" )\nAddConVarSetting( \"my_mod_gamer_setting\", \"Gamer Setting\", \"string\" )\nAddConVarSettingEnum( \"my_mod_enum_setting_whatever\", \"Cool Feature\", [ \"Disabled\", \"Enabled\" ] )\n\nAddModCategory( \"Visuals\" )\nAddConVarSetting( \"my_mod_display_color\", \"Display Color\", \"vector\" )\nAddModSettingsButton( \"Preview\", void function(){ AdvanceMenu( \"MyModMenu\" ) } )  // Assumes you have \"MyModMenu\" set up etc.\n</code></pre> <p>Wrapper ^^^^</p> <p>To create custom wrapper functions you need to specify the stack position where the root of your Mod Setting declarations take place.</p> <pre><code>void function AddModSettingsDropDown( string displayName, array&lt;string&gt; options )\n{\n  NSModSettingsAddButton( displayName, void function() { OpenDropDown( options ) }, 3 )\n}\n</code></pre> <p>Note that in this example the stack position is <code>3</code>, since <code>AddModSettingsButton</code> needs to walk one additional step to the callback function.</p>"},{"location":"Modding/reference/northstar/msinterface/","title":"Server Authentification","text":"<p>Note</p> <p>All of these functions are only exposed to the <code>UI</code> VM. ::::</p> <p>These are functions required for the ingame server browser and the authorization process for the Masterserver and game servers.</p>"},{"location":"Modding/reference/northstar/msinterface/#masterserver-authentification","title":"Masterserver Authentification","text":"<p>Returns <code>true</code> if the client is authenticated with the Masterserver</p> <p>Returns <code>true</code> if a successful connection has been established</p>"},{"location":"Modding/reference/northstar/msinterface/#game-server-authentification","title":"Game Server Authentification","text":"<p>Tries authing with the fetched server at <code>serverIndex</code> and the provided password</p> <p>Returns <code>true</code> if the client is currently authing with a game server</p>"},{"location":"Modding/reference/northstar/msinterface/#nswasauthsuccessful","title":"NSWasAuthSuccessful","text":"<p>Returns <code>true</code> if the client successfully authed with a game server</p> <p>Tries to connect to the game server that has previously been authenticated with</p> <p>Returns the API reason why the last authentification failed</p> <p>Tries to authenticate with the local game server</p> <p>Call this after <code>NSWasAuthSuccessful &lt;NSWasAuthSuccessful&gt;</code> returns <code>true</code> to complete the local authorization process.</p>"},{"location":"Modding/reference/northstar/msinterface/#server-information","title":"Server Information","text":"<p>Start fetching all available game servers from the Masterserver</p> <p>Returns <code>true</code> if the last request by</p> <p>Returns the total amount of fetched game servers</p> <p>Clears all fetched game servers</p> <p>Returns an array of all available Servers fetched from the Masterserver.</p>"},{"location":"Modding/reference/northstar/msinterface/#connection-callbacks","title":"Connection Callbacks","text":""},{"location":"Modding/reference/northstar/msinterface/#addconnecttoservercallback","title":"AddConnectToServerCallback","text":"<p>Add a callback to be executed right before connecting to a game server via the Server Browser</p> <p>Remove a function object from the list of callbacks</p> <p>Runs all callbacks that have been registered with <code>AddConnectToServerCallback &lt;AddConnectToServerCallback&gt;</code></p>"},{"location":"Modding/reference/northstar/msinterface/#script-structs","title":"Script Structs","text":"<p>Contains all info about a game server.</p> <p>Index of the native Object equivalent</p> <p>ID assigned to the game server by the Masterserver in the registration</p> <p>Name of this game server</p> <p>Description of this game server</p> <p>Unlocalized name of the map that\\'s currently running on the game server</p> <p>Unlocalized name of the playlist that\\'s currently running on the game server</p> <p>The total amount of players currently connected to the player</p> <p>The maximum amount of players that can connect to the server</p> <p>If <code>true</code> an extra password is required to connect to the server. Otherwise the password is an empty string</p> <p>Unlocalized region where the physical server is located</p> <p>Array of all mods that are required to be loaded on the client to be able to join the server</p> <p>Information of a mod that has to be loaded on the client in order to join a game server</p> <p>Name of the mod</p> <p>Version of the mod</p>"},{"location":"Modding/reference/northstar/safeio/","title":"Safe I/O","text":"<p>If you want to store an extended amount of data in your mod it is not sustainable to only use ConVars as they are limited in space and easily reset. With Safe I/O you are able to write to one folder (<code>&lt;profile&gt;/saves/&lt;mod directory name&gt;</code>). In this folder you can store text files of any type (e.g. <code>.txt</code>, <code>.json</code>), it\\'s also possible to use non text file formats (e.g. <code>.exe</code>) however you won\\'t be able to run them on your PC. It also allows for sub-folders.</p>"},{"location":"Modding/reference/northstar/safeio/#saving-a-file","title":"Saving a file","text":"<p>To save a file you need the content you want to save as <code>strings-overview</code>  , for this the <code>json_overview</code>  functions can be useful if you want to store <code>table_overview</code>  or <code>arrays_overview</code> .</p> <p>To actually save the file you use:</p> param string file <p>The name of the file you want to store, this supports sub folders. Needs to be with the file type (e.g. <code>/TitanData/tone.txt</code>).</p> param string data <p>The saved data, this can be any valid String.</p> <p>Alternatively if you want a faster way to store <code>table_overview</code>  you can use:</p> param string file <p>The name of the file you want to store, this supports sub folders. Doesn\\'t have to be <code>.json</code> but will use the correct formatting for a <code>.json</code>.</p> param table data <p>The table that will be written to the file, this only supports the types specified in the <code>json_overview</code>.</p>"},{"location":"Modding/reference/northstar/safeio/#loading-a-file","title":"Loading a file","text":"param string file <p>This is the name of the file you want to load, it has the same formating as in <code>NSSaveFile</code>.</p> param void functionref( string ) onSuccess <p>The function that gets execued when the file is successfully loaded, the parameter <code>string</code> is the content of the loaded file.</p> param void functionref() onFailure = null <p>The function that gets execued when the loading was NOT successful, by default the function is just <code>null</code>.</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>If you are having trouble with functionrefs you can read up on them here: <code>functionref_overview</code>  ::::</p> <p>You can also get all saved file:</p> param string path = \\\"\\\" <p>Gets all files in a specified path, by default its just <code>&lt;profile&gt;/saves/&lt;mod directory name&gt;</code>.</p> returns <p>An array with all file names in the specified path.</p>"},{"location":"Modding/reference/northstar/safeio/#deleting-a-file","title":"Deleting a file","text":"param string file <p>This is the name of the file you want to check exsits, it has the same formating as in <code>NSSaveFile</code>.</p>"},{"location":"Modding/reference/northstar/safeio/#file-checks","title":"File checks","text":"param tring file <p>This is the name of the file you want to check exsits, it has the same formating as in <code>NSSaveFile</code>.</p> returns <p><code>true</code> if the file was found, otherwise it returns <code>false</code>.</p> param string file <p>This is the name of the file you want to get the file size from.</p> returns <p>KB size of the specified file.</p> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>This fucntion will raise an error when the file doesnt exist. ::::</p> param string file <p>This is the path you want to check.</p> returns <p><code>true</code> if the path is a folder, otherwise it returns <code>false</code>.</p> returns <p>Amount of KB you have left to write on.</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>The max size of data you can store is <code>50MB</code> per mod. Can be overwritten with <code>-maxfoldersize BYTES</code> in the launch args. ::::</p>"},{"location":"Modding/reference/northstar/serversiderui/","title":"Serverside RUI","text":"<p>Server-side Rui provides a set of functions enabling servers to display complex hud elements on clients without requiring a client-side mod. These functions were introduced in Northstar <code>1.10.0</code>.</p> <p>It should be noted that there's no guarantee the client will see the hud elements.</p>"},{"location":"Modding/reference/northstar/serversiderui/#polls","title":"Polls","text":"<p>Creates a poll on <code>player</code>.</p> Player POV <p>Definition:</p> <p>Example:</p> <pre><code>void function CreateDummyPoll()\n {\n    array&lt;string&gt; options = [ \"Vote for a map!\", \"Amongsus\", \"sussy\", \"when\", \"1.10\", \"hi H0l0\" ]\n    foreach(entity player in GetPlayerArray())\n        NSCreatePollOnPlayer(player, \"Vote who's the biggest dummy!\", options, 30)\n  }\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#getting-response","title":"Getting Response","text":"<p>Definition:</p> <p>Returns the index of the item from <code>options</code> the player voted for. If the player hadn\\'t voted yet it returns a -1.</p> <p>Example:</p> <pre><code>void function CheckResponseToDummyPoll(entity player)\n{\n    if(NSGetPlayerResponse(player) != -1)\n        print(\"Player has voted!\")\n}\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#large-message","title":"Large Message","text":"<p>Sends a large message to <code>player</code> which will appear in the top right corner.</p> Player POV <p>Definition:</p> <p>Example:</p> <pre><code>void function SendDummyLargeMessage(entity player)\n{\n    NSSendLargeMessageToPlayer(player,\"I'm not a dummy &gt;:(\", \"You are\", 10, \"ui/fd_tutorial_tip.rpak\")\n}\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#info-message","title":"Info Message","text":"<p>Sends a smaller message to <code>player</code> which will appear from the center right.</p> Player POV <p>Definition:</p> <p>Example:</p> <pre><code>void function SendDummyInfoMessage(entity player)\n{\n    NSSendInfoMessageToPlayer(player, \"we were sent at the same time but I was sent sooner\")\n}\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#popup","title":"PopUp","text":"<p>Send a small popup to <code>player</code> which will appear in the lower half of their screen under their cursor.</p> Player POV <p>Definition:</p> <p>Example:</p> <pre><code>void funcions SendDummyPopUp(entity player)\n{\n    NSSendPopUpMessageToPlayer(player, \"very cool text I like\")\n}\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#announcement","title":"Announcement","text":"<p>Sends a large announcement to <code>player</code>.</p> Player POV <p>Definition:</p> <p>Example:</p> <pre><code>void function SendDummyAnnouncement(entity player)\n{\n    NSSendAnnouncementMessageToPlayer(player, \"Very cool announcement\", \"Hi Karma\", &lt;1,1,0&gt;, 1, ANNOUNCEMENT_STYLE_QUICK)\n}\n</code></pre>"},{"location":"Modding/reference/northstar/serversiderui/#status","title":"Status","text":"<p>Status messages allow you to show live data to the player. Currently status messages are limited to 4 and there\\'s no way to know if the player can see your message.</p> Player POV <p>Definitions:</p> <p>Creates a status message on <code>player</code>. <code>id</code> is used to identify and edit the message, make sure your id is unique! To generate a unique id, use UniqueString().</p> <p>Allows for editing of the <code>title</code> and <code>description</code> of a message which was created using <code>id</code>.</p> <p>Deletes the status message which was created with <code>id</code></p> <p>Examples:</p> <pre><code>void function TestStatusMessage_Threaded(entity player)\n{\n    string id = UniqueString(\"votes#\")\n    NSCreateStatusMessageOnPlayer(player, \"have voted\", \"[0/12]\", id)\n    wait 3\n    NSEditStatusMessageOnPlayer(player, \"have voted\", \"[1/12]\", id)\n    wait 10\n    NSDeleteStatusMessageOnPlayer(player, id)    \n}\n</code></pre>"},{"location":"Modding/reference/northstar/usefulfuncs/","title":"Useful Functions","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#custom-ejection-messages","title":"Custom Ejection Messages","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#how-ejection-messages-are-chosen","title":"How ejection messages are chosen","text":"<p>When ejecting the game selects a random number between 0 and 1, if this number is greater than 0.15 then a random common eject message is returned, if it is less than 0.15 then a rare ejection message is returned.</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#adding-new-messages","title":"Adding new messages","text":"<p>Using <code>AddCommonEjectMessage( String message )</code> and <code>AddRareEjectMessage( String message )</code> in script additional messages can be added to the pool of potential ejection messages</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#localisation","title":"Localisation","text":"<p>Like most things custom ejection messages can be localised through keyvalues</p> <p>There are no functions to remove ejection messages, however existing ones can be altered by modifying localisation files</p> <p>Below are a list of useful functions added by Northstar.</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#player-functions","title":"Player functions","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#check-for-different-weapon-types-on-a-player","title":"Check for different weapon types on a player","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#get-weapon-from-entity","title":"Get weapon from entity","text":"<p>Take weapon from Entity ~~~~~~~~~~~~~~~~~~~~~~</p> <p>Validity checks for player ~~~~~~~~~~~~~~~~~~~~~~~~~</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Respawn comment next to the function:</p> <p><code>TODO: This is a copy of SP's PlayerPosInSolid(). Not changing it to avoid patching SP. Merge into one function next game</code> ::::</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Respawn comment next to the function:</p> <p><code>TODO:  This function returns true for a player standing inside a friendly grunt. It also returns true if you are right up against a ceiling.Needs fixing for next game</code> ::::</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#change-a-players-invincibility","title":"Change a players invincibility","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#entity-functions","title":"Entity functions","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#turret-functions","title":"Turret functions","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#rest-so-far-to-be-sorted","title":"Rest so far to be sorted","text":"<p>Note</p> <p>Title</p> <p>Note :::</p> <p>this function only exists on clients ::::</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>A cleaner way to get a player: ::::</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>this function only works on NPCs and not on players ::::</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#titans","title":"Titans","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#gamemode-functions","title":"Gamemode functions","text":"<p>Note</p> <p>Title</p> <p>Note :::</p> <p>Does not work for FFA modes ::::</p> <p>Returns the local player\\'s UID, else <code>null</code>. Available on CLIENT, UI and SERVER VM.</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#threaded-conditonals","title":"Threaded conditonals","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#random-functions","title":"Random functions","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#type-utilities","title":"Type Utilities","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#table","title":"Table","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#arrays","title":"Arrays","text":"<p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>this returns <code>-1</code> if the item was not found in the array ::::</p> <p>Removes a variable by value instead of index.</p> <p>Reorders the array randomly.</p> <p>returns a random element from array</p> <p>changes the size of the array to the first int, new slots will be filled with the 2<sup>nd</sup> argument.</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>A few built-in functions you can give as arguments to sort an array.</p> <p>Dropdown</p> <p>Array Sort Functions</p> <p>Functions for score comparison ::: :::::</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Returns a section of the array as new array. Copies from start to the end (not included). If start is negative the index is calculated as length + start, if end is negative the index is calculated as length + end. If end is omitted end is equal to the array length. ::::</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#string","title":"String","text":"<p>returns a unique string</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>returns the new string with the first occurance of the toReplace string. ::::</p> <p>Returns a formatted template</p> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>returns <code>null</code> if the string is not found.</p> <p>You can eliminate the possibility of the returned index being null by casting like this:</p> <p><pre><code>int ornull index = GetMapName().find( \"mp\" )\n\nif( !index )\n    return\nint( index )\nint n = index + 1 //now we do not need the ornull anymore\n</code></pre> ::::</p>"},{"location":"Modding/reference/northstar/usefulfuncs/#float","title":"Float","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#integer","title":"Integer","text":""},{"location":"Modding/reference/northstar/usefulfuncs/#vectors","title":"Vectors","text":""},{"location":"Modding/reference/respawn/callbacks/","title":"Callbacks","text":"<p>Callbacks from Respawn native code</p> <p>Callbacks within squirrel trigger functions when certain events occur.</p> <p>They will also often pass arguments to those functions based on the callbacks used.</p> <p>Please refer to <code>../northstar/callbacks</code>  for callbacks defined in Northstar.</p>"},{"location":"Modding/reference/respawn/callbacks/#_codecallbacks_commongnut","title":"_codecallbacks_common.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#_codecallbacks_player_inputgnut","title":"_codecallbacks_player_input.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#_global_entitiesgnut","title":"_global_entities.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#_itemsnut","title":"_items.nut:","text":""},{"location":"Modding/reference/respawn/callbacks/#_on_spawnedgnut","title":"_on_spawned.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#_passivesgnut","title":"_passives.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#_script_triggersgnut","title":"_script_triggers.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#_utility_sharednut","title":"_utility_shared.nut:","text":""},{"location":"Modding/reference/respawn/callbacks/#_utilitygnut","title":"_utility.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#sh_loadoutsnut","title":"sh_loadouts.nut:","text":""},{"location":"Modding/reference/respawn/callbacks/#ai_ai_marvin_facesgnut","title":"ai/_ai_marvin_faces.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#ai_ai_mortar_titansgnut","title":"ai/_ai_mortar_titans.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#ai_ai_nuke_titansgnut","title":"ai/_ai_nuke_titans.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#ai_ai_pilotsgnut","title":"ai/_ai_pilots.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#ai_ai_suicide_spectresgnut","title":"ai/_ai_suicide_spectres.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#earn_metersv_earn_metergnut","title":"earn_meter/sv_earn_meter.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#gamemodes_frontlinegnut","title":"gamemodes/_frontline.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#mp_base_gametypegnut","title":"mp/_base_gametype.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#mp_bleedoutgnut","title":"mp/_bleedout.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#mp_spawn_functionsnut","title":"mp/_spawn_functions.nut:","text":""},{"location":"Modding/reference/respawn/callbacks/#mp_spectre_racknut","title":"mp/_spectre_rack.nut:","text":""},{"location":"Modding/reference/respawn/callbacks/#mp_titan_tethergnut","title":"mp/_titan_tether.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#mp_vrnut","title":"mp/_vr.nut:","text":""},{"location":"Modding/reference/respawn/callbacks/#pilot_leechinggnut","title":"pilot/_leeching.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#pilot_ziplinegnut","title":"pilot/_zipline.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#rodeo_rodeo_titangnut","title":"rodeo/_rodeo_titan.gnut:","text":""},{"location":"Modding/reference/respawn/callbacks/#weapons_arc_cannonnut","title":"weapons/_arc_cannon.nut:","text":""},{"location":"Modding/reference/respawn/callbacks/#weapons_grenadenut","title":"weapons/_grenade.nut:","text":""},{"location":"Modding/reference/respawn/callbacks/#weapons_weapon_utilitynut","title":"weapons/_weapon_utility.nut:","text":""},{"location":"Modding/reference/respawn/damagehistory/","title":"Damage History","text":"<p>After a player receives damage it is stored by the game in an array of the following struct. The information in that struct is final and changing it does not affect the game.</p>"},{"location":"Modding/reference/respawn/damagehistory/#damagehistorystruct","title":"DamageHistoryStruct","text":"<p>Getting the info from the entity ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p> <p>You can get the damage history for any player entity with <code>player.e.recentDamageHistory</code>, this is of the type <code>array&lt;DamageHistoryStruct&gt;</code> and gets automatically updated by the game. The higher the index the older the <code>DamageHistoryStruct</code> is ( so to get the most recent struct you do <code>player.e.recentDamageHistory[ 0 ]</code> ).</p>"},{"location":"Modding/reference/respawn/damagehistory/#getter-functions","title":"Getter functions","text":"param entity player <p>The player you want the damage history from.</p> param float time <p>How old the damage history can be in seconds.</p> returns <p>All <code>DamageHistoryStruct</code> found in the given time frame.</p>"},{"location":"Modding/reference/respawn/damagehistory/#setter-functions","title":"Setter functions","text":"<p>Removes all <code>DamageHistoryStruct</code> in the time frame <code>time - maxTime</code></p> param entity player <p>The player you want to update the damage history from.</p> param float maxTime <p>How old the damage history can maximally be</p> param float time <p>How old the damage history can be in seconds.</p>"},{"location":"Modding/reference/respawn/damagehistory/#built-in-checks","title":"Built in Checks","text":"<p>Note</p> <p>Title</p> <p>Note :::</p> <p>::::</p>"},{"location":"Modding/reference/respawn/dialog/","title":"Dialogs","text":"<p>Dialogs are a way for a client to open a text window with up to 4 buttons.</p>"},{"location":"Modding/reference/respawn/dialog/#dialog-structs","title":"Dialog structs","text":"<p>All the data in the struct that can be changed.</p>"},{"location":"Modding/reference/respawn/dialog/#functions","title":"Functions","text":"<p>Shows the local player the dialog with the data from the struct.</p> param DialogData dialog <p>Instance of a DialogData struct</p> <p>Example</p> <pre><code>DialogData dialog\ndialog.message = \"Hello there\"\nOpenDialog( dialog )\n</code></pre> <p>Add one button to the given struct</p> param DialogData dialog <p>Instance of a DialogData struct</p> param string text <p>The Text that is shown on the button, supports some assets with <code>%ASSET PATH%</code></p> param void functionref() callback <p>Function that is executed when the button is pressed.</p> <p>Example</p> <pre><code>void function SendDialogWithButton()\n{\n    DialogData dialog\n    dialog.message = \"Hello there\"\n    AddDialogButton(dialog, \"Button 1 %%$r2_ui/menus/loadout_icons/primary_weapon/primary_kraber%%\", void function():() {\n        printt( \"pressed button 1\" )\n    })\n    OpenDialog( dialog )\n}\n</code></pre> <p>Adds a footer to the dialog struct</p> param DialogData dialog <p>Instance of a DialogData struct</p> param string text <p>The Text that is shown on the button, supports some assets with <code>%ASSET PATH%</code></p> param DialogData dialog <p>Instance of a DialogData struct</p> returns <p><code>true</code> if the dialog with that struct is currently open, otherwise it returns <code>false</code></p> param string errorDetails <p>User facing information about the error</p>"},{"location":"Modding/reference/respawn/dialog/#code-example","title":"Code example","text":"<p>the folowing code produces this output:</p> <pre><code>DialogData dialog\ndialog.header = \"This is the header\"\ndialog.message = \"this is the body, it is green \\n \\n Hello There \\n \\n General Kenobi\"\ndialog.messageColor = [0,200,0,100]\ndialog.showSpinner = true\ndialog.showPCBackButton = true\nAddDialogButton( dialog, \"Button 1 %%$r2_ui/menus/loadout_icons/primary_weapon/primary_kraber%%\", ButtonOnePressed )\nOpenDialog( dialog )\n</code></pre>"},{"location":"Modding/reference/respawn/entities/","title":"Entities","text":"<p>There are different Classes for Server and Client. Classes that start with <code>C_</code> are exclusive to the Client VM and classes that only have the <code>C</code> Prefix are only usable in the Server VM.</p> <p>Most entries have three sub entries: The class available to the SERVER, the CLIENT and methods that are available on both VMs.</p> <p>For a graphic reprasentation of the Server and Client class inheritance, refer to this chart</p> <p>Note</p> <p>Pay attention to the <code>extends</code> keyword for each class! You can use every property of that the parent class has access to!</p> <p>This List of Classes and their Methods is incomplete! ::::</p>"},{"location":"Modding/reference/respawn/entities/#cbaseentity-c_baseentity","title":"CBaseEntity / C_BaseEntity","text":"<p>Basic entity that most other entities inherit from.</p>"},{"location":"Modding/reference/respawn/entities/#shared","title":"Shared","text":"<p>Hides the ent. (invisible)</p> <p>Shows the ent. (visible)</p> <p>Destroys this entity.</p> <p><code>../../native/async</code> </p> <p>Signals on this entity</p> <p>Ends this thread when the identifier is signaled on this entity</p> <p>Halts this thread until a signal is activated for this entity</p> <p>Executes the callback function when the signal is fired.</p> <p>Disconnects the callback from the signal.</p> <p>Connects an output on this entity to an input on another entity via code. The <code>target</code> can be a name or a named entity.</p> <p>Returns the Coordinates of this entity</p> <p>Returns the direction this entity is facing to</p> <p>Returns the position of this entities eyes</p> <p>Returns the owner of this entity. Set the owner with <code>SetOwner</code></p> <p>Internal class name of the parent class. May return the identifier name for some classes</p> <p>Returns <code>true</code> if this entity is an NPC</p> <p>Returns <code>true</code> if this entity is a Titan</p> <p>Returns true if this entity is a gameplay-wise a human.</p> <p>For example, returns <code>true</code> if the entity is a grunt but <code>false</code> if the entity is a Titan or spectre etc.</p> <p>However, players will always be Human, even when they are spectating or their playermodel is robotic (for example when playing as stim)</p> <p>Returns <code>true</code> if this entity is mechanical. Examples are Titans and spectres</p> <p>Note</p> <p>This returns <code>true</code> for players that are playing mechanical classes ::::</p> <p>Returns <code>true</code> if this entity is currently phase shifting</p> <p>Returns <code>true</code> if this entity is a player</p> <p>Returns <code>true</code> if this entity is a projectile</p> <p>Returns the asset this entity is being rendered with</p> <p>Binds this entity to the parent. The child inherits the position and rotation of the parent</p> <p>Make this entity independent from its parent</p> <p>Returns this entities parent</p> <p>Set the model of this entity.</p> <p>Similar to <code>SetValueForModelKey</code> but for FX.</p> <p>Returns <code>0</code> for light armor and <code>1</code> for heavy armor</p> <p>Titans use heavy armor while pilots and similar use light armor</p> <p>Returns the max health of this entity</p> <p>Returns the current health</p> <p>Returns the current shield health</p> <p>Returns the maximum shield health of this entity</p> <p>Returns <code>true</code> if this entity has gib models</p> <p>Set the position of this entity</p> <p>Returns the team of this entity</p> <p>Returns the rotation of this entity</p> <p>Set the rotation of this entity</p> <p>The same as <code>GetValueForKey</code></p> <p>The same as <code>SetValueForKey</code></p> <p>Returns the velocity of this entity</p> <p>Kill this entity: this function is deprecated because it has a one-frame delay; instead, call ent.Destroy()</p> <p>returns <code>true</code> if this entity is invulnerable</p> <p>Returns the index of this entity</p> <p>Set the team for this entity</p> <p>Skins based on team do not get updated. Use [SetSkin] for this</p> <p>Returns <code>true</code> if this entity is cloaked</p> <p>Returns <code>true</code> if this entity is alive</p> <p>Returns <code>true</code> if this entity is Valid.</p> <p><code>IsValid( ent )</code> is a good alternative</p> <p>Returns a normalized vector pointing forwards away from this entity.</p> <p>Returns a normalized vector pointing to the right of this entity.</p> <p>Returns a normalized vector pointing upwards from this entity.</p> <p>Depends on the class.</p> <p>Returns a new instance of a class.</p> <p>You can invoke the constructor with brackets as well, for example like this: <code>CBaseEntity()</code></p> <p>Allow or disallow this entity to cloak itself</p> <p>Returns <code>true</code> if this entity can\\'t be critted.</p> <p>Returns <code>true</code> if this entity is a hologram</p> <p>Returns <code>true</code> if this entity is touching the ground</p> <p>Set the model this entity is being rendered with</p> <p>Returns the script name of this entity.</p> <p>Set the script name of this entity.</p> <p>Returns <code>true</code> if this entity is breakable glass</p> <p>Returns <code>true</code>`if this entity is the gameworld</p> <p>Returns <code>true</code> if this entity is a decoy</p> <p><code>DAMAGE_NO</code>, <code>DAMAGE_YES</code>, <code>DAMAGE_EVENTS_ONLY</code></p> <p>Set if this entity takes crit damage.</p> <p>Set the velocity of this entity.</p> <p>Always render this entity</p> <p>Disable always rendering this entity</p> <p>Sets the distance between a player and the entity at which the ent will begin to fade out.</p> <p>Disable all physics for this entity</p>"},{"location":"Modding/reference/respawn/entities/#cbaseentity","title":"CBaseEntity","text":"<p>Set current health of this entity</p> <p>Set max health of this entity</p> <p>Set the owner of this entity</p> <p>Kill this entity in the game sense - all callbacks and signals get triggered</p> <p>Returns <code>false</code> if this entity is solid</p> <p>Moves this entity to <code>pos</code> over the duration of <code>moveTime</code> with ease in and ease out</p> <p>Note</p> <p>Entites that are not movers get teleported instantly ::::</p> <p>Rotate to the specified angles over time with ease in and ease out.</p> <p>Make this entity vulnerable again</p> <p>Make this entity invulnerable</p> <p>Trigger AI now</p> <p>Make this entity usable</p> <p>Make this entity usable only for a specific group</p> <p>Set the radius in which this entity can be interacted with</p> <p>Make this entity unusable</p> <p>Make this entity solid</p> <p>Fire an output on this entity, with optional parm and delay</p> <p>Fire an output on this entity, with optional parm and delay (synchronous)</p> <p>Trigger cloak flicker effect</p> <p>Make this entity invisible</p> <p>Make this entity visible</p> <p>Set if this entity can be attacked by AI</p> <p>Remove boss player reference from this entity.</p> <p>Prints ent index, classname and target name of this entity to the console.</p> <p>\\\"consider this the mega hide\\\"</p> <p>\\\"it\\'s back!\\\"</p> <p>this is a general purpose function that returns a string which, when executed, runs the given function on this entity.</p> <p>the function must be called (or the entity deleted) at some point to avoid leaking the new slot we make in this Table.</p> <p>compile with output with <code>compilestring</code></p>"},{"location":"Modding/reference/respawn/entities/#c_baseentity","title":"C_BaseEntity","text":"<p>Kill this client side prop.</p> <p>Starts the highlight with the set configuration</p> <p>Returns the EHandle of this entity.</p> <p>Hide HUD elements</p> <p>Show HUD elements</p> <p>Return <code>true</code> if HUD is shown on this entity</p>"},{"location":"Modding/reference/respawn/entities/#cdynamicprop-c_dynamicprop","title":"CDynamicProp / C_DynamicProp","text":""},{"location":"Modding/reference/respawn/entities/#shared_1","title":"Shared","text":""},{"location":"Modding/reference/respawn/entities/#cdynamicprop","title":"CDynamicProp","text":""},{"location":"Modding/reference/respawn/entities/#c_dynamicprop","title":"C_DynamicProp","text":"<p>CScriptProp / C_ScriptProp -----------</p>"},{"location":"Modding/reference/respawn/entities/#shared_2","title":"Shared","text":""},{"location":"Modding/reference/respawn/entities/#cscriptprop","title":"CScriptProp","text":""},{"location":"Modding/reference/respawn/entities/#c_scriptprop","title":"C_ScriptProp","text":""},{"location":"Modding/reference/respawn/entities/#cbasecombatweapon-c_basecombatweapon","title":"CBaseCombatWeapon / C_BaseCombatWeapon","text":""},{"location":"Modding/reference/respawn/entities/#shared_3","title":"Shared","text":"<p>Returns the weapon description</p>"},{"location":"Modding/reference/respawn/entities/#cbasecombatweapon","title":"CBaseCombatWeapon","text":""},{"location":"Modding/reference/respawn/entities/#c_basecombatweapon","title":"C_BaseCombatWeapon","text":""},{"location":"Modding/reference/respawn/entities/#cweaponx-c_weaponx","title":"CWeaponX / C_WeaponX","text":"<p>Weapons hold by a player or that are lying on the ground are of this type.</p>"},{"location":"Modding/reference/respawn/entities/#shared_4","title":"Shared","text":"<p>Returns the owner of this weapon</p> <p>Returns <code>true</code> if this weapon can deal crits</p> <p>Returns the max damage at the maximum travel distance</p> <p>Get a weapon setting</p> <p>Get a weapon setting</p> <p>Get a weapon setting</p> <p>Return the amount of ammo in a weapon</p> <p>Returns the amount of clips remaining in a weapon</p> <p>Returns the maximum ammo in a clip of a primary weapon</p> <p>Returns <code>true</code> if this weapon is a charge weapon</p> <p>You need to set a game time as time.</p> <p>Returns the weapon class name</p> <p>Get all mods of this weapon</p> <p>Returns <code>true</code> if this weapon is equipped as a offhand weapon</p> <p>Returns the percent this weapon has been charged</p> <p>Returns the time this weapon needs to be charged</p> <p>Check if the array of mods for this weapon contains <code>mod</code></p> <p>Returns the amount of energy consumed per use.</p> <p>Set the mods this weapon.</p> <p>Returns a bitflag of damage types this weapon has.</p> <p>Returns script flags of this weapon.</p> <p>Returns <code>true</code> if clients should be predicting the projectiles fired from this weapon.</p> <p>Returns the script time of this weapon.</p> <p><code>gameTime</code> needs to be game time. The current game time can be retrieved with <code>Time()</code></p> <p>Returns <code>true</code> if this weapon is currently being reloaded.</p> <p>Force the holder to ADS this weapon.</p> <p>Allow the holder to hipfire.</p> <p>Set the ammo of a primary weapon.</p> <p>Stops the effects.</p> <p>Reload progress. Reloading continues from there.</p> <p>Returns the amount of ammo that is being used per shot.</p> <p>Allow entities to use the weapon.</p> <p>Remove the passed mod from this weapon.</p> <p>Play a sound on this weapon.</p> <p>Returns <code>true</code> if this weapon is in ADS.</p> <p>Reset the amount of energy consumed per use</p> <p>Set the amount of energy consumed per use.</p> <p>Fires a hitscan bullet from this weapon.</p> <p>Returns <code>true</code> while the ADS button is pressed.</p> <p>Returns <code>true</code> if the weapon can be fired.</p> <p>Add a mod to this weapon</p> <p>Check if weaponType is valid: <code>Assert( weaponType in VALID_WEAPON_TYPES )</code></p> <p>Note that fuse time of 0 means the grenade won\\'t explode on its own, instead it depends on OnProjectileCollision() functions to be defined and explode there.</p>"},{"location":"Modding/reference/respawn/entities/#cweaponx","title":"CWeaponX","text":"<p>Force this weapon to dry fire</p> <p>Play an effect on the weapon owner</p> <p>Will eventually result in <code>Grenade_OnWeaponToss_()</code> or equivalent function</p> <p>returns <code>true</code> if this weapon has been forced to be released</p>"},{"location":"Modding/reference/respawn/entities/#c_weaponx","title":"C_WeaponX","text":"<p>the second asset is probably the third person effect played.</p> <p><code>index</code> may be the number of rounds in the clip etc.</p>"},{"location":"Modding/reference/respawn/entities/#cprojectile-c_projectile","title":"CProjectile / C_Projectile","text":"<p>Projectiles.</p>"},{"location":"Modding/reference/respawn/entities/#shared_5","title":"Shared","text":"<p>Returns an array of every mod this projectile has equipped</p> <p>Set the projectile trail by index</p> <p>Set the time after which this projectile gets destroyed programmatically</p> <p>Only use reduced effects for this projectile</p> <p>Tells the code that the projectile was refired from the vortex so that it uses \\\"projectile_vortex_vscript\\\"</p> <p>Get the gametime when this projectile has been created</p>"},{"location":"Modding/reference/respawn/entities/#cprojectile","title":"CProjectile","text":""},{"location":"Modding/reference/respawn/entities/#c_projectile","title":"C_Projectile","text":""},{"location":"Modding/reference/respawn/entities/#cbasegrenade-c_basegrenade","title":"CBaseGrenade / C_BaseGrenade","text":"<p>Grenade entities in worldspace. Grenades that are equipped (\\\"cooked\\\") by players are instances from the CWeaponX class.</p>"},{"location":"Modding/reference/respawn/entities/#shared_6","title":"Shared","text":"<p>Get the damage radius</p> <p>Get the explosion radius</p> <p>Explode this grenade now</p> <p>Get the entity that has thrown this grenade</p> <p>Returns <code>true</code> if this grenade has already been ignited</p>"},{"location":"Modding/reference/respawn/entities/#cbasegrenade","title":"CBaseGrenade","text":"<p>Set fuse time for this grenade</p> <p>Set the ignition duration for this grenade</p>"},{"location":"Modding/reference/respawn/entities/#c_basegrenade","title":"C_BaseGrenade","text":""},{"location":"Modding/reference/respawn/entities/#cmissile-c_missile","title":"CMissile / C_Missile","text":""},{"location":"Modding/reference/respawn/entities/#shared_7","title":"Shared","text":"<p>Make this missile explode now</p> <p>If both <code>slowAndExpand</code> and <code>consistentSpacing</code> are true, missiles fly faster instead of normal <code>slowAndExpand</code> behavior.</p>"},{"location":"Modding/reference/respawn/entities/#cmissile","title":"CMissile","text":""},{"location":"Modding/reference/respawn/entities/#c_missile","title":"C_Missile","text":""},{"location":"Modding/reference/respawn/entities/#cplayer-c_player","title":"CPlayer / C_Player","text":""},{"location":"Modding/reference/respawn/entities/#shared_8","title":"Shared","text":"<p>Returns the gen of the player account.</p> <p>Returns the level of the player account.</p> <p>Returns the xp of the player account.</p> <p>Returns <code>true</code> if the player is currently lunging to a melee victim.</p> <p>Returns the player account name</p> <p>Returns the score of the player in the provided category. some categories are: PGS_KILLS, PGS_DEATHS, PGS_SCORE etc.</p> <p>Returns the soul of the player\\'s autotitan.</p> <p>Returns the index of the selected burn card.</p> <p>Use <code>GetActiveBurnCardIndex</code> instead</p> <p>Returns the angles of this player\\'s camera.</p> <p>Returns <code>true</code> if the player is wall hanging.</p> <p>Returns <code>true</code> if the player is crouching.</p> <p>Returns <code>true</code> if the player is standing</p> <p>Returns <code>true</code> if the player is wallrunning.</p> <p>Returns <code>true</code> if the player is currently attached to a zipline</p> <p>Returns the camera position of this player.</p> <p>Y Axis</p> <p>X Axis</p> <p>Holsters this weapon. The player can\\'t use it until it\\'s deployed again with <code>DeployWeapon</code></p> <p>May not work with <code>DeployAndEnableWeapons()</code> and <code>HolsterAndDisableWeapons()</code></p> <p>Returns the fractal of the current weapon zoom. 1.0 is fully zoomed in.</p>"},{"location":"Modding/reference/respawn/entities/#cplayer","title":"CPlayer","text":"<p>Force this player to stand up</p> <p>Allow crouching</p> <p>Decoy Types: <code>pt_mp_execution_attacker_hologram_01</code>, <code>pt_mp_execution_attacker_hologram_02</code>, <code>pt_mp_execution_attacker_hologram_03</code></p> <p>Force this player to crouch.</p> <p>Allow this player to stand.</p> <p>Returns <code>true</code> if noclip is enabled.</p> <p>Allows the player to double jump again.</p>"},{"location":"Modding/reference/respawn/entities/#c_player","title":"C_Player","text":"<p>Executes a command on the player\\'s client. For a server to execute a console command on a client, the client has to launch the game with the <code>norestrictservercommands</code> launch argument for security reasons.</p> <p>If called without paramets returns time for the player\\'s titan drop.</p> <p>play a jolt effect on the player</p> <p>Disable showing crosshair names of entities when aiming at them.</p> <p>Enable showing crosshair names of entities when aiming at them. (default)</p> <p>Stop player input.</p>"},{"location":"Modding/reference/respawn/entities/#ctitansoul-c_titansoul","title":"CTitanSoul / C_TitanSoul","text":""},{"location":"Modding/reference/respawn/entities/#shared_9","title":"Shared","text":"<p>Returns <code>true</code> if this soul is in doomed state</p> <p>Returns an instance of <code>CNPC_Titan</code></p>"},{"location":"Modding/reference/respawn/entities/#ctitansoul","title":"CTitanSoul","text":""},{"location":"Modding/reference/respawn/entities/#c_titansoul","title":"C_TitanSoul","text":""},{"location":"Modding/reference/respawn/entities/#cbasecombatcharacter-c_basecombatcharacter","title":"CBaseCombatCharacter / C_BaseCombatCharacter","text":""},{"location":"Modding/reference/respawn/entities/#shared_10","title":"Shared","text":"<p>Returns the first rodeo rider found or null if there are none.</p> <p>Returns number of rodeo slots available on this entity.</p> <p>Returns rodeo rider (if there is one) at the given slot.</p>"},{"location":"Modding/reference/respawn/entities/#cbasecombatcharacter","title":"CBaseCombatCharacter","text":"<p>Looks for \\\"headshotFX\\\" in an AI settings file or a player set file</p> <p>Sets the maximum number of rodeo slots available on this entity.</p> <p>Sets the rodeo rider at the given slot</p>"},{"location":"Modding/reference/respawn/entities/#c_basecombatcharacter","title":"C_BaseCombatCharacter","text":""},{"location":"Modding/reference/respawn/entities/#cai_basenpc-c_ai_basenpc","title":"CAI_BaseNPC / C_AI_BaseNPC","text":""},{"location":"Modding/reference/respawn/entities/#shared_11","title":"Shared","text":"<p>Expect as string</p> <p><code>AIC_SMALL_TURRET</code>, <code>AIC_MARVIN</code>, <code>AIC_SPECTRE</code>, <code>AIC_STALKER_CRAWLING</code>, <code>AIC_FRAG_DRONE</code>, <code>AIC_HUMAN</code></p> <p>get the current flying speed of the npc.</p>"},{"location":"Modding/reference/respawn/entities/#cai_basenpc","title":"CAI_BaseNPC","text":"<p>Possible behaviours: <code>Follow</code>, <code>Assault</code></p> <p>Clears the enemy of this npc.</p> <p>Sets the enemy this npc will attack.</p> <p>Max pilot engagement distance</p> <p>Max titan engagement distance</p> <p>Sets if a capability is available to the player</p> <p>Returns <code>true</code> if the npc can see the <code>ent</code>.</p> <p>Freezes all animations and movement of this entity.</p> <p>unfreezes all animations and movement of this entity.</p> <p>Returns if <code>this.supportsXRay</code> not null.</p> <p>Force into combat state by updating NPC\\'s memory of the player.</p> <p>Returns true if NPC is in combat.</p>"},{"location":"Modding/reference/respawn/entities/#c_ai_basenpc","title":"C_AI_BaseNPC","text":""},{"location":"Modding/reference/respawn/entities/#cnpc_titan-c_npc_titan","title":"CNPC_Titan / C_NPC_Titan","text":""},{"location":"Modding/reference/respawn/entities/#shared_12","title":"Shared","text":""},{"location":"Modding/reference/respawn/entities/#cnpc_titan","title":"CNPC_Titan","text":""},{"location":"Modding/reference/respawn/entities/#c_npc_titan","title":"C_NPC_Titan","text":""},{"location":"Modding/reference/respawn/entities/#cnpc_dropship-c_npc_dropship","title":"CNPC_Dropship / C_NPC_Dropship","text":""},{"location":"Modding/reference/respawn/entities/#shared_13","title":"Shared","text":""},{"location":"Modding/reference/respawn/entities/#cnpc_dropship","title":"CNPC_Dropship","text":""},{"location":"Modding/reference/respawn/entities/#c_npc_dropship","title":"C_NPC_Dropship","text":""},{"location":"Modding/reference/respawn/entities/#cnpc_drone","title":"CNPC_Drone","text":"<p>Set to <code>false</code> to not attack enemies.</p> <p>CNPC_SentryTurret / C_NPC_SentryTurret</p>"},{"location":"Modding/reference/respawn/entities/#shared_14","title":"Shared","text":""},{"location":"Modding/reference/respawn/entities/#cnpc_sentryturret","title":"CNPC_SentryTurret","text":""},{"location":"Modding/reference/respawn/entities/#c_npc_sentryturret","title":"C_NPC_SentryTurret","text":""},{"location":"Modding/reference/respawn/entities/#cfirstpersonproxy-c_firstpersonproxy","title":"CFirstPersonProxy / C_FirstPersonProxy","text":""},{"location":"Modding/reference/respawn/entities/#shared_15","title":"Shared","text":""},{"location":"Modding/reference/respawn/entities/#cfirstpersonproxy","title":"CFirstPersonProxy","text":""},{"location":"Modding/reference/respawn/entities/#c_firstpersonproxy","title":"C_FirstPersonProxy","text":""},{"location":"Modding/reference/respawn/entities/#cbaseanimating-c_baseanimating","title":"CBaseAnimating / C_BaseAnimating","text":""},{"location":"Modding/reference/respawn/entities/#shared_16","title":"Shared","text":""},{"location":"Modding/reference/respawn/entities/#cbaseanimating","title":"CBaseAnimating","text":""},{"location":"Modding/reference/respawn/entities/#c_baseanimating","title":"C_BaseAnimating","text":""},{"location":"Modding/reference/respawn/entities/#cplayerdecoy-c_playerdecoy","title":"CPlayerDecoy / C_PlayerDecoy","text":""},{"location":"Modding/reference/respawn/entities/#shared_17","title":"Shared","text":""},{"location":"Modding/reference/respawn/entities/#cplayerdecoy","title":"CPlayerDecoy","text":"<p>Dissolve this decoy. You might want to clear decoy fx with <code>CleanupFXAndSoundsForDecoy( entity decoy )</code> afterwards.</p> <p>Set the time after which the decoy gets automatically dissolved.</p> <p>Sets if friendly fire is enabled for this decoy.</p> <p>Sets if this decoy gets killed when colliding with props or geometry.</p>"},{"location":"Modding/reference/respawn/entities/#c_playerdecoy","title":"C_PlayerDecoy","text":""},{"location":"Modding/reference/respawn/entities/#cturret","title":"CTurret","text":""},{"location":"Modding/reference/respawn/entities/#c_titan_cockpit","title":"C_Titan_Cockpit","text":"<p>Returns the total time of time spent in this cockpit.</p> <p>Cockpit booting takes 1.3 seconds, so anything less than 1.3 seconds is still playing the booting animation. You can use <code>TitanCockpit_IsBooting( entity cockpit )</code> to determine this state.</p>"},{"location":"Modding/reference/respawn/entities/#cparticlesystem","title":"CParticleSystem","text":""},{"location":"Modding/reference/respawn/entities/#cvortexsphere-c_vortexsphere","title":"CVortexSphere / C_VortexSphere","text":""},{"location":"Modding/reference/respawn/entities/#shared_18","title":"Shared","text":""},{"location":"Modding/reference/respawn/entities/#cvortexsphere","title":"CVortexSphere","text":""},{"location":"Modding/reference/respawn/entities/#c_vortexsphere","title":"C_VortexSphere","text":""},{"location":"Modding/reference/respawn/entities/#cenvexplosion","title":"CEnvExplosion","text":""},{"location":"Modding/reference/respawn/hud_element_notation/","title":"Hud element notation","text":"<p>Elements are notated as VDF</p> <p>UI elements are created when a menu is initialized. References to the elements will stay the same, regardless if the menu is open or not.</p> <p>It is not possible to create elements at runtime so you have to define all elements a menu or panel contains beforehand in appropriate files.</p> <p>An Element is declared in the following way:</p> <pre><code>// please follow this structure\nElementName\n{\n    ControlName name\n    // optional: classname, inheritance, ids ...\n\n    // optional: other properties\n\n    // optional: pinning\n}\n</code></pre> <p>If you\\'re working on a menu, you need a <code>menu</code> object that contains all elements, for example like this:</p> <pre><code>resource/ui/menus/profiles_menu.menu\n{\n    menu\n    {\n        ControlName Frame\n        xpos 0\n        ypos 0\n        zpos 3\n        wide f0\n        tall f0\n        autoResize 0\n        visible 1\n        enabled 1\n        pinCorner 0\n        PaintBackgroundType 0\n        infocus_bgcolor_override \"0 0 0 0\"\n        outoffocus_bgcolor_override \"0 0 0 0\"\n\n        // elements\n    }\n}\n</code></pre> <p>It usually doesn\\'t matter if you use quotation marks to assign string values to parameters.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#hud-panel-files","title":"HUD &amp; Panel files","text":"<p>The first line of a <code>.menu</code> or <code>.res</code> file needs to be the resource path to itself, starting from the resource folder.</p> <p>It\\'s not possible to load other files as menus or panels. A <code>.menu</code> represents an independant menu of the game, while <code>.res</code> files are \\\"Panels\\\" that can be loaded from other elements.</p> <p>The rest of the file needs to be wrapped in curly brackets.</p> <pre><code>resource/ui/menus/more/folders/my_menu.menu\n{\n    MyObject\n    {\n        // object properties go here\n    }\n\n    // more objects ...\n}\n</code></pre>"},{"location":"Modding/reference/respawn/hud_element_notation/#properties","title":"Properties","text":"<p>Capitalization of the properties shouldn\\'t matter.</p> <p>This isn\\'t a regular property and comes before the opening bracket</p> <p>Unique string identifier used in scripts to look up an element. Every element is required to have a name.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#inheritance-parenting","title":"Inheritance / Parenting","text":"<p>Controls what type of Component the element is and what parameters have an effect. Every element is required to have control name.</p> <p>Load a <code>.res</code> file. All elements in the settings file are instantiated and set as children of the element.</p> <p><code>Hud_GetChild</code> only works if the parent element is (has the <code>ControlName</code>) a CNestedPanel!</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#identifying","title":"Identifying","text":"<p>Classname used for identifying groups of elements</p> <p>Set an unique integer id for this element that\\'s retrievable in script.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#position","title":"Position","text":"<p>Set the base x position relative to the element\\'s sibling position.</p> <p>inverted when attached to the left corner or smth</p> <p>Set the base y position relative to the element\\'s sibling position.</p> <p>inverted when attached to the top corner or smth</p> <p>The layer this element sits in. Elements with a higher z will be prioritized to be selected / focused. They are also drawn on top of elements with a lower z position.</p> <p>Dimensions ^^^^</p> <p>Set the base width of this element.</p> <p>Set the base height of this element.</p> <p>Float that scales the element.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#text","title":"Text","text":"<p>Set the label text of this element, if it is a Label.</p> <p>Controls the element boundary point the element\\'s text gets aligned with. <code>east</code> -&gt; Left, <code>north</code> -&gt; Top, <code>west</code> -&gt; Right, <code>south</code> Bottom.</p> <p>You can also combine the directions like this: <code>north-west</code>.</p> <p>Controls if the text of this element is rendered in all caps. Defaults to 0.</p> <p>Set the text font of this element.</p> <p>don\\'t wrape text</p> <p>wrap text from east</p> <p>wrap text from center</p> <p>Set if the text input supports multiline input.</p> <p>Pinning ^^^^</p> <p>Controls the sibling this element will be pinned to. Takes an element\\'s name as a parameter.</p> <p>Sets which corner of this element is pinned to the sibling.</p> <p>Set to which corner of the sibling this element is pinned to.</p>"},{"location":"Modding/reference/respawn/hud_element_notation/#rui","title":"Rui","text":"<p>Images ^^^^</p> <p>vgui asset to render</p> <p>apply this color on top. Format is \\\"r g b a\\\".</p> <p>Fill transparent pixels with this color. Format is \\\"r g b a\\\"</p> <p>Navigation ^^^^</p> <p>Slider ^^^^</p> <p>Other ^^^^</p> <p>Controls if this element is rendered. Defaults to 1.</p> <p>Controls if this element starts enabled. Defaults to 1.</p> <p>Controls if this element is enabled. Only enabled elements can be focused / selected. Defaults to 1.</p> <p>// 0 for normal(opaque), 1 for single texture from Texture1, and 2 for rounded box w/ four corner textures</p> <p>Conditional Properties ~~~~</p> <p>You can declare properties for specific conditions by adding <code>[CONDITION]</code> after the property value.</p> <p>When putting a condition after an element\\'s name, the element will only be created if the condition evaluates to true.</p> <p>Usable conditions are:</p> <p>game is running on 32 bit windows</p> <p>game is running on windows</p> <p>game is running on xbox</p> <p>game is running on a PS4</p> <p>game resolution is 16/9</p> <p>the game\\'s language.</p> <pre><code>// use allcaps only in russian\nallCaps                 0   [!$RUSSIAN]\nallCaps                 1   [$RUSSIAN]\n</code></pre> <p>On top of that, logical operators like <code>!</code>, <code>&amp;&amp;</code> and <code>||</code> are available as well.</p> <p>Example: ^^^^</p> <pre><code>// This element only shows on pc\nIngameTextChat [$WINDOWS]\n{\n    ControlName             CBaseHudChat\n    InheritProperties       ChatBox\n\n    destination             \"match\"\n\n    visible                 0\n\n    pin_to_sibling          Screen\n    pin_corner_to_sibling   TOP_LEFT\n    pin_to_sibling_corner   TOP_LEFT\n    xpos                    -45\n    ypos                    -616\n}\n\n// This element has different widths depending on the game resolution\nLoadingTip\n{\n    ControlName             Label\n    ypos                    10\n    wide                    1630 [$WIDESCREEN_16_9]\n    wide                    1441 [!$WIDESCREEN_16_9]\n    auto_tall_tocontents    1\n    labelText               \"\"\n    textalign               \"north-west\"\n    font                    Default_28\n    wrap                    1\n    fgcolor_override        \"217 170 75 255\"\n    visible                 0\n\n    pin_to_sibling          LoadingGameMode\n    pin_corner_to_sibling   TOP_LEFT\n    pin_to_sibling_corner   BOTTOM_LEFT\n}\n</code></pre> <p>Pinning ~~~~</p> <p>The calculated center of the element</p> <p>Element\\'s top y bounds, x axis center.</p> <p>Element\\'s lowest y bounds, x axis center.</p> <p>Element\\'s lowest x bounds, y axis center.</p> <p>Element\\'s highest x bounds, y axis center.</p> <p>Top left corner</p> <p>Top right corner</p> <p>Bottom left corner</p> <p>Bottom right corner</p> <p>Units ~~~~</p> <p>You can calculate the position or dimensions etc. with different units. If you provide no extra unit, the game uses pixels.</p> <p>x percent of the screen.</p> <p>// cover the entire screen width %100 height %100</p> <p>use 100%</p> <p>something with the screen edges not exactly sure how positions get calculated</p> <p>Including KeyValues ~~~~</p> <p>To include another KeyValue file, use <code>#base \"filepath\"</code> at the top of a VDF file.</p>"},{"location":"Modding/reference/respawn/hud_menus/","title":"Hud menus","text":"<p>HUD Menus ====</p> <p>Before working on HUD, it\\'s recommended to extract the <code>englishclient_frontend.bsp.pak000_dir.vpk</code> vpk. This file contains all vanilla menus and UI logic and will be a very helpful reference!</p> <p>Registering a menu ----</p> <p>In your <code>mod.json</code>, add a <code>Before</code> UI callback like this:</p> <pre><code>{\n    \"Path\": \"ui/profiles_menu.nut\",\n    \"RunOn\": \"UI\",\n    \"UICallback\": {\n        \"Before\": \"InitProfilesMenu\",\n    }\n}\n</code></pre> <p>In the script you referenced, create a global in which you register your menu with the <code>AddMenu</code> like this:</p> <pre><code>global function InitProfilesMenu\n\nvoid function InitProfilesMenu()\n{\n    AddMenu( \"MenuName\", $\"path/to/menu.menu\"  )\n}\n</code></pre> <p>If you want to, you can add a init to <code>AddMenu</code> like this: <code>AddMenu( \"MenuName\", $\"path/to/menu.menu\", func )</code></p> <p>The returns <code>void</code> and takes no parameters. It gets called once the menu is initialized.</p> <p>It\\'s recommended to create a file struct in which you store menu states:</p> <pre><code>struct {\n    var menu\n} file\n\nvoid function MenuInitCallback()\n{\n    file.menu = GetMenu( \"MenuName\" )\n}\n</code></pre> <p>Registering a Submenu ----</p> <p>Menu Functions ^^^^</p> <p>Useless functions have been left out. From <code>_menus.nut</code></p> <p>Register Menus ~~~~</p> <p>Register a normal HUD menu. The init function will be called once all menus are registered and created.</p> <p>Registers a normal HUD menu with a custom function to create the menu. The create function needs to be native since scripts can\\'t create HUD elements.</p> <p>Open Menus ~~~~</p> <p>Push a menu to the stack / open a menu</p> <p>if <code>updateMenuPos</code> is not <code>null</code>, the menu is required to have a <code>ButtonFrame</code> element that is the main content reference.</p> <p>Retrieve Menus ~~~~</p> <p>Get the menu reference</p> <p>Close Menus ~~~~~</p> <p>Close until the menu is the most recent opened.</p> <p>Callbacks ~~~~</p> <p>Accepted events:</p> <ul> <li><code>eUIEvent.MENU_OPEN</code></li> <li><code>eUIEvent.MENU_CLOSE</code></li> <li><code>eUIEvent.MENU_SHOW</code></li> <li><code>eUIEvent.MENU_HIDE</code></li> <li><code>eUIEvent.MENU_NAVIGATE_BACK</code></li> <li><code>eUIEvent.MENU_TAB_CHANGED</code></li> <li><code>eUIEvent.MENU_ENTITLEMENTS_CHANGED</code></li> <li><code>eUIEvent.MENU_INPUT_MODE_CHANGED</code></li> </ul> <p>Accepted events:</p> <ul> <li><code>eUIEvent.PANEL_SHOW</code></li> <li><code>eUIEvent.PANEL_HIDE</code></li> </ul> <p>Add an event handler to an element.</p> <p>If you have a reference to the element, use <code>Hud_AddEventHandler</code></p> <p>Add a event handler for every element of a class</p> <p>Get the last openend menu that isn\\'t a dialog</p> <p>Returns <code>true</code> if the menu is a dialog.</p> <p>Submenus ~~~~</p> <p>Not recommended to use.</p> <p>Other ~~~~</p> <p>Debugging</p> <p>Set the default focus element to be focused</p> <p>Like <code>FocusDefaultMenuItem</code> but excludes some menus.</p> <p>Footers ^^^^</p> <p>To use footers, add this element to your menu:</p> <pre><code>FooterButtons\n{\n    ControlName         CNestedPanel\n    InheritProperties   FooterButtons\n}\n</code></pre> <p>Adds a footer to a menu.</p> <p>Adds a footer to a panel</p> <p>Update the footers of the active menu.</p> <p>Change the text of a specific footer.</p>"},{"location":"Modding/reference/respawn/hud_script/","title":"HUD elements in Scripts","text":"<p>Script methods to manipulate hud elements.</p>"},{"location":"Modding/reference/respawn/hud_script/#element-tree-locating-elements","title":"Element Tree &amp; Locating Elements","text":"<p>Returns a reference to the menu the passed element is parented to</p> <p>Returns the next higher parent of the element</p> <p>Returns <code>true</code> if the element has a child named like <code>childName</code></p> <p>Returns the child element of the passed element named like <code>childName</code></p> <p>Returns all children that have the given class</p> <p>Returns the script ID of the element declared in the .menu file</p> <p>Returns the currently focused element.</p>"},{"location":"Modding/reference/respawn/hud_script/#element-position","title":"Element Position","text":"<p>Set the position of the element relative to the base position.</p> <p>Returns an array of type <code>int[2]</code> as a <code>var</code>. The position is relative to the element\\'s base position.</p> <p>Only change the x position relative to the base position.</p> <p>Only change the y position relative to the base position.</p> <p>Returns the x position of the element relative to it\\'s base position.</p> <p>Returns the y position of the element relative to it\\'s base position.</p> <p>Set the position of this element to it\\'s base position.</p> <p>Returns an orray of type <code>int[2]</code> as a <code>var</code>. Base position is always <code>[0,0]</code></p> <p>Returns the base x of this element.</p> <p>Returns the base y of this element.</p> <p>Returns an array of type <code>int[2]</code> as a <code>var</code>. Absolute coordinates on the screen of this element.</p> <p>Returns the absolute x position on the screen of this element.</p> <p>Returns the absolute y position of the screen of this element.</p> <p>Move to relative x over time with interpolation.</p> <ul> <li><code>INTERPOLATOR_LINEAR</code>: linear interpolation</li> <li><code>INTERPOLATOR_ACCEL</code>: move with accelerating speed</li> <li><code>INTERPOLATOR_DEACCEL</code>: move with deaccelerating speed</li> <li><code>INTERPOLATOR_PULSE</code>: one time bounce</li> <li><code>INTERPOLATOR_FLICKER</code>: no transition</li> <li><code>INTERPOLATOR_SIMPLESPLINE</code>: ease in / out</li> <li><code>INTERPOLATOR_BOUNCE</code>: gravitational bounce</li> </ul> <p>Move to relative y over time with interpolation</p> <p>Returns the angles of the element</p> <p>Set the angles of the element</p>"},{"location":"Modding/reference/respawn/hud_script/#visibility-color","title":"Visibility &amp; Color","text":"<p>Make this element visible</p> <p>Make this element invisible</p> <p>Returns <code>true</code> if the element is visible</p> <p>Set if the element is visible</p> <p>Set the color of the element</p> <p>Change the color of the element over time</p> <p>Change the color of the element over time</p> <p>Change the opacity of the element</p> <p>Change the opacity of the element over time</p> <p>Change the opacity of the element over time after a delay</p>"},{"location":"Modding/reference/respawn/hud_script/#element-dimensions","title":"Element Dimensions","text":"<p>Returns the current width of the element.</p> <p>Set the width of an element.</p> <p>Returns the width an element got initialized with.</p> <p>Returns the current height of an element.</p> <p>Set the heigth of an element.</p> <p>Returns the heigth an element got initialized with.</p> <p>Returns an array of type <code>int[2]</code> as a <code>var</code>. The first index is width and the second height of the element.</p> <p>Set width and height of the element.</p> <p>Returns the width and height values the element got initialized with as an array of type <code>int[2]</code> as <code>var</code>.</p> <p>Set the width and height of the element over time.</p> <p>The final width and height is calculated like this: <code>width * width_factor</code></p> <p>Set the width of the element calculated with a factor.</p> <p>Set the height of the element calculated with a factor.</p> <p>Return to base width and height</p>"},{"location":"Modding/reference/respawn/hud_script/#text","title":"Text","text":"<p>Set the text content of this element</p> <p>Returns the current text of the element. Useful for text inputs</p> <p>Set the text of an rui, if the element contains an rui that takes string input.</p>"},{"location":"Modding/reference/respawn/hud_script/#element-status","title":"Element Status","text":"<p>Returns <code>true</code> if the element is locked.</p> <p>Locked elements are visible, can be focused and selected but don\\'t trigger events and play a locked sound if they are selected</p> <p>Set this element locked status</p> <p>Returns <code>true</code> if the element is enabled</p> <p>Disabled elements are visible but can\\'t be focused or selected and don\\'t trigger events.</p> <p>Set this element to be enabled / disabled</p> <p>Returns <code>true</code> if this element is focused</p> <p>Focused elements will be selected when pressing enter</p> <p>Set the element to be focused</p> <p>Returns <code>true</code> if this element is selected</p> <p>Set this element to be selected / not unselected</p> <p>Select this element and all children</p> <p>Returns <code>true</code> if the element is a label</p>"},{"location":"Modding/reference/respawn/hud_script/#element-rui","title":"Element RUI","text":"<p>Returns <code>true</code> if this element can contain ruis</p> <p>Returns the rui instance of this element.</p>"},{"location":"Modding/reference/respawn/hud_script/#navigation","title":"Navigation","text":"<p>Set the element that will be selected when navigating up (arrow up) from this selected element.</p> <p>Set the element that will be selected when navigating up (arrow up) from this selected element.</p> <p>Set the element that will be selected when navigating left (arrow left) from this selected element.</p> <p>Set the element that will be selected when navigating right (arrow right) from this selected element.</p>"},{"location":"Modding/reference/respawn/hud_script/#events","title":"Events","text":"<p>Fire the specified event for the element</p> <p>Handle an event for the element</p> <p>Accepted events:</p> <ul> <li><code>UIE_CLICK</code></li> <li><code>UIE_GET_FOCUS</code></li> <li><code>UIE_LOSE_FOCUS</code></li> <li><code>UIE_CHANGE</code></li> </ul>"},{"location":"Modding/reference/respawn/hud_script/#other-visuals","title":"Other Visuals","text":"<p>Set the image displayed by the element, if the elements controlName allows for it.</p>"},{"location":"Modding/reference/respawn/hud_script/#slider","title":"Slider","text":""},{"location":"Modding/reference/respawn/hud_script/#graphs","title":"Graphs","text":""},{"location":"Modding/reference/respawn/hud_script/#client-settings","title":"Client Settings","text":""},{"location":"Modding/reference/respawn/hud_script/#uncategorized","title":"Uncategorized","text":""},{"location":"Modding/reference/respawn/movers/","title":"Movers","text":"<p>Movers are entites that move and rotate smoothly. <code>script_mover</code> allows for smooth movement and rotation contrary to <code>script_mover_lightweight</code> which is not able to rotate.</p>"},{"location":"Modding/reference/respawn/movers/#create-a-mover","title":"Create a Mover","text":"<p>returns <code>script_mover</code></p> <p>returns <code>script_mover</code> which has a model</p> <p>returns <code>script_mover_lightweight</code></p> <p>returns <code>script_mover_lightweight</code> which has a model</p>"},{"location":"Modding/reference/respawn/movers/#moving","title":"Moving","text":"<p>Only usable by expensive movers</p> <p>Only usable by expensive movers</p> <p>Immediately stop this mover from moving</p>"},{"location":"Modding/reference/respawn/movers/#behaviour","title":"Behaviour","text":"<p>Pushers move everything that stands on top of them or next to them and can also kill entities by crushing them.</p>"},{"location":"Modding/reference/respawn/movers/#examples","title":"Examples","text":"<pre><code>entity mover = CreateScriptMover( &lt;0,0,0&gt; ) \n\n// moving the mover to &lt;0,0,10&gt; in 1 second\nmover.NonPhysicsMoveTo( &lt;0,0,10&gt;, 1, 0, 0 )\n\n// wating so the mover gets to the destination\nwait 1\n\n// sending it back\nmover.NonPhysicsMoveTo( &lt;0,0,0&gt;, 1, 0, 0 )\n\n// then stoping the mover in 0.5 seconds\nwait 0.5\nmover.NonPhysicsStop()\n</code></pre> <pre><code>// creating a elevator \n// using a mover with a model\nentity mover = CreateScriptMoverModel( $\"models/props/turret_base/turret_base.mdl\", &lt; -40.5605, -1827.87, -223.944 &gt;, &lt;0,0,0&gt;, SOLID_VPHYSICS, 1000 )\nmover.SetPusher( true ) // making it into a pusher\n\n// for loop to move the elevator up and down\nfor(;;)\n{\n    mover.NonPhysicsMoveTo( &lt; -35.4312, -1827.87, 523.046 &gt;, 4.8, 0.1, 0.1 )\n    wait 6\n\n    mover.NonPhysicsMoveTo( &lt; -35.4312, -1827.87, -223.944 &gt;, 4.8, 0.1, 0.1 )\n    wait 6\n}\n</code></pre> <pre><code>// Phase shifting the player to a destination\n// setting a position\nvector destination = &lt;250,1000,100&gt;\n// checking if the player is valid\nif ( IsValid( player ) )\n{\n    // creating the mover\n    entity mover = CreateOwnedScriptMover( player )\n    player.SetParent( mover ) // parenting the player ( so they move with the mover )\n    mover.NonPhysicsMoveTo( destination, 0.5, 0, 0 ) // saying to the moveer to move\n    vector angles = player.GetAngles() // angles saved\n    PhaseShift( player, 0.1, 1 ) // phase shifitng the player\n    player.SetAngles( angles ) // setting the player to the original angles\n}\nwait 0.6 // wating so the mover moves\n\nif ( IsValid( player ) )\n{\n    player.ClearParent() // removing the player from the mover\n}\n</code></pre>"},{"location":"Modding/reference/respawn/rui/","title":"Rui","text":"<p>Functions for creating a rui, and methods of the rui object</p> <pre><code>// To create one, do:\nrui = RuiCreate( $\"ui/assetname.rpak\", topology, drawGroup, sortKey ) // sortkey = int to prevent z-fighting. higher -&gt; in front\n\n// You can then manipulate it using the following:\nRuiSetDrawGroup( rui, drawGroup )\nRuiSetString( rui, argName, value )\nRuiSetBool( rui, argName, value )\nRuiSetInt( rui, argName, value )\nRuiSetFloat( rui, argName, value )\nRuiSetFloat2( rui, argName, value )  // value is a vector; only x and y are used\nRuiSetFloat3( rui, argName, value )\nRuiSetColorAlpha( rui, argName, color, alpha )  // color is a vector\n\n// To destroy it, just do:\nRuiDestroy( rui )\n</code></pre> <p>Drawgroups</p> <pre><code>RUI_DRAW_WORLD\nRUI_DRAW_HUD\nRUI_DRAW_COCKPIT\nRUI_DRAW_NONE\n</code></pre> <p>Trackers</p> <pre><code>// VECTOR TYPES\nRUI_TRACK_ABSORIGIN_FOLLOW                   // Create at absorigin, and update to follow the entity\nRUI_TRACK_POINT_FOLLOW                       // Create on attachment point, and update to follow the entity\nRUI_TRACK_OVERHEAD_FOLLOW                    // Create at the top of the entity's bbox\nRUI_TRACK_EYEANGLES_FOLLOW\n\n// FLOAT TYPES\nRUI_TRACK_HEALTH                   // Health as fraction from 0 to 1\nRUI_TRACK_FRIENDLINESS                   // 0 if ent is enemy, 1 if it's friendly\nRUI_TRACK_PLAYER_SUIT_POWER                   // Player's suit power from 0 to 1\nRUI_TRACK_PLAYER_GRAPPLE_POWER                   // Player's grapple power from 0 to 1\nRUI_TRACK_PLAYER_SHARED_ENERGY                   // Players shared energy value\nRUI_TRACK_WEAPON_CHARGE_FRACTION                   // Weapon charge as fraction from 0 to 1\nRUI_TRACK_WEAPON_SMART_AMMO_LOCK_FRACTION                   // Smart ammo weapon lock fraction from 0 to N\nRUI_TRACK_WEAPON_READY_TO_FIRE_FRACTION                   // Weapon cooldown as fraction from 0 to 1\nRUI_TRACK_WEAPON_RELOAD_FRACTION                   // Weapon reloading as fraction from 0 to 1\nRUI_TRACK_WEAPON_DRYFIRE_FRACTION                   \nRUI_TRACK_WEAPON_CLIP_AMMO_FRACTION                   // Weapon clip ammo as fraction from 0 to 1\nRUI_TRACK_WEAPON_REMAINING_AMMO_FRACTION                   // Weapon remaining ammo as fraction from 0 to 1\nRUI_TRACK_WEAPON_CLIP_AMMO_MAX                   \nRUI_TRACK_WEAPON_STOCKPILE_AMMO_MAX                   \nRUI_TRACK_WEAPON_LIFETIME_SHOTS                   \nRUI_TRACK_WEAPON_AMMO_REGEN_RATE                   \nRUI_TRACK_BOOST_METER_FRACTION                   // Player boost meter as fraction from 0 to 1\nRUI_TRACK_GLIDE_METER_FRACTION                   // Player glide meter as fraction from 0 to 1\nRUI_TRACK_SHIELD_FRACTION                   // Shield health as fraction from 0 to 1\nRUI_TRACK_STATUS_EFFECT_SEVERITY                   // Status effect severity as fraction from 0 to 1; attachmentIndex used as status effect index\nRUI_TRACK_SCRIPT_NETWORK_VAR                   // Value of a script network variable (use GetNetworkedVariableIndex())\nRUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL                   // Value of a script network variable without an entity (use GetNetworkedVariableIndex())\nRUI_TRACK_SCRIPT_NETWORK_VAR_LOCAL_VIEW_PLAYER                   // Value of a script network variable on the local view player (changes automatically during kill replay) (use GetNetworkedVariableIndex())\nRUI_TRACK_FRIENDLY_TEAM_SCORE                   \nRUI_TRACK_FRIENDLY_TEAM_ROUND_SCORE                   // The value of score2 for friendlies\nRUI_TRACK_ENEMY_TEAM_SCORE                   \nRUI_TRACK_ENEMY_TEAM_ROUND_SCORE                   // The value of score2 for enemies\nRUI_TRACK_MINIMAP_SCALE                   \nRUI_TRACK_SOUND_METER                   // Sound meter as fraction from 0 to 1.\n\n// INT TYPES\nRUI_TRACK_MINIMAP_FLAGS,\nRUI_TRACK_MINIMAP_CUSTOM_STATE,\nRUI_TRACK_TEAM_RELATION_VIEWPLAYER,                   // ENEMY: -1, NEUTRAL: 0, FRIENDLY: 1\nRUI_TRACK_TEAM_RELATION_CLIENTPLAYER,                   // ENEMY: -1, NEUTRAL: 0, FRIENDLY: 1\nRUI_TRACK_SCRIPT_NETWORK_VAR_INT,                   // Value of a script network variable (use GetNetworkedVariableIndex())\nRUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL_INT,                   // Value of a script network variable without an entity (use GetNetworkedVariableIndex())\nRUI_TRACK_SCRIPT_NETWORK_VAR_LOCAL_VIEW_PLAYER_INT,                   // Value of a script network variable on the local view player (changes automatically during kill replay) (use GetNetworkedVariableIndex())\n\n// GAMETIME TYPES\nRUI_TRACK_LAST_FIRED_TIME,\nRUI_TRACK_MINIMAP_THREAT_SECTOR,\n\n// IMAGE TYPES\nRUI_TRACK_WEAPON_MENU_ICON,\nRUI_TRACK_WEAPON_HUD_ICON\n</code></pre> <pre><code>screenSizeX = GetScreenSize()[0]\nscreenSizeY = GetScreenSize()[1]\n</code></pre> <p>value is a vector; only x and y are used</p> <p>color is a vector</p>"},{"location":"Modding/reference/respawn/titan/","title":"Titan","text":"<p>Functions for getting titan, and methods of the titan object</p> <pre><code>entity soul = player.IsTitan() ? player.GetTitanSoul() : player.GetPetTitan().GetTitanSoul() \n// getting the titan depends on wether the player is in the titan or not\n</code></pre> <p>e.g. \\\"coreAvailableFrac\\\"</p>"},{"location":"Modding/reference/respawn/topology/","title":"Topology","text":"<p>Topologies ------</p> <p>RUI elements are rendered on topologies.</p> <p>The position of topologies are relative to the position of their parent.</p> <p>Since the number of topologies that can be created is very limited and Vanilla uses most of the slots already, try to minimize your topology uses. Instead of creating new ones, check if you can use one that already exists:</p> <pre><code>clGlobal.topoFullScreen\nclGlobal.topoCockpitHudPermanent\nclGlobal.topoTitanCockpitLowerHud\nclGlobal.topoTitanCockpitInstrument1 // yes, with a 1\nclGlobal.topoTitanCockpitHud\nclGlobal.topoCockpitHud\n</code></pre> <p>Creating Topologies ^^^^^^</p> <p>This creates a simple topology at the specified origin relative to the parent position.</p> <p>The parameters <code>right</code> and <code>down</code> specify the dimensions of the topology relative to the origin. For example, passing <code>&lt;GetScreenSize()[0],0,0&gt;</code> and <code>&lt;0,GetScreenSize()[1],0&gt;</code> will create a topology that covers the entire screen. Note that in this example the origin is the top left corner. The unit used is pixels.</p> <p>This destroys the passed topology. However, ruis that are already drawn on top of it do not get destroyed.</p> <p>Parents the given topology to the anchor entity. The topology moves and rotates relative to the parent.</p> <p>Set the position of the topology to <code>&lt;0,0,0&gt;</code> to render at the parent\\'s position.</p> <p>Update the position and dimensions of the topology</p> <p>Drawcalls ^^^^^^</p> <p>Drawcalls determine how and where RUIs on a topology are being rendered.</p> <ul> <li><code>RUI_DRAW_NONE</code>: Don\\'t render rui at all</li> <li><code>RUI_DRAW_HUD</code>: Render rui on screen. Uses screen coordinates in     pixels.</li> <li><code>RUI_DRAW_WORLD</code>: Render rui in worldspace on a two dimensional     surface facing the direction of the topology.</li> <li><code>RUI_DRAW_COCKPIT</code>: Similiar to <code>RUI_DRAW_HUD</code> but follows the     cockpit headbob movement.</li> </ul> <p>Drawcalls are not set for a topology but for each rui individually</p> <p>HUD Topology example ^^^^^^</p> <pre><code>// Cover the top left quadrant of the screen with a basic image\nfloat[2] s = GetScreenSize()\nvar topo = RuiTopology_CreatePlane( &lt;0,0,0&gt;, &lt;s[0] / 2,0,0&gt;, &lt;0,s[1] / 2,0&gt;, true ) // RUIs scale with the topology they are being drawn on so make sure to use the correct dimensions\nRuiCreate( $\"ui/basic_image.rpak\", topo, RUI_DRAW_HUD, 0 )\n</code></pre> <p>Worldspace Topology example ^^^^^^</p> <pre><code>// REMEMBER TO DESTROY ALL TOPOS, RUIS AND PROPS YOU CREATE WHEN YOU NO LONGER NEED THEM\n// ripped from respawn\nvar function Worldspace_CreateRUITopology( vector org, vector ang, float width, float height )\n{\n    // adjust so the RUI is drawn with the org as its center point\n    org += ( (AnglesToRight( ang )*-1) * (width*0.5) )\n    org += ( AnglesToUp( ang ) * (height*0.5) )\n\n    // right and down vectors that get added to base org to create the display size\n    vector right = ( AnglesToRight( ang ) * width )\n    vector down = ( (AnglesToUp( ang )*-1) * height )\n\n    return RuiTopology_CreatePlane( org, right, down, true )\n}\n\nvoid function WorldSpaceTopoTest()\n{\n    // To rotate a topology without manually calculating and updating position and dimensions you can parent the topology to  a client side prop\n    entity player = GetLocalClientPlayer()\n    entity weapon = player.GetActiveWeapon()\n\n    vector fwd = AnglesToForward( weapon.GetAngles() )\n    vector right = AnglesToRight( weapon.GetAngles() )\n    vector up = AnglesToUp( weapon.GetAngles() )\n    vector conf = &lt; 20, -40, 30 &gt; // float next to the player's weapon\n\n    int attachIndex = weapon.LookupAttachment( \"muzzle_flash\" )\n    entity anchor = CreateClientSidePropDynamic( weapon.GetAttachmentOrigin( attachIndex ) + fwd * conf.x + right * conf.y + up * conf.z, &lt;0,0,0&gt;, $\"models/dev/empty_model.mdl\") // props need a model but this one is invisible so we don't need to set visibility manually\n    var topo = Worldspace_CreateRUITopology( &lt;0,0,0&gt;, &lt;0,90,0&gt;, 128, 64 ) // origin &lt;0,0,0&gt; so the topo sits at the origin of the prop\n\n    var tm_box = RuiCreate( $\"ui/helmet_scanning_percentbar.rpak\", topo, RUI_DRAW_WORLD, 0 )\n    RuiSetString( tm_box, \"stage3TextTop\", \"Top\" )\n    RuiSetString( tm_box, \"stage3TextBottom\", \"Bottom\" )\n\n    anchor.SetParent( weapon )\n    RuiTopology_SetParent( topo, anchor )\n}\n</code></pre>"},{"location":"Modding/reference/respawn/native_server/","title":"Native Server Functions","text":"<p>::: /reference/respawn/native_server/collision /reference/respawn/native_server/convars /reference/respawn/native_server/codecallback /reference/respawn/native_server/createent /reference/respawn/native_server/damagedef /reference/respawn/native_server/damageinfo /reference/respawn/native_server/datatables /reference/respawn/native_server/debugdraw /reference/respawn/native_server/dev /reference/respawn/native_server/entityio /reference/respawn/native_server/gamerules /reference/respawn/native_server/getent /reference/respawn/native_server/hudmessages /reference/respawn/native_server/managedarrays /reference/respawn/native_server/math /reference/respawn/native_server/netvar /reference/respawn/native_server/npc /reference/respawn/native_server/operators /reference/respawn/native_server/particles /reference/respawn/native_server/persistence /reference/respawn/native_server/playermelee /reference/respawn/native_server/playlists /reference/respawn/native_server/precaching /reference/respawn/native_server/recordedanimations /reference/respawn/native_server/rodeo /reference/respawn/native_server/settings /reference/respawn/native_server/smartammo /reference/respawn/native_server/sounds /reference/respawn/native_server/sp /reference/respawn/native_server/spawnpoints /reference/respawn/native_server/statuseffects /reference/respawn/native_server/stryder /reference/respawn/native_server/time /reference/respawn/native_server/weapons /reference/respawn/native_server/misc :::</p>"},{"location":"Modding/reference/respawn/native_server/codecallback/","title":"Code Callbacks","text":"<p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>Not all of these are fully implemented, either check the asset dump or try it out. ::::</p> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>This code callback does not work ::::</p>"},{"location":"Modding/reference/respawn/native_server/collision/","title":"Collision &amp; Tracing","text":"<p>Do muliple LOS checks, early out if any return true. Runs on multiple threads.</p> <p><code>mask</code>: <code>TRACE_MASK_*</code></p> <p><code>group</code>: <code>TRACE_COLLISION_GROUP_*</code></p> <p>Does a trace and returns struct of result values.</p> <p>Does a high-detail (per poly on static models) trace and returns struct of result values.</p> <p>Does a hull trace and returns table of result values.</p> <p>Does a trace and returns table of result values.</p> <p>Does a trace and returns the distance from <code>startPos</code> to hit.</p> <p>Does a trace and returns the distance from <code>startPos</code> to hit.</p> <p>Does a trace and returns all ents along a line.</p> <p>Returns an array of entities that are inside of a cone and visible to the apex</p> <p>Check for vortexSphere collisions between two points.</p>"},{"location":"Modding/reference/respawn/native_server/convars/","title":"ConVars","text":""},{"location":"Modding/reference/respawn/native_server/convars/#getters","title":"Getters","text":"<p>Gets the value of a convar as a string</p> <p>Gets the value of a convar as an integer</p> <p>Gets the value of a convar as a float</p> <p>Gets the value of a convar as a boolean</p>"},{"location":"Modding/reference/respawn/native_server/convars/#setters","title":"Setters","text":"<p>Sets the value of a convar with a string</p> <p>Sets the value of a convar with an integer</p> <p>Sets the value of a convar with a float</p> <p>Sets the value of a convar with a boolean</p> <p>Sets the value of a convar to its internal default value</p>"},{"location":"Modding/reference/respawn/native_server/createent/","title":"Create Entites","text":"<p>Created entites do not spawn until they are <code>dispatched &lt;DispatchSpawn&gt;</code> . Some script wrappers may dispatch entites themselves.</p> <p>Getting entities is documented <code>here &lt;get-ent-doc&gt;</code>.</p>"},{"location":"Modding/reference/respawn/native_server/createent/#internal-factories","title":"Internal Factories","text":""},{"location":"Modding/reference/respawn/native_server/createent/#dispatchspawn","title":"DispatchSpawn","text":"<p>Tells the specified entity to spawn. Should only be called once per entity.</p> <p>Create zero or more entities from templates that match the given string, and return them as an array. Wildcards allowed.</p> <p>All array contents are entites but the array is not typed itself.</p> <p>Create zero or more entities from point-templates that match the given string, and return them as an array. Wildcards allowed</p>"},{"location":"Modding/reference/respawn/native_server/createent/#interactable-props","title":"Interactable Props","text":""},{"location":"Modding/reference/respawn/native_server/createent/#script-wrappers","title":"Script Wrappers","text":"<p>Note</p> <p>These are defined in <code>ai/_ai_spawn.gnut</code>` ::::</p>"},{"location":"Modding/reference/respawn/native_server/createent/#titans","title":"Titans","text":""},{"location":"Modding/reference/respawn/native_server/createent/#drones","title":"Drones","text":"<p>Creates an unarmed drone</p>"},{"location":"Modding/reference/respawn/native_server/createent/#common","title":"Common","text":""},{"location":"Modding/reference/respawn/native_server/damagedef/","title":"DamageDef","text":""},{"location":"Modding/reference/respawn/native_server/damageinfo/","title":"DamageInfo","text":"<p>DamageInfos are variables holding information about damage inflicted on an entity.</p> <p>Because damageInfo instances are implemented as userdata they can\\'t be typed.</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/#getters","title":"Getters","text":"<p>Returns the attacker of this damageInfo</p> <p>Returns the inflictor of this damageInfo</p> <p>Returns the weapon that dealt this damage</p> <p>Get if this damage is supposed to kill the victim regardless of health</p> <p>Get the inflicted damage</p> <p>Returns the position where the damage originated. Usually this is the barrel attachment of the weapon that inflicted the damage.</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/#damageinfo-getdamagetype","title":"DamageInfo-GetDamageType","text":""},{"location":"Modding/reference/respawn/native_server/damageinfo/#damage-source-id-overview","title":"damage-source-id-overview","text":"<p>Returns the <code>eDamageSourceId</code></p> <p><code>damageSourceId</code> is an <code>int</code> that references an <code>enum</code> and can be used to identify what source damage came from.</p> <p><code>damageSourceId</code> is mostly found as an argument in some kill and damage related functions. Respawn has created a function that will attempt to localise the damageSourceId inputed. To add your own custom <code>damageSourceID</code> , see: <code>../../northstar/customdamagesources</code> </p> <p>Other useful functions can be found in the <code>damageinfo</code> section of this page and in <code>entities</code> </p> <p><code>GetObitFromdamageSourceId</code> is a global function that attempts to localise the <code>damageSourceId</code> inputed, if it cannot get a localised string it will simply return the localisation string of the source.</p> <p>Get the distance from where the bullet/projectile was fired.</p> <p>If it\\'s a radius damage, gives the distance from the center of the blast. Otherwise defaults to zero.</p> <p>Get damage force vector.</p> <p>Checks if code is allowing this entity to ragdoll on death</p> <p>Get all () flags. damageflag used to be here</p> <p>\\\"Returns true if contains all given () flags. and here too</p> <p>Returns weapon name, even if weapon entity is gone</p> <p>Returns if stats should be recorded for damage weapon</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/#setters","title":"Setters","text":"<p>Sets whether this damage should force a kill</p> <p>Set the amount of damage</p> <p>Overrides the damage type that was set by script when firing the weapon.</p> <p>Add a damage flag.</p> <p>Remove damage flag.</p> <p>Sets the damage source identifier.</p> <p>Set what death (anim) package to use if this damage kills the guy.</p> <p>Set damage force vector</p> <p>Set which direction the target should flinch in.</p> <p>Add a () flag. here aswell</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/#utils","title":"Utils","text":"<p>TODO: fix helpers section, its been removed for redundancy</p>"},{"location":"Modding/reference/respawn/native_server/damageinfo/#damage-flag-overview","title":"Damage Flags","text":"<p>You can get a bitflag of all damage types used with <code>DamageInfo_GetDamageType &lt;DamageInfo-GetDamageType&gt;</code>.</p> <p>dropdown  !!! info[TODO] Turn this into a real dropdown ::: Damage flags</p> <p>List of all Damage flags</p> <p>Variable name           Value</p> <p>DF_GIB                  1   DF_DISSOLVE             2   DF_INSTANT              3   DF_NO_SELF_DAMAGE       4   DF_IMPACT               5   DF_BYPASS_SHIELD        6   DF_RAGDOLL              7   DF_TITAN_STEP           8   DF_RADIUS_DAMAGE        9   DF_ELECTRICAL           10   DF_BULLET               11   DF_EXPLOSION            12   DF_MELEE                13   DF_NO_INDICATOR         14   DF_KNOCK_BACK           15   DF_STOPS_TITAN_REGEN    16   DF_DISMEMBERMENT        17   DF_MAX_RANGE            18   DF_SHIELD_DAMAGE        19   DF_CRITICAL             20   DF_SKIP_DAMAGE_PROT     21   DF_HEADSHOT             22   DF_VORTEX_REFIRE        23   DF_RODEO                24   DF_BURN_CARD_WEAPON     25   DF_KILLSHOT             26   DF_SHOTGUN              27   DF_SKIPS_DOOMED_STATE   28   DF_DOOMED_HEALTH_LOSS   29   DF_DOOM_PROTECTED       30   DF_DOOM_FATALITY        31   DF_NO_HITBEEP           32 :::</p> <p>Dropdown</p> <p>Damage types</p> <pre><code>global enum damageTypes\n{\n    gibs = (DF_GIB)\n    largeCaliberExp  = (DF_BULLET | DF_GIB | DF_EXPLOSION)\n    gibBullet = (DF_BULLET | DF_GIB)\n    instant = (DF_INSTANT)\n    dissolve = (DF_DISSOLVE)\n    projectileImpact = (DF_GIB)\n    pinkMist = (DF_GIB) //If updated from DF_GIB, change the DF_GIB in Arc Cannon to match.\n    ragdoll = (DF_RAGDOLL)\n    titanStepCrush = (DF_TITAN_STEP)\n    arcCannon = (DF_DISSOLVE | DF_GIB | DF_ELECTRICAL )\n    electric = (DF_ELECTRICAL) //Only increases Vortex Shield decay for bullet weapons atm.\n    explosive = (DF_RAGDOLL | DF_EXPLOSION )\n    bullet = (DF_BULLET)\n    largeCaliber = (DF_BULLET | DF_KNOCK_BACK)\n    shotgun = (DF_BULLET | DF_GIB | DF_SHOTGUN )\n    titanMelee = (DF_MELEE | DF_RAGDOLL)\n    titanBerserkerMelee = (DF_MELEE | DF_RAGDOLL)\n    titanEjectExplosion = (DF_GIB | DF_EXPLOSION)\n    dissolveForce = (DF_DISSOLVE | DF_KNOCK_BACK | DF_EXPLOSION)\n    rodeoBatteryRemoval = (DF_RODEO | DF_EXPLOSION | DF_STOPS_TITAN_REGEN )\n}\n</code></pre>"},{"location":"Modding/reference/respawn/native_server/datatables/","title":"DataTables","text":"<p>Gets the given datable asset</p> <p>Finds the column in the datatable with the given name. -1 if none.</p> <p>Returns the number of rows of a given datatable</p> <p>Gets a bool from the given row/column of a datatable</p> <p>Gets an integer from the given row/column of a datatable</p> <p>Gets a float from the given row/column of a datatable</p> <p>Gets a vector from the given row/column of a datatable</p> <p>Gets a string from the given row/column of a datatable</p> <p>Gets an asset from the given row/column of a datatable</p> <p>Finds and returns the first row of the datatable for which the bool in the given column matches the given value. -1 if none.</p> <p>Finds and returns the first row of the datatable for which the int in the given column matches the given value. -1 if none.</p> <p>Finds and returns the first row of the datatable for which the int in the given column is less than or equal to the given value. -1 if none.</p> <p>Finds and returns the first row of the datatable for which the int in the given column is greater than or equal to the given value. -1 if none.</p> <p>Finds and returns the first for of the datatable for which the float in the given colmn matches the given value. -1 if none.</p> <p>Finds and returns the first row of the datatable for which the float in the given column is less than or equal to the given value. -1 if none.</p> <p>Finds and returns the first row of the datatable for which the float in the given column is greater than or equal to the given value. -1 if none.</p> <p>Finds and returns the first row of the datatable for which the vector in the given column matches the given value. -1 if none.</p> <p>Finds and returns the first row of the datatable for which the string in the given column matches the given value. -1 if none.</p> <p>Finds and returns the first row of the dtatable for which the asset in the given column matches the given value. -1 if none.</p>"},{"location":"Modding/reference/respawn/native_server/debugdraw/","title":"Debug Drawing","text":"<p>Note</p> <p>Only <code>DebugDrawLine &lt;DebugDrawLine&gt;</code> , <code>DebugDrawBox &lt;DebugDrawBox&gt;</code>  and <code>DebugDrawScreenText &lt;DebugDrawScreenText&gt;</code> are native functions.</p> <p>The rest are defined in scripts using these. ::::</p> <p>In Titanfall it is possible to draw shapes in 3D, from the SERVER and CLIENT VM, using the debug draw functions, however in order for them to actually render you will need to set <code>sv_cheats 1</code> and <code>enable_debug_overlays 1</code> in your launch config or console.</p> <p>These debug drawing functions are available:</p>"},{"location":"Modding/reference/respawn/native_server/debugdraw/#debugdrawline","title":"DebugDrawLine","text":""},{"location":"Modding/reference/respawn/native_server/debugdraw/#debugdrawbox","title":"DebugDrawBox","text":""},{"location":"Modding/reference/respawn/native_server/debugdraw/#debugdrawscreentext","title":"DebugDrawScreenText","text":"<p>!!! danger[error]</p> <p>This function is stripped. It does nothing. ::::</p>"},{"location":"Modding/reference/respawn/native_server/dev/","title":"Developer Functions","text":"<p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>Most of these functions are stripped and have no functionality. ::::</p>"},{"location":"Modding/reference/respawn/native_server/dev/#command-line","title":"Command Line","text":""},{"location":"Modding/reference/respawn/native_server/dev/#developer-utils","title":"Developer Utils","text":"<p>Returns list of files in <code>scripts/model_view_list.txt</code>, which is written by reRun (respawn internal tool)</p> <p>Prints to the game\\'s spam logfile (usually stored in DevNet).</p>"},{"location":"Modding/reference/respawn/native_server/dev/#performance","title":"Performance","text":""},{"location":"Modding/reference/respawn/native_server/dev/#devp4","title":"DevP4","text":"<p>Error</p> <p>Title</p> <p>Error :::</p> <p>Stripped in Northstar for security. ::::</p>"},{"location":"Modding/reference/respawn/native_server/dev/#devtextbuffer","title":"DevTextBuffer","text":"<p>Error</p> <p>Title</p> <p>Error :::</p> <p>Stripped in Northstar for security. ::::</p> <p>Append string to a temp buffer. Dev only.</p> <p>Dump temp buffer out to specified path/filename.</p>"},{"location":"Modding/reference/respawn/native_server/dev/#match-stat-loggers","title":"Match Stat Loggers","text":""},{"location":"Modding/reference/respawn/native_server/entityio/","title":"Entity Actions","text":""},{"location":"Modding/reference/respawn/native_server/gamerules/","title":"Gamerules","text":"<p>Used for round based game modes</p> <p>Presumably used for round based game modes</p>"},{"location":"Modding/reference/respawn/native_server/getent/","title":"Getting Entities","text":"<p>There are a multitude of selectors to get specific kinds of entities.</p> <p>Creating entities is documented <code>here &lt;create-ent-doc&gt;</code> .</p>"},{"location":"Modding/reference/respawn/native_server/getent/#players","title":"Players","text":"<p>Get array of all players</p> <p>Get array of all players by class, team within dist. team -1 for any team, <code>\"any\"</code> for any class, otherwise <code>\"titan\"</code> or <code>\"pilot\"</code>, -1 for any dist</p> <p>Get array of all players that are in a team</p> <p>Get array of all players that are not allied with the team</p> <p>Get array of all players that are alive</p> <p>Get array of all players in a team that are alive</p> <p>Get array of all players that are not titans</p>"},{"location":"Modding/reference/respawn/native_server/getent/#connecting-players","title":"Connecting Players","text":""},{"location":"Modding/reference/respawn/native_server/getent/#titans","title":"Titans","text":"<p>Get all players in a titan and souls.</p>"},{"location":"Modding/reference/respawn/native_server/getent/#npcs-props","title":"NPCs &amp; Props","text":"<p>Get array of all NPCs by class, team, within dist. team -1 for any team, <code>\"any\"</code> for any class, otherwise <code>\"titan\"</code> or <code>\"pilot\"</code>, -1 for any dist</p> <p>Get array of all NPCs by class, team, and subclass (array), within dist. team -1 for any team, <code>\"'any\"</code> for any class, -1 for any dist</p> <p>Get array of all NPCs of class</p> <p>Get array of all NPCs of class and subclass</p>"},{"location":"Modding/reference/respawn/native_server/getent/#projectiles","title":"Projectiles","text":"<p>Get array of all NPCs by class, team, within dist. team -1 for any team, <code>\"any\"</code> for any class, otherwise <code>\"titan\"</code> or <code>\"pilot\"</code>, -1 for any dist</p>"},{"location":"Modding/reference/respawn/native_server/getent/#find-entities","title":"Find Entities","text":""},{"location":"Modding/reference/respawn/native_server/getent/#get-multiple-entites","title":"Get Multiple Entites","text":"<p>Get array of entitites matching a name</p> <p>Get array of entities matching a name with support for *</p> <p>Get array of entities matching a class</p> <p>Get array of entities matching a class with support for *</p> <p>Get array of entities matching a script name</p> <p>Get array of entities matching a script name and instance</p> <p>Get weapons in the world</p>"},{"location":"Modding/reference/respawn/native_server/hudmessages/","title":"HUD Messages","text":"<p>Functions to render text on the client screen.</p> <p>Because these can not be removed in demos and are somewhat ugly, it is recommended to use <code>Serverside RUI &lt;serverside-rui-doc&gt;</code> instead</p> <p>Send a HUD message to the given player.</p> <p>Send a HUD message to all players.</p> <p>Prints white text in the center of the screen on all clients.</p>"},{"location":"Modding/reference/respawn/native_server/managedarrays/","title":"Script Managed Entity Arrays","text":"<p>Returns the index of the new array</p> <p>Get the script managed ent array for the given index</p> <p>Get the script managed ent array for the given index within distance of a point</p>"},{"location":"Modding/reference/respawn/native_server/math/","title":"Math","text":"<p>Interpolate with cubic hermite during ease-in and ease-out times</p> <p>Lineraly interpolate between two vectors</p> <p>Get a random 2d point in a circle, as a 3d point, with optional 3d base</p>"},{"location":"Modding/reference/respawn/native_server/misc/","title":"Miscellaneous","text":"<p>Returns if <code>otherTeam</code> is an enemy of <code>ownTeam</code></p> <p>Creates a rope between two points or entities.</p> <p>Execute <code>cmd</code> on the local host</p> <p>Get the map name of the current map</p> <p>Returns value of IsTestMap from the level\\'s script list .rson file</p>"},{"location":"Modding/reference/respawn/native_server/misc/#parents-children","title":"Parents &amp; Children","text":""},{"location":"Modding/reference/respawn/native_server/misc/#visual-options","title":"Visual Options","text":""},{"location":"Modding/reference/respawn/native_server/misc/#vpk","title":"VPK","text":"<p>Player Utils ---------</p> <p>Returns the best window hint.</p> <p>Fade the player\\'s scren.</p> <p>Fade flags start with <code>FFADE_</code></p>"},{"location":"Modding/reference/respawn/native_server/misc/#levels","title":"Levels","text":"<p>Sets the XP required for a player to get to a certain level</p>"},{"location":"Modding/reference/respawn/native_server/misc/#entity-utils","title":"Entity Utils","text":"<p>Returns if an entity is a magnetic target</p> <p>Returns if an entity is a magnetic target</p> <p>Is entity a turret</p>"},{"location":"Modding/reference/respawn/native_server/misc/#weapon-utils","title":"Weapon Utils","text":""},{"location":"Modding/reference/respawn/native_server/misc/#preinstall","title":"Preinstall","text":"<p>Returns true if the full game is installed. You can\\'t start mp or any sp map but sp_training and sp_crashsite if this is false.</p> <p>Returns true if the game is partially installed. You can\\'t start sp training this is false.</p> <p>Returns fraction 0.0 to 1.0 of downloading of full game progress.</p> <p>Only call when we have an active user.</p>"},{"location":"Modding/reference/respawn/native_server/misc/#script-reloads","title":"Script Reloads","text":""},{"location":"Modding/reference/respawn/native_server/netvar/","title":"Networked Data","text":""},{"location":"Modding/reference/respawn/native_server/netvar/#networked-variables","title":"Networked Variables","text":"<p>Registers a named networked variable.</p> <p>Gets the internal index used to reference a scripted network variable. For use with <code>FX_PATTACH_SCRIPT_NETWORK_VAR</code>.</p>"},{"location":"Modding/reference/respawn/native_server/netvar/#remote-functions","title":"Remote Functions","text":"<p>Remote functions allow the <code>SERVER</code> to call registered script functions on the <code>CLIENT</code> and <code>UI</code> VM.</p> <p>Begin registration of remote functions.</p> <p>Finish registration of remote functions.</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>This function is not native. It\\'s defined in Northstar.CustomServers ::::</p> <p>Registers a callback when Remote functions are being registered.</p> <p>To register custom remote functions you are required to use this callback because functions can only be registered once.</p> <pre><code>globalize_all_functions\n\nvoid function MyMod_Init()\n{\n  AddCallback_OnRegisteringCustomNetworkVars( MyModRegisterRemoteFunctions )\n}\n\nvoid function MyModRegisterRemoteFunctions()\n{\n  Remote_RegisterFunction( \"ExampleRemoteFunction\" )\n}\n\nvoid function ExampleRemoteFunction() {}\n</code></pre> <p>Register a function name to be used in remote calls.</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Allowed extra parameter types are null, bool, int, and float. ::::</p> <p>Given a player, function name, and optional parameters, call function in client script.</p> <p>Then call it again if we rewind and play a kill replay. The command will not reach the client at all if called during a span of time the player skips because they were watching a replay.</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Allowed extra parameter types are null, bool, int, and float. ::::</p> <p>Given a player, function name, and optional parameters, call function in client script.</p> <p>Does not get called again in replays.</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Allowed extra parameter types are null, bool, int, and float. ::::</p> <p>Given a player, function name and optional parameters, call function in UI script.</p>"},{"location":"Modding/reference/respawn/native_server/netvar/#replays","title":"Replays","text":"<p>While not being networked themselves, these are used by remote functions.</p>"},{"location":"Modding/reference/respawn/native_server/npc/","title":"NPCs","text":"<p>For settings, see <code>AI Settings &lt;ai-settings&gt;</code>s</p> <p>Controls if <code>ent</code> is traversable by NPCs</p>"},{"location":"Modding/reference/respawn/native_server/npc/#npc-squads","title":"NPC Squads","text":""},{"location":"Modding/reference/respawn/native_server/npc/#npc-navigation-nodes","title":"NPC Navigation Nodes","text":"<p>Returns a node index</p> <p>Returns a node index</p>"},{"location":"Modding/reference/respawn/native_server/npc/#navmeshes","title":"Navmeshes","text":"<p>Clamps a goal point to the NavMesh for a given AI. Uses AIs hull size as test extents</p> <p>Clamps a goal point to the NavMesh for a given AI. As extents increase in size more possible clamp positions become available, but too large and the clamped position may be very far from the original point.</p> <p>Clamps a goal point to the NavMesh for a given hull</p> <p>Clamps a goal point to the NavMesh for a given hull. As extents increase in size more possible clamp positions become available, but too large clamped position may be very far from the original point.</p> <p>Get nearby ground positions by following the NavMesh graph</p> <p>Get n( \\&lt; 64 ) ground positions around a spot within <code>minDist</code> and <code>maxDist</code></p> <p>Get up to n ground positions around a spot within <code>minDist</code> and <code>maxDist</code>. Gets center of random polygons.</p> <p>Checks if the npc can reach the position over graph</p>"},{"location":"Modding/reference/respawn/native_server/npc/#skits","title":"Skits","text":"<p>Get skit nodes sorted by nearest to average player position with some randomization</p> <p>Get skit nodes sorted by nearest to hardpoints with some randomization</p> <p>Get skit nodes sorted by nearest to pos with some randomization</p>"},{"location":"Modding/reference/respawn/native_server/npc/#dangerous-areas","title":"Dangerous Areas","text":"<p>Create a known dangerous are that AI should avoid if necessary. The lifetime of the danger is tied to an entity</p> <p>Same as AI_CreateDangerousArea except the origin is always in a single place</p> <p>Create dangerous area using damage def</p>"},{"location":"Modding/reference/respawn/native_server/npc/#ain","title":"AIN","text":"<p>AIN on the valve wiki</p>"},{"location":"Modding/reference/respawn/native_server/npc/#spawners","title":"Spawners","text":"<p>Get array of spawners matching a class name</p> <p>Get array of spawners matching a script name</p>"},{"location":"Modding/reference/respawn/native_server/operators/","title":"Operators","text":"<p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>Appears to be a scrapped feature. ::::</p>"},{"location":"Modding/reference/respawn/native_server/particles/","title":"Particles","text":"<p>Methods to create and manage particles</p>"},{"location":"Modding/reference/respawn/native_server/persistence/","title":"Persistence","text":"<p>Get a count of how many distinct values the given enum has.</p> <p>Get a count of how many distinct values the given enum has.</p> <p>Get a count of how many distinct values the given enum has.</p> <p>Returns true if the given enum value contains the given value.</p> <p>Get a count of how many elements the given item has.</p>"},{"location":"Modding/reference/respawn/native_server/playermelee/","title":"PlayerMelee","text":"<p>Do a lunge cone trace returning the target closest to center of screen</p> <p>Returns an array of entities that are inside a cone and visible to the player</p> <p>Do a trace for potential melee targets in front of player. Returns a table with keys <code>entity</code> and <code>position</code>, which is the hit entity and position</p>"},{"location":"Modding/reference/respawn/native_server/playlists/","title":"Playlists","text":""},{"location":"Modding/reference/respawn/native_server/precaching/","title":"Precaching","text":"<p>Before you can use any resource in the game it needs to be precached.</p> <p>Precache a weapon.</p> <p>Precache a model.</p> <p>Precache a material</p> <p>Precache an impact effects table.</p> <p>For more information about particles read the <code>native particle documentation &lt;particles-doc&gt;</code></p>"},{"location":"Modding/reference/respawn/native_server/recordedanimations/","title":"Recorded Animations","text":"<p>Loads an anim_recording asset generated by bakery.</p> <p>Can only load animations from rpaks.</p> <p>Returns the duration in seconds of the recorded anim.</p> <p>Calculates the position of the first frame of the recorded animation if it were played so that its reference origin/angles line up with the given origin/angles.</p>"},{"location":"Modding/reference/respawn/native_server/rodeo/","title":"Rodeo &amp; Leeching","text":""},{"location":"Modding/reference/respawn/native_server/rodeo/#rodeo","title":"Rodeo","text":"<p>This is to let code know the rodeoPilot has finished climbind on the rodeo and ready to fire</p>"},{"location":"Modding/reference/respawn/native_server/rodeo/#leeching","title":"Leeching","text":""},{"location":"Modding/reference/respawn/native_server/settings/","title":"Settings","text":""},{"location":"Modding/reference/respawn/native_server/settings/#player-settings","title":"Player Settings","text":"<p>Returns the value for the requested field from the corresponding .set file.</p> <p>Returns the value for the default health field from the corresponding .set file.</p> <p>Returns the value for the default health shield field from the corresponding .set file.</p> <p>Returns the value for the default health doomed field from the corresponding .set file.</p> <p>Returns a table with all the dodge related active settings for a given player</p> <p>Returns the value for the requested field from the corresponding .set file.</p>"},{"location":"Modding/reference/respawn/native_server/settings/#weapon-settings","title":"Weapon Settings","text":"<p>Given a weapon name, a list of weapon mods to apply, and key, returns the value of that field in that weapons info file.</p> <p>Given a weapon name, returns a list of the mods available on that weapon</p> <p>Given a weaon name and key, resolves a string key to its value in that weapons info file. assumes no mods set.</p> <p>Given a weapon name, a list of weapon mods to apply and key, returns the value of that field in that weapons info file.</p>"},{"location":"Modding/reference/respawn/native_server/settings/#ai-settings","title":"AI Settings","text":""},{"location":"Modding/reference/respawn/native_server/smartammo/","title":"Smart Ammo","text":""},{"location":"Modding/reference/respawn/native_server/sounds/","title":"Sounds","text":""},{"location":"Modding/reference/respawn/native_server/sounds/#playing-sounds","title":"Playing Sounds","text":""},{"location":"Modding/reference/respawn/native_server/sounds/#ai-sounds","title":"AI Sounds","text":"<p>Sounds the AI can react to</p> <p>Create a new sound event that AI can response to.</p> <p>Create a sound event that AI can respond to, specifying the owner of the sound.</p> <p>Create a sound event that AI can respond to, specifying who the sound should target.</p> <p>Create a sound event that AI can respond to, specifying who the sound should target, and the owner of the sound.</p>"},{"location":"Modding/reference/respawn/native_server/sp/","title":"Singleplayer","text":""},{"location":"Modding/reference/respawn/native_server/sp/#savegames","title":"SaveGames","text":"<p>Do a save.</p> <p>Do a save.</p> <p>Will call back <code>bool CodeCallback_SaveGameIsSafeToCommit()</code> to validate if it is ok to commit the save file.</p> <p>If there is an outstanding save commit, accept it asap.</p> <p>If there is an outstanding save commit, reject it asap.</p> <p>Do a restore.</p> <p>Checks if a file is ok to use.</p> <p>Return the script version of a save load.</p> <p>Return the script start point of a save load.</p> <p>Return the map name of a save load.</p>"},{"location":"Modding/reference/respawn/native_server/sp/#level-loading","title":"Level Loading","text":"<p>Loads a new level. The data in <code>transitionStruct</code> can be read in the next level with <code>GetLevelTransitionStruct()</code>.</p> <p>Reads the transition data set by <code>ChangeLevel()</code> on the previous map. Return <code>null</code> if this is the first map or the previous map didn\\'t supply any data.</p>"},{"location":"Modding/reference/respawn/native_server/sp/#timeshift","title":"Timeshift","text":""},{"location":"Modding/reference/respawn/native_server/sp/#bt-loadouts","title":"BT Loadouts","text":""},{"location":"Modding/reference/respawn/native_server/spawnpoints/","title":"Spawnpoints","text":""},{"location":"Modding/reference/respawn/native_server/spawnpoints/#getters","title":"Getters","text":"<p>Get pilot spawn points</p> <p>Get titan spawn points</p> <p>Get droppod spawn points</p> <p>Get pilot start spawn points for a team</p> <p>Get titan start spawn points for a team</p> <p>Get droppod start spawn for a team</p>"},{"location":"Modding/reference/respawn/native_server/spawnpoints/#sorting","title":"Sorting","text":""},{"location":"Modding/reference/respawn/native_server/spawnpoints/#ratings","title":"Ratings","text":""},{"location":"Modding/reference/respawn/native_server/statuseffects/","title":"Status Effects","text":"<p>Adds a status effect that will stop automatically after a given time.</p> <p>Adds a status effect</p> <p>Stops a status effect given its handle (return value of StatusEffect_AddTimed or StatusEffect_AddEndless).</p> <p>Stops all status effects of a given type. Returns the number that were stopped.</p>"},{"location":"Modding/reference/respawn/native_server/stryder/","title":"Stryder","text":"<p>Stryder is in a sense like the masterserver Northstar uses but for vanilla. It handles player data, matchmaking, servers and more.</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#lobbies","title":"Lobbies","text":"<p>Note</p> <p>Title</p> <p>Note :::</p> <p>Not exclusive to vanilla lobbies. These may be used in northstar as well ::::</p> <p>Methods for pregame lobbies.</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#parties","title":"Parties","text":"<p>Sends a group of players off to the party screen, possibly by allocating a server first</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#stryder-api","title":"Stryder API","text":"<p>Methods for communication with the vanilla master server</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#pin","title":"PIN","text":"<p>Some proprietary telemetry system used by respawn.</p> <p>Gets the platform name the way PIN likes it.</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#matchmaking","title":"Matchmaking","text":"<p>Gets the name of this server\\'s datacenter</p>"},{"location":"Modding/reference/respawn/native_server/stryder/#balancing","title":"Balancing","text":""},{"location":"Modding/reference/respawn/native_server/time/","title":"Time","text":"<p>For async code read <code>Threads, Signals and Flags &lt;async-doc&gt;</code> .</p> <p>Get ms since the VM has been started</p> <p>Does what it says on the tin</p>"},{"location":"Modding/reference/respawn/native_server/weapons/","title":"Weapon Utilities","text":""},{"location":"Modding/reference/respawn/native_server/weapons/#explosions","title":"Explosions","text":"<p>\\\"Creates an explosion. Does damage in an area, moves physics objects, plays effects.</p> <p>Creates an explosion. Does damage in an area, moves physics objects, plays effects.</p> <p>Same as Explosion_DamageDefSimple but specify damage and radius.</p> <p>Does silent, invisible damage in a spherical area.</p> <p>Does silent, invisible damage in a spherical area.</p> <p>Same as RadiusDamage_DamageDefSimple but specify damage and radius.</p>"},{"location":"Modding/reference/respawn/native_server/weapons/#weapon-utils","title":"Weapon Utils","text":""},{"location":"Modding/repak/","title":"Asset Types","text":"<p>/repak/assets/texture /repak/assets/material /repak/assets/uiatlas /repak/assets/datatable TODO</p>"},{"location":"Modding/repak/map/","title":"Map Files","text":""},{"location":"Modding/repak/map/#examples","title":"Examples:","text":""},{"location":"Modding/repak/map/#1-bare-minimum-no-assets","title":"1. Bare Minimum - No Assets","text":"<p><code>example1.json</code></p> <pre><code>{\n    \"version\": 7\n}\n</code></pre> <pre><code>root\n\u251c\u2500\u2500 RePak.exe\n\u251c\u2500\u2500 example1.json\n\u2514\u2500\u2500 build\n    \u2514\u2500 example1.rpak\n</code></pre> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>This example map file is honestly pretty useless. It has no assets, because there is no <code>files</code> field.</p> <p>It also will have the name <code>new.rpak</code> and will be created in the <code>./build</code> folder. ::::</p>"},{"location":"Modding/repak/map/#2-single-texture-single-starpak","title":"2. Single Texture + Single Starpak","text":"<p><code>example2.json</code></p> <pre><code>{\n    \"name\": \"example2\",\n    \"assetsDir\": \"../depot\",\n    \"outputDir\": \"../output\",\n    \"version\": 7,\n    \"starpakPath\": \"example2.starpak\",\n    \"files\":\n    [\n        {\n            \"$type\": \"txtr\",\n            \"path\": \"textures/models/my_texture\"\n        }\n    ]\n}\n</code></pre> <pre><code>root\n\u251c\u2500\u2500 RePak.exe\n\u251c\u2500\u2500 maps\n|   \u2514\u2500 example2.json\n\u251c\u2500\u2500 depot\n|   \u2514\u2500 textures\n|       \u2514\u2500 models\n|           \u2514\u2500 my_texture.dds\n\u2514\u2500\u2500 output\n    \u251c\u2500 example2.starpak\n    \u2514\u2500 example2.rpak\n</code></pre> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>This example map file creates an RPak named <code>example2.rpak</code> which contains 1 texture asset. This texture will have it\\'s higher resolution mip levels stored in example2.starpak ::::</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>The texture will replace any vanilla textures that have the same path. ( <code>textures/models/my_texture</code> )</p> <p>This is useful for creating basic skins and camos. ::::</p>"},{"location":"Modding/repak/map/#3-multiple-textures-multiple-starpaks","title":"3. Multiple Textures + Multiple Starpaks","text":"<p><code>example3.json</code></p> <pre><code>{\n    \"name\": \"example3\",\n    \"assetsDir\": \"../depot\",\n    \"outputDir\": \"../output\",\n    \"version\": 7,\n    \"starpakPath\": \"example3.starpak\",\n    \"files\":\n    [\n        {\n            \"$type\": \"txtr\",\n            \"path\": \"textures/models/my_texture_col\"\n        },\n        {\n            \"$type\": \"txtr\",\n            \"path\": \"textures/models/my_texture_nml\"\n        },\n        {\n            \"$type\": \"txtr\",\n            \"starpakPath\": \"example3-spc.starpak\",\n            \"path\": \"textures/models/my_texture_spc\"\n        }\n    ]\n}\n</code></pre> <pre><code>root\n\u251c\u2500\u2500 RePak.exe\n\u251c\u2500\u2500 maps\n|   \u2514\u2500 example3.json\n\u251c\u2500\u2500 depot\n|   \u2514\u2500 textures\n|       \u2514\u2500 models\n|           \u251c\u2500 my_texture_col.dds\n|           \u251c\u2500 my_texture_nml.dds\n|           \u2514\u2500 my_texture_spc.dds\n\u2514\u2500\u2500 output\n    \u251c\u2500 example3.starpak\n    \u251c\u2500 example3-spc.starpak\n    \u2514\u2500 example3.rpak\n</code></pre> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>This example map file creates an RPak named <code>example3.rpak</code> which contains 3 texture assets. These textures each have their higher resolution mip levels stored in starpaks.</p> <p><code>my_texture_col</code> and <code>mp_texture_nml</code> use <code>example3.starpak</code>, as they do not specify their own <code>starpakPath</code>. This makes them use the default <code>starpakPath</code> that is defined at the file scope, instead of in the individual textures.</p> <p><code>my_texture_spc</code> uses <code>example3-spc.starpak</code>, as it specifies it\\'s own <code>starpakPath</code>. ::::</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>This RPak is a good example of a skin that would normally require the skin tool to install. The advantage of this method is that the skin can be uninstalled or temporarily disabled when packed as a mod. ::::</p>"},{"location":"Modding/repak/map/#structure","title":"Structure:","text":""},{"location":"Modding/repak/map/#name","title":"<code>name</code>","text":"<p>The <code>name</code> field of a map file determines the name of the resulting RPak.</p> <p>The <code>name</code> is appended with <code>.rpak</code> and defaults to <code>new</code> if no <code>name</code> is provided. This results in a default RPak called <code>new.rpak</code>.</p> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>In the event that no <code>name</code> is provided in the map file, RePak will output the following warning to the console:</p> <p><code>Map file should have a 'name' field containing the string name for the new rpak, but none was provided. Defaulting to 'new.rpak' and continuing...\\n</code> ::::</p>"},{"location":"Modding/repak/map/#assetsdir","title":"<code>assetsDir</code>","text":"<p>The <code>assetsDir</code> field of a map file determines the root path which the program combines with the <code>path</code> for assets in order to find the correct file. This path may be a relative path, or an absolute path.</p> <p>The <code>assetsDir</code> provided in the map file is appended with a slash ( <code>\\</code> ) if necessary</p> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>If no <code>assetsDir</code> is provided, it defaults to the working directory ( <code>.\\</code> ) as well as outputting the following warning to the console:</p> <p><code>No assetsDir field provided. Assuming that everything is relative to the working directory.\\n</code> ::::</p>"},{"location":"Modding/repak/map/#outputdir","title":"<code>outputDir</code>","text":"<p>The <code>outputDir</code> field of a map file determines the folder that the program will write the RPak and StaRPak files to once they have been created. This path may be a relative path, or an absolute path.</p> <p>The <code>outputDir</code> provided in the map file is appended with a slash ( <code>\\</code> ) if necessary</p> <p>If no <code>outputDir</code> is provided in the map file, RePak defaults to <code>.\\build\\</code></p>"},{"location":"Modding/repak/map/#version","title":"<code>version</code>","text":"<p>The <code>version</code> field of a map file determines the RPak version that RePak will create.</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If no <code>version</code> field is provided, RePak will output the following error and the program will stop:</p> <p><code>Map file doesn't specify an RPak version\\nUse 'version: 7' for Titanfall 2 or 'version: 8' for Apex\\n</code> ::::</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If an invalid <code>version</code> field is provided, RePak will output the following error and the program will stop:</p> <p><code>Invalid RPak version specified\\nUse 'version: 7' for Titanfall 2 or 'version: 8' for Apex\\n</code> ::::</p>"},{"location":"Modding/repak/map/#list-of-known-version-values","title":"List of known <code>version</code> values:","text":"<ul> <li><code>6</code>: Titanfall 2: Tech Test [UNSUPPORTED]</li> <li><code>7</code>: Titanfall 2</li> <li><code>8</code>: Apex Legends</li> </ul>"},{"location":"Modding/repak/map/#starpakpath","title":"<code>starpakPath</code>","text":"<p>The <code>starpakPath</code> field of a map file determines the default starpak path for textures (and other streamed assets) to use.</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>If the starpak name ends in <code>_hotswap.starpak</code> (e.g. <code>my_thing_hotswap.starpak</code>) then Titanfall 2 will view it as optional. This allows the starpak to be moved, removed, or replaced while the game is running and streaming the texture. This can be useful for debugging. ::::</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>RePak will not throw any errors if no <code>starpakPath</code> field is specified, however the individual textures may throw errors if they do not have a <code>starpakPath</code> specified ::::</p>"},{"location":"Modding/repak/map/#files","title":"<code>files</code>","text":"<p>The <code>files</code> field of a map file is an array of JSON objects, each one representing an RPak asset.</p> <p>RePak will not throw any errors if no <code>files</code> field is specified, however the resulting RPak will contain no assets, rendering it useless.</p>"},{"location":"Modding/repak/assets/material/","title":"Materials - TODO","text":""},{"location":"Modding/repak/assets/material/#examples","title":"Examples:","text":""},{"location":"Modding/repak/assets/material/#asset-structure","title":"Asset Structure:","text":""},{"location":"Modding/repak/assets/texture/","title":"Textures","text":"<p>Textures are the foundation of some RPak asset types. They cannot be used directly by the game, but are instead referenced by other asset types which the game can use by itself.</p> <p>The image used by a texture must be in the .dds format and must be in one of the following compression types:</p> <ul> <li>BC1 SRGB</li> <li>BC2 SRGB</li> <li>BC3 SRGB</li> <li>BC7</li> <li>BC7 SRGB</li> <li>DXT1</li> <li>DXT3</li> <li>DXT5</li> <li>BC4U</li> <li>BC5U UNORM</li> </ul> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>SRGB DDS compression types are preferred, as they can prevent the texture\\'s colour from looking \\\"washed out\\\" ::::</p>"},{"location":"Modding/repak/assets/texture/#examples","title":"Examples:","text":""},{"location":"Modding/repak/assets/texture/#1-basic-texture-asset-no-streaming","title":"1. Basic Texture Asset - No streaming","text":"<pre><code>{\n    \"$type\": \"txtr\",\n    \"path\": \"textures/models/humans/test_texture\",\n    \"disableStreaming\": true\n}\n</code></pre> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>The image file in this texture asset will be called <code>test_texture.dds</code> and will be at <code>&lt;ASSETSDIR&gt;/textures/models/humans/test_texture.dds</code> ::::</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Because <code>disableStreaming</code> is <code>true</code>, this texture will not be stored in a .starpak file, and all mip levels will be stored in the .rpak file ::::</p>"},{"location":"Modding/repak/assets/texture/#2-streamed-texture-asset","title":"2. Streamed Texture Asset","text":"<pre><code>{\n    \"$type\": \"txtr\",\n    \"path\": \"textures/models/humans/test_texture_2\",\n    \"starpakPath\": \"test_texture_2.starpak\"\n}\n</code></pre> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>The image file in this texture asset will be called <code>test_texture_2.dds</code> and will be at <code>&lt;ASSETSDIR&gt;/textures/models/humans/test_texture_2.dds</code> ::::</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>Because <code>disableStreaming</code> is not present, this texture will have it\\'s higher resolution mip levels stored in <code>test_texture_2.starpak</code>, as defined by the <code>starpakPath</code>. It will not use the default <code>starpakPath</code> if one is defined outside of the <code>files</code> array ::::</p>"},{"location":"Modding/repak/assets/texture/#asset-structure","title":"Asset Structure:","text":""},{"location":"Modding/repak/assets/texture/#type","title":"<code>$type</code>","text":"<p>For an asset to be a texture asset, the <code>$type</code> field must be <code>\"txtr\"</code>.</p>"},{"location":"Modding/repak/assets/texture/#path","title":"<code>path</code>","text":"<p>The <code>path</code> field of a texture asset is used to determine the location in the RPak\\'s <code>assetsDir</code> that the image file is in.</p> <p>It is also used as the asset\\'s unique identifier, allowing other assets to reference and use it.</p> <p>The <code>path</code> field must start with <code>textures/</code> and must not end with a file extension.</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If RePak is unable to locate a file at the given <code>path</code>, it will output the following error to the console:</p> <p><code>Failed to find texture source file %s. Exiting...</code> where <code>%s</code> is the <code>path</code> field of the texture. ::::</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If the file at the given <code>path</code> is not a .dds file, RePak will output the following error to the console:</p> <p><code>Attempted to add txtr asset '%s' that was not a valid DDS file (invalid magic).</code> where <code>%s</code> is the <code>path</code> field of the texture. ::::</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If an unsupported .dds compression type is used, RePak will output the following error to the console:</p> <p><code>Attempted to add txtr asset '%s' that was not using a supported DDS type. Exiting...</code> where <code>%s</code> is the <code>path</code> field of the texture. ::::</p>"},{"location":"Modding/repak/assets/texture/#starpakpath","title":"<code>starpakPath</code>","text":"<p>The <code>starpakPath</code> field of a texture asset determines the path of the starpak in which the higher resolution mip levels should be stored.</p> <p>If no <code>starpakPath</code> value is specified, RePak will default to using the default <code>starpakPath</code>, defined at file scope in the map file.</p> <p>The <code>starpakPath</code> field should be a string, and importantly, should end in <code>.starpak</code>.</p> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>If the starpak name ends in <code>_hotswap.starpak</code> (e.g. <code>my_thing_hotswap.starpak</code>) then Titanfall 2 will view it as optional. This allows the starpak to be moved, removed, or replaced while the game is running and streaming the texture. This can be useful for debugging. ::::</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If the <code>starpakPath</code> is not present, and no <code>starpakPath</code> is defined at file scope, RePak will output the following error to the console.</p> <p><code>attempted to add asset '%s' as a streaming asset, but no starpak files were available. to fix: add 'starpakPath' as an rpak-wide variable or: add 'starpakPath' as an asset specific variable</code> where %s is the <code>path</code> of the texture asset ::::</p>"},{"location":"Modding/repak/assets/texture/#disablestreaming","title":"<code>disableStreaming</code>","text":"<p>The <code>disableStreaming</code> field of a texture asset determines if the texture should use a starpak to store the higher resolution mip levels.</p> <p>It should be a boolean value, with <code>true</code> disabling the use of a starpak,</p> <p><code>disableStreaming</code> defaults to <code>false</code> if it is not present.</p>"},{"location":"Modding/repak/assets/uiatlas/","title":"UI Image Atlases","text":"<p>UI Image Atlases (<code>uimg</code>) are what the game uses to store multiple UI assets, they reference a single texture asset, known as the <code>atlas</code> and have an array of <code>textures</code> which defines the different usable UI assets.</p>"},{"location":"Modding/repak/assets/uiatlas/#examples","title":"Examples:","text":""},{"location":"Modding/repak/assets/uiatlas/#1-basic-ui-image-atlas-with-2-textures","title":"1. Basic UI Image Atlas with 2 Textures","text":"<pre><code>{\n    \"$type\":\"uimg\",\n    \"path\":\"rui/atlas/example1\",\n    \"atlas\":\"rui/example1\",\n    \"textures\":\n    [\n        {\n            \"path\":\"rui/example1/texture1\",\n            \"width\":128,\n            \"height\":128,\n            \"posX\":0,\n            \"posY\":0\n        },\n        {\n            \"path\":\"rui/example1/texture2\",\n            \"width\":128,\n            \"height\":128,\n            \"posX\":128,\n            \"posY\":0\n        }\n    ]\n}\n</code></pre> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>This UI Image Atlas expects a texture with the path of <code>rui/example1</code> which is at least 256x128 ::::</p>"},{"location":"Modding/repak/assets/uiatlas/#2-full-map-file-with-a-ui-image-atlas","title":"2. Full Map File With a UI Image Atlas","text":"<pre><code>{\n    \"name\":\"blue_fire\",\n    \"assetsDir\":\"../depot\",\n    \"outputDir\":\"../rpaks\",\n    \"version\": 7,\n    \"files\":[\n        {\n            \"$type\":\"txtr\",\n            \"path\":\"rui/blue_fire\"\n        },\n        {\n            \"$type\":\"uimg\",\n            \"path\":\"rui/atlas/blue_fire\",\n            \"atlas\":\"rui/blue_fire\",\n            \"textures\":[\n                {\n                    \"path\":\"blue_fire/hud/flame_wall\",\n                    \"width\":128,\n                    \"height\":128,\n                    \"posX\":0,\n                    \"posY\":0\n                },\n                {\n                    \"path\":\"blue_fire/menu/flame_wall\",\n                    \"width\":128,\n                    \"height\":128,\n                    \"posX\":128,\n                    \"posY\":0\n                },\n                {\n                    \"path\":\"blue_fire/hud/flame_shield\",\n                    \"width\":128,\n                    \"height\":128,\n                    \"posX\":0,\n                    \"posY\":128\n                },\n                {\n                    \"path\":\"blue_fire/menu/flame_shield\",\n                    \"width\":128,\n                    \"height\":128,\n                    \"posX\":128,\n                    \"posY\":128\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>This map file is a shortened version of the one used in EXRILL\\'s Blue Fire mod ::::</p>"},{"location":"Modding/repak/assets/uiatlas/#asset-structure","title":"Asset Structure:","text":""},{"location":"Modding/repak/assets/uiatlas/#type","title":"<code>$type</code>","text":"<p>For an asset to be a UI Image Atlas asset, the <code>$type</code> field must be <code>\"uimg\"</code>.</p>"},{"location":"Modding/repak/assets/uiatlas/#path","title":"<code>path</code>","text":"<p>The <code>path</code> field for a UI Image Atlas asset is mostly unused, and as such can be set to almost any value. It is used when logging information about the asset.</p>"},{"location":"Modding/repak/assets/uiatlas/#atlas","title":"<code>atlas</code>","text":"<p>The <code>atlas</code> field for a UI Image Atlas asset determines which texture asset it will use.</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If the uimg asset doesn\\'t contain a valid <code>atlas</code> field, RePak will output one of the following errors to the console:</p> <p><code>Required field 'atlas' not found for uimg asset '%s'. Exiting...</code></p> <p><code>'atlas' field is not of required type 'string' for uimg asset '%s'. Exiting...</code></p> <p>where <code>%s</code> is the <code>path</code> field of the UI Image Atlas ::::</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If the texture asset cannot be found, RePak will output the following message to the console before exiting:</p> <p><code>Atlas asset was not found when trying to add uimg asset '%s'. Make sure that the txtr is above the uimg in your map file. Exiting...\"</code></p> <p>where <code>%s</code> is the <code>path</code> field of the UI Image Atlas ::::</p>"},{"location":"Modding/repak/assets/uiatlas/#textures","title":"<code>textures</code>","text":"<p>The <code>textures</code> array in a UI Image Atlas asset defines the different UI textures that the atlas contains. Any number of UI textures may be contained within one UI Image Atlas.</p>"},{"location":"Modding/repak/assets/uiatlas/#path_1","title":"<code>path</code>","text":"<p>An entry in the <code>textures</code> array must have a <code>path</code> field, as the game must use it to identify and show the texture.</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If the entry in the <code>textures</code> array doesn\\'t contain a valid <code>path</code> field, RePak will output one of the following errors to the console:</p> <p><code>Required field 'path' not found for a texture in uimg asset '%s'. Exiting...</code></p> <p><code>'path' field is not of required type 'string' for a texture in uimg asset '%s'. Exiting...</code></p> <p>where <code>%s</code> is the <code>path</code> field of the UI Image Atlas ::::</p>"},{"location":"Modding/repak/assets/uiatlas/#width-and-height","title":"<code>width</code> and <code>height</code>","text":"<p>An entry in the <code>textures</code> array must have both a <code>width</code> and a <code>height</code> field, these values should both be integers.</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If the entry in the <code>textures</code> array doesn\\'t contain a valid <code>width</code> or a valid <code>height</code> field, RePak will output one of the following errors to the console:</p> <p><code>Required field 'width' not found for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>Required field 'height' not found for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>'width' field is not of required type 'number' for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>'height' field is not of required type 'number' for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p>where the first <code>%s</code> is the <code>path</code> field of the texture, and the second <code>%s</code> is the <code>path</code> field of the UI Image Atlas ::::</p>"},{"location":"Modding/repak/assets/uiatlas/#posx-and-posy","title":"<code>posX</code> and <code>posY</code>","text":"<p>An entry in the <code>textures</code> array must have both a <code>posX</code> and a <code>posY</code> field, these values should both be integers. These fields determine the location of the top-left pixel in the UI texture.</p> <p>Error</p> <p>Title</p> <p>Error :::</p> <p>If the entry in the <code>textures</code> array doesn\\'t contain a valid <code>posX</code> or a valid <code>posY</code> field, RePak will output one of the following errors to the console:</p> <p><code>Required field 'posX' not found for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>Required field 'posY' not found for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>'posX' field is not of required type 'number' for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p><code>'posY' field is not of required type 'number' for texture '%s' in uimg asset '%s'. Exiting...</code></p> <p>where the first <code>%s</code> is the <code>path</code> field of the texture, and the second <code>%s</code> is the <code>path</code> field of the UI Image Atlas ::::</p>"},{"location":"Modding/reverse-engineering/introduction/","title":"Introduction","text":"<p>The documentation for reverse engineering Titanfall2, adding new hooks to Northstar using information gathered during reverse engineering etc. is very much incomplete.</p> <p>If you have experience with reversing Titanfall2 to develop for Northstar or just reverse engineering experience in general, feel free to add more information here, be it tools, workflows, etc.</p>"},{"location":"Modding/squirrel/","title":"Index","text":"<p>squirrel_re =========</p> <p>Squirrel is the programming language used by Respawn. A lot of the logic for the game is written in squirrel scripts because of how convenient it is, even for people with little programming knowledge.</p> <p>Squirrel is an dynamically typed interpreted language that is compiled to bytecode when loading. The version of squirrel used by Respawn is heavily modified. Most notable is the added optional static typing of the language.</p> <p>Respawn\\'s fork branched off at version 2.3 of vanilla squirrel so newer features do not exist, like generators.</p> <p>Because of how different Respawn\\'s fork of squirrel is, the language is often called \\\"squirrel_re\\\" or \\\"squirrel_re\\\" (the official name found in Apex Legends).</p>"},{"location":"Modding/squirrel/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>TODO</p> <p>Info</p> <p>see refactoring.md for more info :::</p>"},{"location":"Modding/squirrel/#notepad","title":"Notepad++","text":"<p>For Notepad++, define a custom language for Squirrel. Luckily, samisalreadytaken has written a squirrel highlighter.</p> <ol> <li>Download Squirrel.xml</li> <li>At the top, edit <code>ext=\"nut\"</code> to <code>ext=\"nut gnut\"</code> so it works with     gnut files as well</li> <li>Open Notepad++</li> <li>Navigate to Language &gt; User Defined Language &gt; Define your     language</li> <li>Click import, and select Squirrel.xml</li> </ol> <p>(If the colors/style are not to your taste) 1. Select <code>Squirrel</code> in User Language at the top 2. Navigate through the tabs to find what you want to change 3. Click its <code>Styler</code> button and make the changes you wish to</p>"},{"location":"Modding/squirrel/#vscode","title":"VSCode","text":"<p>RespawnSquirrel has been added to the vscode marketplace, you can download it here</p> <p>Otherwise you can simply search \\\"Respawn Squirrel\\\" in the extensions tab</p>"},{"location":"Modding/squirrel/#kate","title":"Kate","text":"<p>Kate syntax highlighting for Squirrel</p> <p>!!! info[note from @cazdotwav] im not sure why this was here but i think it might be important TODO <pre><code>/squirrel/intro /squirrel/types/index /squirrel/functions\n/squirrel/statements /squirrel/class /squirrel/async\n/squirrel/networking\n</code></pre> :::</p>"},{"location":"Modding/squirrel/async/","title":"Threads, Signals and Flags","text":""},{"location":"Modding/squirrel/async/#threads","title":"Threads","text":"<p>Squirrel allows scripts to spin off function calls in a thread. All subsequential function calls will be threaded as well.</p> <p>In threaded functions, it\\'s possible to halt a threaded function with <code>wait</code> statements, signals, flags and by suspending a thread object.</p> <p>You can use the <code>IsNewThread()</code> function to determine if the current function is threaded off.</p> <p>For more information, check out the squirrel documentation on threads and sq functions of threads. SquirrelRe is very similar to vanilla squirrel in this regard.</p> <p>A thread is considered finished, after the threaded function returned a value. This may be <code>null</code>.</p>"},{"location":"Modding/squirrel/async/#spinning-off-a-thread","title":"Spinning off a thread","text":"<p>To create a new coroutine, call a function with the <code>thread</code> keyword before.</p> <pre><code>thread void function(){}()\nthread MyFunction()\n</code></pre> <p>To get a thread object, use the <code>newthread</code> function.</p> <pre><code>void function CoroutineExample()\n{\n    suspend( \"passback\" ) // passback is optional\n    print( \"threaded statement\" )\n}\n\nvar co = newthread( CoroutineExample )\nvar suspendedReturn = co.call() // you NEED to use .call, invoking the function with () won't work\nco.wakeup() // continue thread\n</code></pre>"},{"location":"Modding/squirrel/async/#wait","title":"wait","text":"<p>The <code>wait</code> statement halts threads for a set amount of time specified after the <code>wait</code> keyword. Integers and floats are accepted as times in seconds.</p> <pre><code>void function WaitExample( float n )\n{\n    wait 1 // wait 1 second\n    wait n // wait n seconds\n}\n\nthread WaitExample( 0.5 ) // thread will halt for a total 1.5 seconds\n</code></pre> <p>To wait a single frame, don\\'t use <code>wait 0</code> since it doesn\\'t actually wait a game frame. For example, if you have a client loop that does wait 0 even if the game is paused the loop will still run. Use <code>WaitFrame()</code> instead.</p> <p>When using infinite loops it\\'s important to work with <code>wait</code> statements to avoid the game freezing.</p> <p>If you want to wait until a thread is finished, you can spin off the thread that you wait for with the <code>waitthread</code> keyword.</p> <pre><code>void function ParentThread()\n{\n    printt( \"pre spinoff \" + string( Time() ) )\n    waitthread void function()\n    {\n        printt( \"mid spinoff \" + string( Time() ) )\n        wait 1\n    }\n    printt( \"post spinoff\" + string( Time() ) )\n}\n</code></pre>"},{"location":"Modding/squirrel/async/#onthreadend","title":"OnThreadEnd","text":"<p>Use the <code>OnThreadEnd</code> function to execute a callback after a thread has ended. This is useful for cleanup functions that remove entities after they\\'re used or similar.</p> <pre><code>void function PlayIncomingFX( vector origin, int teamNum )\n{\n    wait 1.50\n    EmitSoundAtPosition( teamNum, origin, \"Titan_1P_Warpfall_Start\" )\n\n    local colorVec = Vector( 0, 255, 0 )\n    entity cpoint = CreateEntity( \"info_placement_helper\" )\n    SetTargetName( cpoint, UniqueString( \"pickup_controlpoint\" ) )\n    DispatchSpawn( cpoint )\n    cpoint.SetOrigin( colorVec )\n    entity glowFX = PlayFXWithControlPoint( INCOMING_SPAWN_FX, origin, cpoint, -1, null, null, C_PLAYFX_LOOP )\n\n    OnThreadEnd(\n        function() : ( glowFX, cpoint )\n        {\n            if ( IsValid( glowFX ) )\n                glowFX.Destroy()\n            if ( IsValid( cpoint ) )\n                cpoint.Destroy()\n        }\n    )\n\n    wait 1.25\n}\n</code></pre>"},{"location":"Modding/squirrel/async/#example-script","title":"Example Script","text":"<pre><code>void function SetPositionDelayed( entity ent, vector pos, float delay )\n{\n    wait delay\n    ent.SetOrigin( pos )\n}\n\nSetPositionDelayed( player, &lt;0, 0, 100&gt;, 5.0 )\nSetPositionDelayed( player, &lt;0, 0, 50&gt;, 2.5 ) // this will finish sooner.\n</code></pre>"},{"location":"Modding/squirrel/async/#signals-and-flags","title":"Signals and flags","text":"<p>Signals and flags allow threads to wait for events before running some code.</p>"},{"location":"Modding/squirrel/async/#signals","title":"Signals","text":"<p>Registers a Signals to use on any entity. It\\'s required to register signals before using them.</p> <p><code>../reference/respawn/entities</code> </p> <p>Trigger a signal on this entity. The passed <code>results</code> will be returned by <code>WaitSignal</code>.</p> <p>Ends this thread when the identifier is signaled on this entity</p> <p>Halts this thread until a signal is activated for this entity</p> <p>Register a callback that executes when the <code>signal</code> has been fired on this Entity</p> <p>Disconnects the callback from the signal.</p> <p>Connects an output on this entity to an input on another entity via code. The <code>target</code> can be a name or a named entity.</p> <p>Fire a signal on this entity, with optional parm and delay</p> <p>Fire a signal on this entity, with optional parm and delay (synchronous)</p> <p>It\\'s also possible to trigger and catch signals with methods that aren\\'t properties of an entity.</p> <p>Trigger a signal on <code>ent</code>. The passed <code>results</code> will be returned by <code>WaitSignal</code>.</p> <p>Wait for any of the passed signals to be triggered.</p> <pre><code>// Wait for the NPC to die, delete, or get leeched, then remove the npc from the array\nWaitSignal( ent, \"OnDeath\", \"OnDestroy\", \"OnLeeched\" )\n</code></pre> <p>Ends this thread when the identifier is signaled on <code>ent</code></p>"},{"location":"Modding/squirrel/async/#example","title":"Example","text":"<p>For example, if we want to tell a player not to give up after being killed several times, we can write it this way:</p> <pre><code>// First, we register signal we want to use\nRegisterSignal(\"OnMultipleDeaths\")\n\n\nvoid function WatchForDeaths (entity player) \n{\n    int deathsCount = 0\n\n    while( GamePlayingOrSuddenDeath() )\n    {\n        if ( player.isDead() )  // This doesn't exist, don't try this at home\n        {\n            deathsCount += 1\n\n            if (deathsCount &gt;= 42)\n            {\n                // This sends \"OnMultipleDeaths\" signal on player entity\n                player.Signal( \"OnMultipleDeaths\" )\n            } \n        }\n    }\n}\n\n\nvoid function DontGiveUp (entity player)\n{\n    // This is a blocking call\n    player.WaitSignal(\"OnMultipleDeaths\");\n\n    // This will not run until entity received \"OnMultipleDeaths\" signal\n    SendHudMessage( player, \"Don't give up!\", -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )\n}\n\n// Launch our methods in dedicated threads\nentity player = GetPlayerArray()[0]\nthread WatchForDeaths( player )\nthread DontGiveUp( player )\n</code></pre> <p>In this example, the <code>DontGiveUp</code> method is launched at the same time as <code>WatchForDeaths</code>; but it will not run until player died 42 times.</p> <p>When you want your thread to die on a given event, you can use <code>entity.EndSignal( \"OnMultipleDeaths\" )</code>; when said signal is set, thread will end (after calling any OnThreadEnd methods).</p>"},{"location":"Modding/squirrel/async/#flags","title":"Flags","text":"<p><code>Flags</code> work pretty much the same way as <code>Signals</code>, except they can be set up without target entity:</p> <p>Create a flag</p> <p>Halts a thread until a flag is set. Callee must be threaded off.</p> <p>Halts until every passed flag is set. Callee must be threaded off.</p> <p>Halts until the passed flag is set or the timer runs out. Callee must be threaded off.</p> <p>Raise a flag</p> <p>Set <code>flagset</code> after <code>flagwait</code> is set and the delay is met.</p> <p>Reset a flag</p> <p>Resets all passed flags.</p> <p>Reset <code>flagclear</code> when <code>flagwait</code> is set.</p> <p>Resets a flag after the timer runs out.</p> <p>Wait until any passed flag is cleared.</p> <p>Raise a flag if it is reset, or reset it if it\\'s raised.</p> <p>Ends this thread when the flag is set</p> <p>Returns the current state of a flag.</p> <p>Returns <code>true</code> if the flag is initialized</p> <p>Splits the flag on <code>\" \"</code></p> <p>Splits the value of the keyvalues of the entity on the index <code>field</code> on <code>\" \"</code></p>"},{"location":"Modding/squirrel/async/#example_1","title":"Example","text":"<pre><code>void function FlagExample()\n{\n    FlagInit( \"BombHasExploded\" )\n\n    thread BombTicker()\n\n    FlagWait( \"BombHasExploded\" )\n    print( \"bomb just exploded\" )\n}\n\nvoid function BombTicker()\n{\n    Assert( IsNewThread(), \"BombTicker must be threaded off\" )\n    wait RandomFloatRange( 3, 9 )\n    FlagSet( \"BombHasExploded\" )\n}\n</code></pre>"},{"location":"Modding/squirrel/class/","title":"Classes","text":"<p>Note</p> <p>Title</p> <p>Note :::</p> <p>The version Respawn is using differs in some places from classes that are in use in Squirrel 3.x</p> <p>This is by no means complete. Please add anything you know. ::::</p>"},{"location":"Modding/squirrel/class/#declaring-classes","title":"Declaring Classes","text":"<p>To declare a class, first add the <code>untyped</code> keyword and the class as a variable at file level.</p> <pre><code>untyped\nvar ExampleClass\n</code></pre> <p>The <code>untyped</code> declaration is required because instances have an unknown type and it\\'s not possible to use classes as types.</p> <p><code>var [classname]</code> represents the class. After declaring the class inside of a function you can use it in the script. You can use any type that can hold vars to store classes. Refer to Namespaces for more info.</p> <p>If needed, add the global keyword for the variable to make the class usable everywhere in the vm.</p> <p>It\\'s not possible to declare classes on local variables. It\\'s required to declare the class inside of a function.</p> <p>Most classes use a constructor. A constructor is a function of the instance that gets executed on object creation.</p> <pre><code>void function initClient() {\n    class ExampleClass {\n        constructor(){print(\"Instance of ExampleClass created\");}\n    }\n}\n</code></pre> <p>You can require parameters in the constructor. Keep in mind that you have to pass those when creating an object.</p> <p>Function parameters are passed as type <code>var</code>, but the type keyword is not required. <code>constructor( parameter ){}; func( parameter ){};</code> and <code>constructor( var parameter ){}; func( var parameter ){};</code> are both correct.</p> <pre><code>class ExampleClass {\n        propertyString = null // Actual type is var\n        propertyInt = null // Actual type is var\n        constructor( var pString, var pInt ) {\n            this.propertyString = expect string(pString);\n            this.propertyInt = expect int(pInt);\n        }\n}\n\n// See section \"Declaring Objects\" for more information on object creation\nvar obj = ExampleClass( \"foo\", 1 );\nprintt(obj.propertyString, obj.propertyString ) // foo, 1\nvar lObj = ExampleClass(); tObj = ExampleClass( \"\" , 0 , 0); // Both throw an error compile time because parameters don't match with the constructor\n</code></pre> <p>Usually objects have properties. To define them, just add their identifier into the class without type declaration. The properties will be of type <code>var</code>. However, you are required to set a default value of a property. This may be <code>null</code>.</p> <p>Every object has a reference to itself called <code>this</code>. You can change parameters of an object by reference.</p> <pre><code>void function initClient() {\n    class ExampleClass {\n        property = null\n        constructor( var parameter ) {\n            this.property = expect int(parameter);\n        }\n    }\n}\n</code></pre> <p>You can\\'t use the class name as a type. Use <code>var</code> instead. You can\\'t <code>expect</code> them either.</p>"},{"location":"Modding/squirrel/class/#declaring-functions-of-classes","title":"Declaring Functions of Classes","text":"<p>Functions of a class have to return a value of type <code>var</code>. This may be <code>null</code>. Define functions like this:</p> <pre><code>global var ExampleClass;\nvoid function initClassF(){\n    class ExampleClass {\n        variable = \"default value\"\n\n        // Set field 'variable' of this instance to passed parameter\n        function setV( pV ){\n            this.variable = pV\n        }\n\n        // Return field 'variable' of this instance\n        function getV(){\n            return this.variable; // return value can be of any type\n        }\n    }\n    var inst = ExampleClass();\n    print(inst.getV()); // -&gt; default value\n    inst.setV(\"new value\");\n    print(inst.getV()); // -&gt; new value\n}\n</code></pre>"},{"location":"Modding/squirrel/class/#inserting-properties-into-classes","title":"Inserting Properties Into Classes","text":"<p>It\\'s possible to insert more properties into a class at runtime. To achieve this, use the <code>&lt;-</code> operator.</p> <pre><code>// Using ``ExampleClass`` and ``exampleObject`` from example above\nExampleClass.newProperty &lt;- \"New property in class\"\n// The value of the new index may be of any type.\nExampleClass.newFunc &lt;- function(){return \"Function return value\";}\n</code></pre> <p>Note</p> <p>Title</p> <p>Note :::</p> <p>It is not possible to insert new fields into an instance or a class after instantiation</p> <p><pre><code>var ExampleErrorClass;\n\nfunc(){\n    class ExampleErrorClass {};\n    var eInst = ExampleErrorClass()\n    eInst.e &lt;- \"Instance error value\"; // Asserts error: class instances do not support the new slot operator\n    ExampleErrorClass.e &lt;- \"Class error value\"; // Fails because an instance of class ExampleErrorClass has already been created. Asserts error: trying to modify a class that has already been instantiated\n}\n</code></pre> ::::</p> <p>Inserting functions is also possible using the <code>::</code> operator</p> <pre><code>function ExampleClass::AddOne( var param /* parameters have to be var */ ){ return expect int( param ) + 1 }\nvar e = ExampleClass()\nprint( expect int( e.AddOne( 1 ) ) ) // prints 2\n</code></pre> <p>This allows mods to extend functionality of classes declared in the base game and other mods that have already been loaded.</p> <p>For example, extending functionality of the CPlayer class might look like this:</p> <pre><code>global function InitCPlayerInsert\n\nvoid function InitCPlayerInsert()\n{\n        CPlayer.afkCount &lt;- 0 // Insert new property into the CPlayer class\n        CPlayer.maxAFKCount &lt;- 3\n        function CPlayer::AFK(){ // Kick a player when they are afk multiple times in a match\n                if ( this.afkCount &gt;= this.maxAFKCount )\n                        ClientCommand( this, \"disconnect You have been AFK too often in a match\")\n                else\n                {\n                        this.afkCount++\n                        SendHudMessage( this, format( \"You are AFK!\\nYou will get kicked after %i more violations\", this.maxAFKCount - this.afkCount ), -1, 0.4, 255, 255, 255, 0, 0.5, 5, 0.9 )\n                }\n        }\n\n        // To trigger the method, do GetPlayerArray()[0].AFK()\n}\n</code></pre> <p>This will allow scripts to run the <code>AFK</code> method on CPlayer entities, which will kick a player after 3</p> <p>Make sure to load this script after the class has been declared and before it\\'s instantiated!</p> <p>Note that any properties added to classes don\\'t apply to other classes that are inherited from a modified class.</p>"},{"location":"Modding/squirrel/class/#instantiating-objects","title":"Instantiating Objects","text":"<p>To create an instance, do:</p> <pre><code>class ExampleClass {\n    property = null\n    constructor( var parameter ) {\n        this.property = expect int(parameter);\n    }\n}\n\nvar exampleObject = ExampleClass(1);\nint n = exampleObject.property // n = 1\nexampleObject.property++;\nn = exampleObject.property // n = 2\n</code></pre> <p>It\\'s also possible to create an instance without calling the constructor.</p> <pre><code>// Using 'ExampleClass' from previous examples\nvar e = ExampleClass.instance()\ne.constructor(1) // Constructor is a normal function so you can call it manually.\n</code></pre> <p>Like the example above shows you can manipulate properties of a class directly. There is no way to make a private property.</p> <p>Methods from a class can be accessed without an instance. Note that the class itself doesn\\'t have a reference to itself, meaning that the <code>this</code> keyword refers to the root table.</p> <pre><code>var class = ExampleClass\nvar instance = class.constructor()\n</code></pre>"},{"location":"Modding/squirrel/class/#cloning-instances","title":"Cloning Instances","text":"<p>Unlike other types, passing an object does not pass a copy of the object, but a reference to itself. This means that any modifications inside of a function are applied to the original object.</p> <pre><code>void function initClass(){\n    class Container {\n        content = null\n        constructor ( var pString ) {\n            this.content = expect string(pString);\n        }\n    }\n    var con = Container(\"original string\")\n    manipulateContainer( con )\n    print(con.content) // -&gt; manipulated string\n}\n\nvoid function manipulateContainer( var con ){\n    con.content = \"manipulated string\";\n}\n</code></pre> <p>You can avoid this by using cloned objects. Use the <code>clone</code> keyword to create a copy of an object.</p> <pre><code>// Assumes the 'Container' class from the previous example has already been declared\nvoid function initClass(){\n    var originalObj = Container(\"original string\")\n    var clonedObj = clone originalObj\n    manipulateContainer( clonedObj )\n    printt(orignalObj.content, clonedObj.content) // -&gt; original string, manipulated string\n}\n\nvoid function manipulateContainer( var con ){\n    con.content = \"manipulated string\";\n}\n</code></pre>"},{"location":"Modding/squirrel/class/#namespaces","title":"Emulating Namespaces","text":"<p>Instead of declaring classes as a global var, you can use other types such as tables to hold multiple class objects that emulate the behaviour of namespaces to a certain extend.</p> <pre><code>global table&lt;string, var&gt; fakeNamespace = {\n        class1 = null,\n        class2 = null\n}\n</code></pre> <p>This allows you to group classes together in a single global variable.</p> <p>You can use the classes inside of the table like this:</p> <pre><code>// Create a class object in field\nclass fakeNamespace.class1 { constructor(){ print(\"constructing instance of class1\") } }\nclass fakeNamespace.class2 { constructor(){ print(\"constructing instance of class2\") } }\n\n// Access class object in field\nvar c1 = fakeNamespace.class1()\nvar c2 = fakeNamespace.class2()\n\n// Insert functions into class object in field\nfakeNamespace.class1.testfunc &lt;- var function(){ print( \"inserted function in class1\" ) }\n</code></pre> <p>You can also declare classes in an array:</p> <pre><code>array&lt;var&gt; classes // This has to be at file level\n\n// This has to be inside of a function:\nclasses.append( class { constructor(){ print( \"inline constructor\" ) } )\nvar instance = classes[0]()\n</code></pre> <p>And in a similar fashion in structs:</p> <pre><code>struct {\n        var class1 = null\n        var class2 = null\n} classes // This has to be at file level\n\n// This has to be inside of a function:\nclasses.class1 = class { constructor(){ print( \"inline constructor\" ) } )\nclasses.class2 = class { constructor(){ print( \"inline constructor\" ) } )\nvar c1 = classes.class1()\nvar c2 = classes.class2()\n</code></pre> <p>Warning</p> <p>Title</p> <p>Warning :::</p> <p>Respawn\\'s fork doesn\\'t appear to support inheritance. Using the <code>extend</code> keyword won\\'t compile.</p> <p><pre><code>class Child extends Parent{}\n</code></pre> ::::</p> <p>Make sure you check out the squirrel documentation on classes and built in class instance methods for more information.</p>"},{"location":"Modding/squirrel/functions/","title":"Functions &amp; Closures","text":"<p>Functions are an integral part of any programming language. They allow to repeat blocks of code whenever and however often is needed.</p>"},{"location":"Modding/squirrel/functions/#declaring-functions","title":"Declaring Functions","text":"<p>Functions in squirrel are defined with this syntax: <code>&lt;return type&gt; function &lt;name&gt;(&lt;parameters&gt;) &lt;body&gt;</code></p> <p>For example, a simple function that returns either <code>true</code> or <code>false</code> would look like this:</p> <pre><code>bool function CoinFlip()\n{\n  return RandomInt( 2 ) == 0 // generate a random number from 0 - 1\n}\n</code></pre> <p>It is not possible to have multiple functions that share the same name (often called \\\"overriding\\\" functions). Every function needs to have an unique name from any global or local variable or function.</p>"},{"location":"Modding/squirrel/functions/#returning-data","title":"Returning Data","text":"<p>If you need some data after a function is finished (for example after a calculation), you need to return that data.</p> <p>You can return anything, however the type of the returned variable needs to match with the return type of the function.</p> <pre><code>string function GetNorthstarName()\n{\n return \"Northstar\" // this would be valid\n return 1 // this would be invalid because the function needs to return a string\n}\n</code></pre> <p>Keep in mind that no code after a return statement will get executed.</p> <p>If you don\\'t want to return any value, use <code>void</code> as the return type.</p> <p>This indicates that your function returns <code>null</code>.</p> <p>If nothing is returned by a function, <code>null</code> will get returned implicitly.</p> <pre><code>void function ReturnNull()\n{\n  // return null regardless what happens, this all does the same\n  switch( RandomInt( 3 ) )\n  {\n    case 0:\n      return\n    case 1:\n      return null\n  }\n\n  // only if a 2 was rolled, code here will be executed before the other paths already returned.\n  // because a return statement is lacking, null is getting returned implicitly.\n}\n</code></pre> <p>In <code>untyped</code> files you may leave out the return type. In those cases the return type will default to <code>var</code>.</p>"},{"location":"Modding/squirrel/functions/#parameters","title":"Parameters","text":"<p>Parameters are the input a function gets when called. They are local variables whose values come from the calling function.</p> <pre><code>void function main()\n{\n int refcount = 0\n refcount = IncreaseRefcount( refcount )\n Assert( refcount == 1 )\n}\n\nint function IncreaseRefcount( int n )\n{\n return n + 1\n}\n</code></pre>"},{"location":"Modding/squirrel/functions/#optional-parameters","title":"Optional parameters","text":"<p>Sometimes you need parameters that are optional for a function, like extra options. If a parameter name is followed by <code>= &lt;default-value&gt;</code>, that parameter is not required to call the function.</p> <p>Optional parameters need to be the last parameters of a function.</p> <pre><code>void function main()\n{\n array a = [ 1, 2, 3, 4 ]\n PopN( a )\n PopN( a, 2 )\n\n Assert( a.len() == 1 )\n}\n\nvoid function PopN( array arr, int n = 1 )\n{\n for ( int i; i &lt; n; i++ )\n {\n   arr.pop()\n }\n}\n</code></pre>"},{"location":"Modding/squirrel/functions/#vargs","title":"vargs","text":"<p>With vargs you can pass a function an unlimited amount of parameters. The parameters will be inside a pseudo array called <code>vargv</code>. The length of the vargs the function receives will be stored inside a variable called <code>vargc</code>.</p> <p>You can denote a function to have vargs with adding <code>...</code> to the end of the parameter list.</p> <pre><code>string function CombineStuff( string base, ... )\n{\n string s = base\n for ( int i; i &lt; argc; i++ )\n {\n   base += vargv[i].tostring()\n }\n}\n</code></pre>"},{"location":"Modding/squirrel/functions/#closures","title":"Closures","text":"<p>Closures are functions that are anonymous (unnamed) functions created in a specific script context that can use variables from the parent scope.</p> <pre><code>void function main()\n{\n void functionref() fn = void function(){ print( \"I'm a closure\" ) } // create a closure\n fn() // call the closure\n}\n</code></pre> <p>Closures can capture variables from their parent scope.</p> <pre><code>void function PlayFXOnEntity( entity ent )\n{\n   int fxHandle = StartParticleEffectOnEntity( ent, PILOT_THROWN_TICK_WARNING, FX_ATTACH_POINT_FOLLOW, ent.LookupAttachment( \"head_base\" )\n   OnThreadEnd( void function() : ( fxHandle ){ EffectStop( fxHandle, false, true ) } ) // create a function to stop the fx effect and give it the fx handle it needs\n   ent.EndSignal( \"OnDestroy\" ) // stop the thread when the entity dies\n   WaitForever()\n}\n</code></pre>"},{"location":"Modding/squirrel/intro/","title":"Introduction","text":"<p>Squirrel is a high level imperative, object-oriented programming language used in Titanfall to script large amounts of content in the game.</p> <p>Respawn modified large parts of the language to fit their needs, for example adding a static type compiler to the language.</p> <p>Squirrel still allows you to write dynamically typed code but this is discouraged if possible.</p> <p>The syntax of squirrel is very similar to C++ or Javascript and very easy to learn.</p> <p>The programmer doesn\\'t need to think about memory management in scripts since all objects are refcounted and the garbage collector can be invoked manually.</p> <pre><code>int function fibonacci( int n )\n{\n if ( n &lt; 2 )\n   return n\n\n return fibonacci( n - 1 ) + fibonacci( n - 2 )\n}\n</code></pre> <p>The language provides easy interfaces for coroutines and asynchronous code.</p> <pre><code>void main()\n{\n thread timer( 1.0, timercallback ) \n}\n\nvoid function timercallback( int iteration )\n{\n print( iteration ) \n}\n\n// call the callback function every n seconds\nvoid function timer( float n, void functionref( int ) callback )\n{\n int iterations\n while ( true )\n {\n   wait n\n   iterations += 1\n   callback( iterations )\n }\n}\n</code></pre> <p>Signals and Flags allow you to control code execution based on events that happen elsewhere in the code or in the ingame world.</p> <pre><code>void main()\n{\n AddCallback_OnPlayerRespawned( OnPlayerRespawned )\n}\n\nvoid function OnPlayerRespawned( entity player )\n{\n thread CountPlayerTimeAlive( Time() ) // execute this function as threaded so we can use Signals in there\n}\n\nvoid function CountPlayerTimeAlive( entity player, float time )\n{\n player.WaitSignal( \"OnDestroy\" ) // wait until the player dies or disconnects\n print( Time() - time ) // print how long the player was alive\n}\n</code></pre>"},{"location":"Modding/squirrel/networking/","title":"Networking","text":"<p>Communicating between CLIENT, UI and SERVER scripts ~~~~~~~~~~~~~~~~~~~~~~</p> <p>All VMs (<code>CLIENT</code>, <code>UI</code>, <code>SERVER</code>) are seperate from each other and do not share any variables, even when running on the same machine.</p> <p>However, there are different interfaces to communicate between all VMs.</p> <p><code>SERVER</code> to <code>CLIENT</code> vm ======================</p>"},{"location":"Modding/squirrel/networking/#remote-functions","title":"Remote Functions","text":"<p>Remote functions allow the <code>SERVER</code> vm to call a function from the <code>CLIENT</code> vm with parameters.</p> <p>To use remote functions, you have to make a registration on both the <code>CLIENT</code> and the <code>SERVER</code> vm with <code>Remote_RegisterFunction</code>.</p> <p>Northstar provides the</p> <p>callback in which you can use the</p> <p>function. It\\'s not possible to register remote functions after <code>Remote_EndRegisteringFunctions</code> has been called. The callback exists to allow multiple mods to register remote vars.</p> <p>Warning</p> <p>You can only pass parameters of the types <code>null</code>, <code>int</code>, <code>float</code> or <code>bool</code>.</p> <p>It is possible to communicate entities using eHandles. To get an eHandle, use the <code>entity.GetEncodedEHandle()</code> function. To get the corresponding entity of a handle, use <code>entity ent = GetEntityFromEncodedEHandle( eHandle )</code>. eHandles are of type <code>int</code>. :::</p>"},{"location":"Modding/squirrel/networking/#example","title":"Example","text":"<p>mod.json extract:</p> <pre><code>\"Scripts\": [\n{\n    \"Path\": \"sh_spaceships.nut\",\n    \"RunOn\": \"CLIENT || SERVER\", // execute the same function on both CLIENT and SERVER\n    \"ClientCallback\": {\n        \"Before\": \"Spaceship_Network\"\n    },\n    \"ServerCallback\": {\n        \"Before\": \"Spaceship_Network\"\n    }\n},\n{\n    // more script registrations ...\n</code></pre> <p>sh_spaceships.nut:</p> <p>The networked <code>CLIENT</code> function has to be global</p> <pre><code>#if CLIENT\nglobal function Server_GetNetworkedVariable // make the networked function only global on CLIENT\n#endif //CLIENT\n\nglobal function Spaceship_Network // this gets executed on both CLIENT &amp; SERVER\n\nvoid function Spaceship_Network()\n{\n    AddCallback_OnRegisteringCustomNetworkVars( RegisterNetworkVars ) // you can only register remote functions inside of this callback\n}\n\nvoid function RegisterNetworkVars()\n{\n    // this has to be executed on both CLIENT and SERVER, else they will be out of sync and the client disconnects\n    Remote_RegisterFunction( \"Server_GetNetworkedVariable\" ) // register a remote function. Note that the parameters are not declared here\n}\n\n#if CLIENT\nvoid function Server_GetNetworkedVariable( int number ) // you can declare as many or few parameters as you wish\n{\n    printt(\"got integer\", number)\n}\n#endif //CLIENT\n</code></pre> <p>Calling the <code>CLIENT</code> function <code>Server_GetNetworkedVariable</code> on <code>SERVER</code> vm:</p> <pre><code>// player: CPlayer entity that should execute the function\n// func: function identifier string\n// ...: any parameters passed to the function\nRemote_CallFunction_NonReplay( entity player, string func, ... ) // NOT reexecuted in a replay\nRemote_CallFunction_Replay( entity player, string func, ... ) // reexecuted in a replay\n\n// for the previous example, this would be a valid remote function call:\n\nRemote_CallFunction_NonReplay( player, \"Server_GetNetworkedVariable\", RandomIntRange( 1, 100 ) )\n</code></pre>"},{"location":"Modding/squirrel/networking/#server-to-client-command-callbacks","title":"Server to Client command callbacks","text":"<p>Allows the <code>SERVER</code> vm to create a <code>ServerToClientStringCommand</code> on a player which is linked to a Callback locally</p>"},{"location":"Modding/squirrel/networking/#register-a-server-command","title":"Register a server command","text":"<p>Note</p> <p>this has to be executed on the <code>Before</code> Client callback</p> <p>the formatting for the server command is like a normal console command. Arguments are seperated by spaces ::::</p> <p>Register with the function clientside:</p> <p>and execute with the function serverside:</p>"},{"location":"Modding/squirrel/networking/#example_1","title":"Example","text":"<pre><code>void function MessageUtils_ClientInit()\n{\n    AddServerToClientStringCommandCallback( \"ServerHUDMessageShow\", ServerCallback_CreateServerHUDMessage )\n}\n\nvoid function ServerCallback_CreateServerHUDMessage ( array&lt;string&gt; args )\n{\n    // client side command handle logic ...\n}\n</code></pre>"},{"location":"Modding/squirrel/networking/#server-to-ui-vm","title":"<code>SERVER</code> to <code>UI</code> vm","text":"<p>Given a player, function name, and optional parameters, call function in UI script. Allowed var types are null, bool, int, and float.</p>"},{"location":"Modding/squirrel/networking/#example_2","title":"Example","text":"<pre><code>Remote_CallFunction_UI( player, \"ScriptCallback_UnlockAchievement\", achievementID )\n</code></pre>"},{"location":"Modding/squirrel/networking/#client-to-server-vm","title":"<code>CLIENT</code> to <code>SERVER</code> vm","text":""},{"location":"Modding/squirrel/networking/#client-to-server-command-callbacks","title":"Client to Server command callbacks","text":"<p>Register a client command callback serverside with</p> <p><code>player</code> is the player that called the command clientside. The callback function should return <code>true</code> if the command was accepted and <code>false</code> if it was invalid.</p> <p>The <code>CLIENT</code> vm can execute commands with the function:</p> <p>These will be handled by the <code>SERVER</code> if the command is registered.</p>"},{"location":"Modding/squirrel/networking/#clientcommand-notifications","title":"ClientCommand Notifications","text":"<p>Since version 1.5 mods can receive notifications when a client command has been handled. This is different from <code>AddClientCommandCallback</code></p> <p>Example usage with the <code>PrivateMatchLaunch</code> clientcommand</p> <pre><code>void function init(){\n    AddClientCommandNotifyCallback(\"PrivateMatchLaunch\", started)\n}\n\nvoid function started(entity player, array&lt;string&gt; args){\n    print(player + \" started the match\")\n}\n</code></pre> <p>Please refer to <code>list_client_commands</code>  for a list of native client commands you could catch.</p>"},{"location":"Modding/squirrel/networking/#client-to-ui-vm","title":"<code>CLIENT</code> to <code>UI</code> vm","text":"<p>Create a global function in the <code>UI</code> vm and call it in the <code>CLIENT</code> vm with the function:</p> <p>You can also pass parameters to the function. <code>identifier</code> is the name of the function you want to call.</p>"},{"location":"Modding/squirrel/networking/#example_3","title":"Example","text":"<pre><code>#if UI\nglobal function CallMe\n\nvoid function CallMe( int a, int b )\n{\n    printt( a + b )\n}\n#elseif CLIENT\nRunUIScript( \"CallMe\", 1, 2 ) // 3\n#endif\n</code></pre>"},{"location":"Modding/squirrel/networking/#ui-to-client-vm","title":"<code>UI</code> to <code>CLIENT</code> vm","text":"<p>Create a global function in the <code>CLIENT</code> vm and call it in the <code>UI</code> vm with the function:</p> <p>You can also pass parameters to the function. <code>identifier</code> is the name of the function you want to call.</p>"},{"location":"Modding/squirrel/networking/#example_4","title":"Example","text":"<pre><code>#if CLIENT\nglobal function CallMe\n\nvoid function CallMe( int a, int b )\n{\n    printt( a + b )\n}\n#elseif UI\nRunClientScript( \"CallMe\", 1, 2 ) // 3\n#endif\n</code></pre>"},{"location":"Modding/squirrel/sqvm/","title":"Squirrel VM","text":""},{"location":"Modding/squirrel/statements/","title":"Statements","text":""},{"location":"Modding/squirrel/statements/#if-statements","title":"If statements","text":"<p>If statements use a similar style to most programming languages and will execute their asigned code if the test placed inside returns the boolean value true. If I wanted to have something occur if, and only if, our previous <code>ReturnTrueOrFalse</code> function returned true, then you can use:</p> <pre><code>if( ReturnTrueOrFalse() )\n</code></pre> <p>Conditional operators can also be used to make comparisons, such as <code>==</code> (equals), <code>&lt;</code> (less than), <code>&lt;=</code> (less than or equal), <code>!=</code> (not equal), etc., returning true if their condition is satisfied. For example, to execute code if a dice roll landed on 5:</p> <pre><code>if( RandomInt( 6 ) + 1 == 5 )\n</code></pre> <p>Like other languages, if statements can be connected to <code>else if</code> and <code>else</code> statements. <code>else if</code> statements must be used immediately after an <code>if</code> or <code>else if</code> and will only check their condition if the preceding statements failed. <code>else</code> statements behave similarly, but always run if the preceding statements failed and must be last.</p> <p>Squirrel supports ternary operations like most languages. The value of the expression depends if a condition is truthy or not. However, if not used carefully this can worsen readability. The Syntax is <code>condition ? if_condition_true : if_condition_false</code>. This is especially useful when declaring variables or passing parameters.</p> <pre><code>// shortenedUsername is \"longus...\"\" if username is \"longusername\" or \"short\" if username is \"short\"\nstring shortenedUsername = username.len() &gt; 9 ? username.slice(0,6) + \"...\" : username;\n</code></pre>"},{"location":"Modding/squirrel/statements/#loops","title":"Loops","text":"<p>Loops are used to execute the same code n times.</p>"},{"location":"Modding/squirrel/statements/#while-loops","title":"While Loops","text":"<p>A while loop runs as long as the condition evaluates to a truthy value.</p> <pre><code>while( true )\n{\n  // this will result in an endless loop because the probe condition will never be false \n}\n\nwhile( RandomInt( 2 ) )\n{\n  // This will run until a 1 is generated by chance, because squirrel treats 0 as a falsy value and 1 as truthy.\n}\n</code></pre> <p>Do While Loop ~~~~</p> <p>A do while loop is the same as a while loop but the condition is checked after the body is executed.</p> <pre><code>do\n{\n  // this will execute only one time\n} while( false )\n</code></pre>"},{"location":"Modding/squirrel/statements/#for-loop","title":"For Loop","text":"<p>A for loop also runs until a condition is met however it provides you with a counter variable.</p> <p>The Syntax is as follows: <code>for( int counter; condition; behaviour_after_body_execution )</code></p> <pre><code>// prints 0, 1, 2, 3, 4\nfor( int i; i &lt; 5; i++ )\n{\n  print( i )\n}\n\narray&lt;int&gt; arr = [ 14, 2, 18, 9 ]\n// prints 14, 2, 18, 9\nfor( int i; i &lt; arr.len() * 2; i += 2 )\n{\n  print( arr[i] )\n}\n</code></pre>"},{"location":"Modding/squirrel/statements/#foreach-loop","title":"Foreach Loop","text":"<p>A foreach loop iterates over a <code>table</code> or an <code>array</code> and executes for each entry. The loop provides you with an optional counter for arrays or key for tables.</p> <pre><code>array&lt;int&gt; arr = [ 1, 2, 3, 4 ]\ntable&lt;string, string&gt; map = {\n  key1 = \"mapped value 1\",\n  key2 = \"mapped value 2\"\n}\n\n// prints 0 1, 1 2, 2 3, 3 4\nforeach( int index, int value in arr )\n{\n  printt( index, value )\n}\n\n// prints key1 mapped value 1, key2 mapped value 2\nforeach( string key, string value in map )\n{\n  printt( key, value )\n}\n</code></pre>"},{"location":"Modding/squirrel/statements/#implicit-conditional-behavior","title":"Implicit conditional behavior","text":"<p>Conditional statements, such as while loops and if statements, also implictly cast non-boolean inputs to booleans. For numbers, this means 0 is considered false and anything else is considered true. For instance variables like arrays and entities, <code>null</code> is considered false and anything else is considered true. For example, these inputs are considered true by the if statements:</p> <pre><code>if(2)\n</code></pre> <pre><code>array somelist = [0, 1]\nif(somelist)\n</code></pre> <p>Be aware that empty arrays and strings, <code>[]</code> and <code>\"\"</code>, are considered true by this logic.</p>"},{"location":"Modding/squirrel/statements/#formatting-of-actions","title":"Formatting of actions","text":"<p>So great, we can loop and check things, but what can we do with this information? Squirrel uses <code>{}</code> to denote the contents of a series of actions caused by such a statement.</p> <p>For example, lets make our <code>ReturnTrueOrFalse</code> function, that randomly picks either true or false, first:</p> <pre><code>bool function ReturnTrueOrFalse() {\n  return RandomInt(2) == 1\n}\n</code></pre> <p>Note that while functions always need <code>{}</code>, single-line <code>if</code>/<code>else</code> statements and loops do not:</p> <pre><code>if(ReturnTrueOrFalse())\n  printt(\"Only called if true\")\n</code></pre> <p>Now let\\'s make a more complicated function that will use the previous script to determine true or false, printing a list each time it returns true:</p> <pre><code>array&lt;int&gt; someinformation = [1,2,3,4,5,6]\nvoid function ThisDoesStuff(){\n  while(ReturnTrueOrFalse()){\n    foreach( int information in someinformation){\n      printt(information)\n    }\n  }\n}\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/","title":"C++ Interface","text":"<p>The Squirrel VMs can be manipulated and controlled by Northstar and Plugins.</p> <p>All functions and macros documented are defined and used in the Northstar Client. For plugins it\\'s recommended to use F1F7Y\\'s template that mirrors the definitions to an extend or rrplug if you prefer Rust. Note that this documentation only covers the C++ API available in the Launcher.</p> <p>For more information you can read the official library documentation. However be aware that implementations or behaviour might be different and features are missing in Respawn\\'s Squirrel fork.</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/","title":"Objecthandling","text":"<p>Warning</p> <p>Parameters or descriptions may be wrong or incomplete</p> <p>This list is incomplete and only lists methods available in squirrel.h.</p> <p>Some descriptions are taken from the Squirrel Documentation ::::</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#object-creation-and-handling","title":"Object creation and handling","text":"<p>You can access all sq functions only with a <code>SquirrelManager</code> instance. You have one available inside the <code>ADD_SQFUNC</code> macro.</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#pushing-objects-to-the-stack","title":"Pushing Objects to the stack","text":"param HSquirrelVM* sqvm <p>the target VM</p> param SQInteger bVal <p>the bool that will be pushed</p> <p>pushes a boolean to the stack</p> param HSquirrelVM* sqvm <p>the target VM</p> param SQInteger iVal <p>the integer that will be pushed</p> <p>pushes an integer to the stack</p> param HSquirrelVM* sqvm <p>the target VM</p> param SQInteger fVal <p>the float that will be pushed</p> <p>pushes a float to the stack</p> param HSquirrelVM* sqvm <p>the target VM</p> param SQChar* sVal <p>the string that will be pushed</p> param int len <p>length of the string <code>sVal</code></p> remarks <p>if the parameter length is less than 0 the VM will calculate the length using <code>strlen</code></p> <p>pushes a string to the stack</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#pushasset","title":"pushasset","text":"param HSquirrelVM* sqvm <p>the target VM</p> param SQChar* sVal <p>the string that will be pushed</p> param int len <p>length of the string <code>sVal</code></p> remarks <p>if the parameter length is less than 0 the VM will calculate the length using <code>strlen</code></p> <p>pushes an asset to the stack</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#pushvector","title":"pushvector","text":"param HSquirrelVM* sqvm <p>the target VM</p> param Vector3 vVal <p>the vector that will be pushed</p> <p>pushes a vector to the stack</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#pushobject","title":"pushobject","text":"param HSquirrelVM* sqvm <p>the target VM</p> param SQObject obj <p>the object that will be pushed</p> <p>pushes an object like functions to the stack</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#pushroottable","title":"pushroottable","text":"param HSquirrelVM* sqvm <p>the target VM</p> <p>pushes the current root table into the stack</p> <p>Note</p> <p><code>sq_pushnull</code> (<code>0x33D0</code>) and more aren\\'t included in <code>squirrel.h</code> right now but may be in the future. ::::</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#getting-objects-from-the-stack","title":"Getting Objects from the stack","text":""},{"location":"Modding/squirrel/cpp_api/objecthandling/#getbool","title":"getbool","text":"param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger stackpos <p>stack position of the object</p> returns <p>The value of the object</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#getinteger","title":"getinteger","text":"param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger stackpos <p>stack position of the object</p> returns <p>The value of the object</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#getfloat","title":"getfloat","text":"param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger stackpos <p>stack position of the object</p> returns <p>The value of the object</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#getstring","title":"getstring","text":"param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger stackpos <p>stack position of the object</p> returns <p>The value of the object</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#getvector","title":"getvector","text":"param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger stackpos <p>stack position of the object</p> returns <p>The value of the object</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#getasset","title":"getasset}","text":"param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger stackpos <p>stack position of the object</p> returns <p>The value of the object</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#getconstants","title":"getConstants","text":"<p>Note</p> <p>This function (<code>server.dll+0x5920</code>`) is not available in the launcher or plugins at the moment.</p> <p>You can open a PR if you need it now.</p> <p>To define an integer constant you can use <code>defconst &lt;defconst&gt;</code></p> param HSquirrelVM* sqvm <p>the target vm</p> returns <p>the table of constants</p> <p>Pushes the constants table to the stack.</p> <p>Used to add global constants for scripts.</p> <pre><code>getConstants(sqvm);\n\npushstring(sqvm, \"MY_CONSTANT\");\npushstring(sqvm, \"MY_VALUE\");\nnewslot(sqvm, -3, false);\n\nremoveFromStack(sqvm); // don't forget this!\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#sq-getfunction","title":"sq-getfunction","text":"param HSquirrelVM* sqvm <p>the target vm</p> param SQChar* name <p>the function name to search for</p> param SQObject* returnObj <p>reference to the object to hold the function object</p> param SQChar* signature <p>returns <code>0</code> if the function was found.</p> <pre><code>SQObject functionobj {};\nint result = sq_getfunction(m_pSQVM-&gt;sqvm, funcname, &amp;functionobj, 0);\nif (result != 0) // This func returns 0 on success for some reason\n{\n    NS::log::squirrel_logger&lt;context&gt;()-&gt;error(\"Call was unable to find function with name '{}'. Is it global?\", funcname);\n    return SQRESULT_ERROR;\n}\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#getentity","title":"getentity","text":"param HSquirrelVM* sqvm <p>The target vm</p> param SQInteger iStackPos <p>Stack position of the entity</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#sq-getentityfrominstance","title":"sq-getentityfrominstance","text":"param CSquirrelVM* sqvm <p>The target vm</p> param SQObject* pInstance <p>Instance holding an entity</p> param char** ppEntityConstant <p>Entity constant like <code>__sq_GetEntityConstant_CBaseEntity &lt;sq-GetEntityConstant-CBaseEntity&gt;</code></p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#sq-getentityconstant-cbaseentity","title":"sq-GetEntityConstant-CBaseEntity","text":"<p>There are entity constants for other types, but seemingly CBaseEntity\\'s is the only one needed</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#sq-getobject","title":"sq-getobject","text":"param HSquirrelVM* sqvm <p>The target vm</p> param SQInteger iStackPos <p>Stack position of the object</p> param SQObject* obj <p>Pointer that will hold the object</p> <p><code>obj</code> will be overwritten to hold the squirrel object.</p> <p>This example adds a native function with the <code>ADD_SQFUNC &lt;sq-api-register-native-functions-c-macro&gt;</code> macro. The function takes a function reference as a callback and calls it immediately. More information about function calls are available <code>here &lt;sq-api-calling-functions&gt;</code> </p> <pre><code>ADD_SQFUNC(\"void\", SQCallbackTest, \"void functionref()\", \"\", ScriptContext::UI)\n{\n    SQObject fn; // Make an empty sqobject. This will hold the function object later\n    g_pSquirrel&lt;context&gt;-&gt;__sq_getobject(sqvm, 1, &amp;fn); // Assign the function object to the SQOBJECT\n    g_pSquirrel&lt;context&gt;-&gt;pushobject(sqvm, &amp;fn); // Push the function object for the call\n    g_pSquirrel&lt;context&gt;-&gt;pushroottable(sqvm); // Push the root table for the function stack\n    g_pSquirrel&lt;context&gt;-&gt;__sq_call(sqvm, 1, false, true); // call the function with one parameter (the 'this' object)\n\n    return SQRESULT_NULL;\n}\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#get","title":"get","text":"param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger stackpos <p>stack position of the object</p> returns <p>an <code>SQRESULT</code> that indicates whether or not the access was successful.</p> <p>pops a key from the stack and performs a get operation on the object at the position idx in the stack; and pushes the result in the stack.</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#stack-infos","title":"Stack Infos","text":""},{"location":"Modding/squirrel/cpp_api/objecthandling/#sq-stackinfos","title":"sq-stackinfos","text":"param HSquirrelVM* sqvm <p>the target vm</p> param int level <p>stack depth of the info</p> param SQStackInfos&amp; out <p>instance that will hold the information</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#getcallingmod","title":"getcallingmod","text":"param HSquirrelVM* sqvm <p>the target vm</p> param int depth <p>stack depth of the origin mod</p> returns <p>Pointer to the Mod object at the stack depth</p> <p>Note</p> <p>Not available in plugins ::::</p>"},{"location":"Modding/squirrel/cpp_api/objecthandling/#other","title":"Other","text":"<p>defconst</p> param CSquirrelVM* csqvm <p>the target vm</p> param SQChar* pName <p>the constant name</p> param int nValue <p>the constant value</p> <p>defines a global squirrel integer constant</p>"},{"location":"Modding/squirrel/cpp_api/objectmanipulation/","title":"Objectmanipulation","text":"<p>Creating / Manipulating Objects --------------------</p>"},{"location":"Modding/squirrel/cpp_api/objectmanipulation/#arrays","title":"Arrays","text":"param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger size <p>initial size of the array</p> returns <p>a <code>SQRESULT</code></p> <p>creates a new array and pushes it to the stack</p> <pre><code>newarray(sqvm, 0);\npushstring(sqvm, \"val1\");\narrayappend(sqvm, -2);\npushinteger(sqvm, 15);\narrayappend(sqvm, -2);\n\n/*\n    The array on the stack now looks like this:\n    [ \"val1\", 15 ]\n*/\n</code></pre> param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger stackpos <p>stack position of the array to append to</p> returns <p>a <code>SQRESULT</code></p> <p>pops a value from the stack and pushes it to the back of the array at the position idx in the stack</p>"},{"location":"Modding/squirrel/cpp_api/objectmanipulation/#tables","title":"Tables","text":"param HSquirrelVM* sqvm <p>the target vm</p> returns <p>a <code>SQRESULT</code></p> <p>creates a new table and pushes it onto the stack.</p> param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger stackpos <p>the index of the table to insert into</p> param SQBool bstatic <p>if <code>SQTrue</code> creates a static member. This parameter is only used if the target object is a class.</p> <p>pops a key and a value from the stack and performs a set operation on the table or class that is at position idx in the stack, if the slot does not exist it will be created.</p> <pre><code>newtable(sqvm);\n// slot 1\npushstring(sqvm, \"key\");\npushstring(sqvm, \"value\");\nnewslot(sqvm, -3);\n// slot 2\npushstring(sqvm, \"key2\");\npushasset(sqvm, \"value2\");\nnewslot(sqvm, -3);\n// slot 3\npushstring(sqvm, \"key3\");\nnewtable(sqvm);\npushstring(sqvm, \"sub\");\npushinteger(sqvm, 13);\nnewslot(sqvm, -3);\nnewslot(sqvm, -3);\n\n/*\n    The table on the stack now looks like this:\n    {\n        key = \"value\"\n        key2 = $\"value2\"\n        key3 = { sub = 13 }\n    }\n*/\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/objectmanipulation/#structs","title":"Structs","text":"<p>Note</p> <p>These functions aren\\'t available for plugins yet. ::::</p> param HSquirrelVM* sqvm <p>The target vm</p> param int fieldCount <p>total number of fields the struct contains</p> <p>Creates and pushes a struct instance with <code>fieldCount</code> to the stack.</p> param HSquirrelVM* sqvm <p>The target vm</p> param int fieldIndex <p>Index of the field to fill</p> <p>Pops a value from the stack and fills the field at <code>fieldIndex</code> from the struct object that needs to be at the top of the stack.</p> <pre><code>pushnewstructinstance(sqvm, 2); // create a struct instance with 2 slots\npushinteger(sqvm, 12);\nsealstructslot(sqvm, 0);\npushstring(sqvm, \"example\", -1);\nsealstructslot(sqvm, 1);\n\n/*\n    Assuming the compiler expects this slot:\n    struct ExStruct { int i, string s }\n    , the struct on the stack looks like this\n\n    ExStruct {\n        i = 12,\n        s = \"example\"\n    }\n*/\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/objectmanipulation/#userdata","title":"Userdata","text":"param HSquirrelVM* sqvm <p>The target vm</p> param SQInteger size <p>bit size of the userdata object</p> <p>When the function sq_newuserdata is called, Squirrel allocates a new userdata with the specified size, returns a pointer to his payload buffer and push the object in the stack; at this point the application can do whatever it want with this memory chunk, the VM will automatically take care of the memory deallocation like for every other built-in type. A userdata can be passed to a function or stored in a table slot. By default Squirrel cannot manipulate directly userdata; however is possible to assign a delegate to it and define a behavior like it would be a table. Because the application would want to do something with the data stored in a userdata object when it get deleted, is possible to assign a callback that will be called by the VM just before deleting a certain userdata. This is done through the API call sq_setreleasehook.</p> param HSquirrelVM* sqvm <p>The target vm</p> param SQInteger stackpos <p>Stack position of the userdata</p> param HSquirrelVM* sqvm <p>The target vm</p> param SQInteger stackpos <p>Stack position of the userdata</p> param T* data <p>Pointer to an arbitrary variable the userdata gets mapped to</p> param uint64_t* typeid <p>Pointer to a variable edited to hold the userdata type</p>"},{"location":"Modding/squirrel/cpp_api/sq_functions/","title":"Squirrel Functions","text":""},{"location":"Modding/squirrel/cpp_api/sq_functions/#sq-api-register-native-functions-c-macro","title":"Adding Squirrel Functions","text":"<p>You can use the <code>ADD_SQFUNC</code> macro defined in <code>squirrelautobind.h</code> to easily add new Squirrel functions for specific contexts.</p> <p>Inside the macro you have access to the Squirrel Manager of the context the function has been called from and the SQVM.</p> <p>Parameters are the initial stack in the function context.</p> param return_type <p>The squirrel return type the compiler expects from this function</p> param funcName <p>The squirrel function name</p> param argTypes <p>The args with types the compiler expects</p> param helpText <p>A help text describing the function</p> param runOnContext <p>The contexts that have access to this function</p>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#examples","title":"Examples","text":"<p>Return a string from a native registered function:</p> <pre><code>ADD_SQFUNC(\"string\", CPlugTest, \"\", \"returns \\\"native gaming\\\"\", ScriptContext::CLIENT | ScriptContext::SERVER)\n{\n    g_pSquirrel&lt;context&gt;-&gt;pushstring(sqvm, \"native gaming\"); // push a string to the stack\n\n    return SQRESULT_NOTNULL; // Signal that the topmost item on the stack is returned by this function\n}\n</code></pre> <p>Return a complex <code>ornull</code> type:</p> <pre><code>ADD_SQFUNC(\"array&lt;int&gt; ornull\", CPlugComplex, \"int n\", \"returns null\", ScriptContext::CLIENT | ScriptContext::SERVER | ScriptContext::UI)\n{\n    SQInteger n = g_pSquirrel&lt;context&gt;-&gt;getinteger(sqvm, 1);\n\n    if (n == 0)\n        return SQRESULT_NULL;\n\n    g_pSquirrel&lt;context&gt;-&gt;newarray(sqvm, 0);\n    g_pSquirrel&lt;context&gt;-&gt;pushinteger(sqvm, n);\n    g_pSquirrel&lt;context&gt;-&gt;arrayappend(sqvm, 2);\n    g_pSquirrel&lt;context&gt;-&gt;pushinteger(sqvm, n * 2);\n    g_pSquirrel&lt;context&gt;-&gt;arrayappend(sqvm, 2);\n\n    return SQRESULT_NOTNULL; // return the array [ n, n * 2 ] or NULL if n == 0\n}\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#replacing-squirrel-functions","title":"Replacing Squirrel Functions","text":"<p>Note</p> <p>Replacing functions is not possible in plugins :::</p> <p>You can use the <code>REPLACE_SQFUNC</code> macro to replace an existing sq function.</p> param funcName <p>The name of the function to replace</p> param runOnContext <p>The contexts that have access to this function</p> <p>It\\'s also possible to add an override directly with the <code>AddFuncOverride</code> function of the <code>SquirrelManager</code> class.</p> <p>:param std::string name: The name of the function to override :param SQFunc func: A function object that replaces the logic</p> <pre><code>// Replaces dangerous vanilla functions to only log their call with no further logic.\ng_pSquirrel&lt;context&gt;-&gt;AddFuncOverride(\"DevTextBufferWrite\", SQ_StubbedFunc&lt;context, \"DevTextBufferWrite\"&gt;);\ng_pSquirrel&lt;context&gt;-&gt;AddFuncOverride(\"DevTextBufferClear\", SQ_StubbedFunc&lt;context, \"DevTextBufferClear\"&gt;);\ng_pSquirrel&lt;context&gt;-&gt;AddFuncOverride(\"DevTextBufferDumpToFile\", SQ_StubbedFunc&lt;context, \"DevTextBufferDumpToFile\"&gt;);\n</code></pre>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#script-contexts","title":"Script Contexts","text":"<p>Scriptcontexts are used to define the VMs that have access to a native function. Available Contexts are</p> <ul> <li><code>ScriptContext::SERVER</code> - The SERVER sqvm</li> <li><code>ScriptContext::CLIENT</code> - The CLIENT sqvm</li> <li><code>ScriptContext::UI</code> - The UI vm</li> </ul>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#script-returns","title":"Script Returns","text":"<p>Squirrel functions need to return a <code>SQRESULT</code>. Valid results are</p> <ul> <li><code>SQRESULT_NULL</code> - This function returns <code>null</code>. Nothing is left over     on the stack.</li> <li><code>SQRESULT_NOTNULL</code> - This functions returns the last item on the     stack.</li> <li><code>SQRESULT_ERROR</code> - This function has thrown an error.</li> </ul>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#sq-api-calling-functions","title":"Calling","text":"<p>Info</p> param char* funcname <p>Name of the function to call</p> <p>Note</p> <p>This is a squirrel API wrapper added by northstar. It\\'s not available for plugins and is supposed to abstract squirrel calls. ::::</p> <p>This function assumes the squirrel VM is stopped/blocked at the moment of call</p> <p>Calling this function while the VM is running is likely to result in a crash due to stack destruction</p> <p>If you want to call into squirrel asynchronously, use AsyncCall instead.</p> <p><pre><code>Call(\"PluginCallbackTest\"); // PluginCallbackTest()\n</code></pre> :::</p> param char* funcname <p>Name of the function to call</p> param Args... args <p>vector of args to pass to the function</p> <p>Note</p> <p>This is a squirrel API wrapper added by northstar. It\\'s not available for plugins and is supposed to abstract squirrel calls. ::::</p> <pre><code>Call(\"PluginCallbackTest\", \"param\"); // PluginCallbackTest(\"param\")\n</code></pre> param char* funcname <p>Name of the function to call</p> <p>Note</p> <p>This is a squirrel API wrapper added by northstar. It\\'s not available for plugins and is supposed to abstract squirrel calls. ::::</p> <p>This function schedules a call to be executed on the next frame</p> <p>This is useful for things like threads and plugins, which do not run on the main thread.</p> param char* funcname <p>Name of the function to call</p> param Args... args <p>vector of args to pass to the function</p> <p>Note</p> <p>This is a squirrel API wrapper added by northstar. It\\'s not available for plugins and is supposed to abstract squirrel calls. ::::</p> param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger args <p>number of arguments to call this function with</p> <p><code>_call</code> adds one to the <code>args</code> count for <code>this</code>.</p> <p>Note</p> <p>This is a squirrel API wrapper added by northstar. It\\'s not available for plugins and is supposed to abstract squirrel calls. ::::</p> <pre><code>SQObject functionobj {};\nSQRESULT result = g_pSquirrel&lt;context&gt;-&gt;sq_getfunction(sqvm, \"PluginCallbackTest\", &amp;functionobj, 0); // Get a global squirrel function called \"PluginCallbackTest\"\n\nif (result == SQRESULT_ERROR)\n{\n    spdlog::error(\"Unable to find function. Is it global?\");\n    return SQRESULT_ERROR;\n}\n\ng_pSquirrel&lt;context&gt;-&gt;pushobject(sqvm, &amp;functionobj);\ng_pSquirrel&lt;context&gt;-&gt;pushroottable(sqvm);\ng_pSquirrel&lt;context&gt;-&gt;pushstring(sqvm, \"param\");\nreturn g_pSquirrel&lt;context&gt;-&gt;_call(sqvm, 1); // PluginCallbackTest(\"param\")\n</code></pre> param HSquirrelVM* sqvm <p>the target vm</p> param SQInteger iArgs <p>number of parameters of the function</p> param SQBool bShouldReturn <p>if true the function will push the return value to the stack</p> param SQBool bThrowError <p>if true, if a runtime error occurs during the execution of the call, the vm will invoke the error handler</p> <p>calls a closure or a native closure. The function pops all the parameters and leave the closure in the stack; if retval is true the return value of the closure is pushed. If the execution of the function is suspended through sq_suspendvm(), the closure and the arguments will not be automatically popped from the stack.</p> <p>When using to create an instance, push a dummy parameter to be filled with the newly-created instance for the constructor\\'s <code>this</code> parameter.</p>"},{"location":"Modding/squirrel/cpp_api/sq_functions/#errors","title":"Errors","text":"param HSquirrelVM* sqvm <p>the target vm</p> param SQChar* error <p>string thrown</p> returns <p><code>SQRESULT_ERROR</code></p> <p>Throws an error with <code>error</code> being the thrown object.</p> <p><pre><code>ADD_SQFUNC(\"void\", CPlugThrowTest, \"\", \"\", ScriptContext::UI)\n{\n    return g_pSquirrel&lt;context&gt;-&gt;raiseerror(sqvm, \"test error\");\n}\n\n/* sq:\ntry {\n    CPlugThrowTest()\n} catch(e) {\n    print(e) // \"test error\"\n}\n*/\n</code></pre> !!! warning[TODO] from @cazdotwav</p> <p>This page needs some serious beautification + clarification :::</p>"},{"location":"Modding/squirrel/cpp_api/stack/","title":"Stack","text":"<p>Squirrel exchanges values with the virtual machine through a stack. This mechanism has been inherited from the language Lua. For instance to call a Squirrel function from native code it is necessary to push the function and the arguments in the stack and then invoke the function; also when Squirrel calls a native function the parameters will be in the stack as well.</p>"},{"location":"Modding/squirrel/cpp_api/stack/#stack-indexes","title":"Stack Indexes","text":"<p>Many API functions can arbitrarily refer to any element in the stack through an index. The stack indexes follow these conventions:</p> <ul> <li>1 is the stack base</li> <li>Negative indexes are considered an offset from top of the stack. For     instance -1 is always the last item pushed to the stack</li> <li>0 is an invalid index</li> </ul> <p>See this example stack for reference:</p> <p>Stack   Positive index   Negative index</p> <p>p4      4                -1   p3      3                -2   p2      2                -3   p1      1                -4</p>"},{"location":"Modding/squirrel/cpp_api/stack/#stack-manipulation","title":"Stack manipulation","text":"<p>The Squirrel API offers several functions to push and retrieve data from the Stack.</p> <p>Note</p> <p>This function (<code>server.dll+0x7000</code>`) is not available in the launcher or plugins at the moment.</p> <p>You can open a PR if you need it now. ::::</p> param HSquirrelVM* sqvm <p>the target vm</p> <p>pops the top item of the stack.</p>"},{"location":"Modding/squirrel/statements/","title":"Statements","text":"<p>Unlike vanilla programs, only a limited set of statements are allowed in the file scope.</p> <p>All logic needs to be written in function bodies.</p>"},{"location":"Modding/squirrel/statements/controlflow/","title":"Control Flow","text":"<p>Squirrel supports most basic control flow statements.</p>"},{"location":"Modding/squirrel/statements/controlflow/#if","title":"If","text":"<p><code>if</code> statements check if a condition evaluates to <code>true</code>.</p> <pre><code>if ( expression )\n body\n</code></pre> <p><code>null</code>, <code>0</code> and <code>0.0</code> evaluate to <code>false</code>.</p>"},{"location":"Modding/squirrel/types/","title":"Typing","text":"<p>At it\\'s core, squirrel is a dynamically typed language with static typing mostly being a compile time feature.</p> <p>The language distinguishes between primitive types and complex types. Some features of the language can only be used for either type.</p> <p>!!! ttree maxdepth=\"2\"} /squirrel/types/var /squirrel/types/booleans /squirrel/types/integers /squirrel/types/floats /squirrel/types/strings /squirrel/types/vectors /squirrel/types/entities /squirrel/types/arrays /squirrel/types/tables /squirrel/types/structs /squirrel/types/functionrefs /squirrel/types/ornull /squirrel/types/typedefs :::</p>"},{"location":"Modding/squirrel/types/arrays/","title":"Arrays","text":"<p>Unlike the data types previously covered, arrays can hold multiple values.</p> <p>Their size is dynamic and you can add and remove elements at will.</p> <p>The type keyword is <code>array</code>.</p> <p>By default, uninitialized arrays are empty.</p> <p>Arrays are always zero indexed with <code>[ &lt;expression&gt; ]</code>. The indexes are always numbers. If you index an array with a key that does not exist, an error will get thrown.</p>"},{"location":"Modding/squirrel/types/arrays/#literals","title":"Literals","text":"<p>Array literals are a comma or newline seperated sequence of expressions delimited by an opening bracket <code>[</code> and a corresponding closing bracket <code>]</code>.</p> <pre><code>array a = [ 1, 2, 3 ]\narray b = [\n  1\n  2\n  3\n]\n</code></pre>"},{"location":"Modding/squirrel/types/arrays/#primitive-arrays","title":"Primitive Arrays","text":"<p>Primitive arrays are arrays that can hold any value. Their content is therefore untyped.</p> <pre><code>array a\na.append( 1 ) // add a number\na.append( \"str\" ) // add a string\na.append( [] ) // add an empty array\n\n// because the content type of the array is not defined, all content will be var\nvar n = a[0]\nvar str = a[1]\nvar arr = a[2]\n</code></pre>"},{"location":"Modding/squirrel/types/arrays/#complex-arrays","title":"Complex Arrays","text":"<p>Complex Arrays are arrays that can only hold values that have a specific type.</p> <p>The content type needs to be specified within <code>&lt;</code> and <code>&gt;</code> brackets.</p> <p>There is no way to define a complex array that holds multiple different types.</p> <pre><code>array&lt;int&gt; a\na.append( 1 )\na.append( 0x2 )\na.append( \"3\" ) // this will throw a compile error because the array can only contain integers\n</code></pre>"},{"location":"Modding/squirrel/types/arrays/#static-arrays","title":"Static Arrays","text":"<p>Static arrays are a different kind of complex type. Like complex arrays they can only hold values of one specific type. However unlike complex arrays static arrays have a set length that cannot be changed.</p> <p>The typing for static arrays is <code>type[size]</code>, where <code>type</code> is the content type of the array and <code>size</code> is an integer literal of the total size of the array.</p> <p>Uninitialized static arrays have their size by default and all content values are the default values of their content type.</p> <p>You can index and change content values like with regular arrays.</p> <p>When initializing a static array you can omit all values after your initial values with <code>...</code>. All following values will get default initialized with the content\\'s default.</p> <pre><code>float[3] v1\nfloat[8] v2 = [ 1.0, 2.0, ... ]\nv2[2] = 3.0\n\nprint( v1[0] ) // notice how no value needs to be pushed into the vector\nprint( v2[7] ) // will print 0.0 because it has been default initialized\n</code></pre>"},{"location":"Modding/squirrel/types/arrays/#compatability","title":"Compatability","text":"<p>It is not possible to cast or convert an array between their different forms. For example you can\\'t assign an <code>array&lt;string&gt;</code> variable to a different variable that has the type <code>array</code> or the other way around.</p> <p>Instead you need to create an entirely new array with the target type or add all contents manually.</p> <pre><code>array&lt;string&gt; orig = [ \"a\", \"b\", \"c\" ]\narray target\n\ntarget.clear() // clear all contents from the target array\nforeach( v in orig ) // iterate over the original array and add all contents to the target array\n  target.append( v )\n</code></pre> <p>Furthermore it\\'s important to understand that <code>array</code> and <code>array&lt;var&gt;</code> behave the same but are not identical.</p>"},{"location":"Modding/squirrel/types/booleans/","title":"Booleans","text":"<p>Booleans are a primitive type that can be either <code>true</code> or <code>false</code></p> <p>The type name and keyword for Booleans is <code>bool</code>. Booleans default initialize as <code>false</code>.</p> <pre><code>bool b = false\nb = true\n</code></pre>"},{"location":"Modding/squirrel/types/entities/","title":"Entities","text":"<p>Entities are a primitive type that can refer to any in-game object.</p> <p>The type keyword is <code>entity</code>.</p> <p>Entities are always class instances of classes that are defined by native code. The classes differ between the CLIENT or UI, and SERVER vm.</p> <p>You can not specify which entity class a variable is supposed to hold so you need to be careful you know what entity is expected where.</p> <p>If you need to check the class of an entity at runtime you can do so with the <code>instanceof</code> operator.</p> <pre><code>bool function IsCPlayer( entity e )\n{\n return e instanceof CPlayer\n}\n</code></pre> <p>Entities are <code>null</code> initialized and there are no literals for entities.</p> <pre><code>entity e\nAssert( e == null )\n</code></pre>"},{"location":"Modding/squirrel/types/floats/","title":"Floats","text":"<p>Floats are 32 bit floating point numbers that can be any decimal number.</p> <p>An unitilized float will have the default value <code>0.0</code>.</p> <p>The type keyword for floats is <code>float</code>.</p>"},{"location":"Modding/squirrel/types/floats/#literals","title":"Literals","text":"<p>Float literals need to contain a <code>.</code> to distinguish them from integer literals.</p> <p>They may omit the decimal before the period, however after the period a value is required.</p> <pre><code>float a = 1.1\nfloat b = 0.0\nfloat c = .0 // 0.0\nfloat d = 0. // INVALID, this will throw a compile error because the value after the period is missing.\n</code></pre>"},{"location":"Modding/squirrel/types/functionrefs/","title":"Functionrefs","text":"<p>Function references are a complex type that can reference any function or closure.</p> <p>The type keyword is <code>functionref</code> and needs to include any parameter types and optionally return types.</p> <pre><code>void function CallDelayed( void functionref() fn )\n{\n wait 1\n fn()\n}\n</code></pre> <p>You can call functionrefs like a regular function. The return type of a functionref will default to <code>var</code> if omitted. Omitting the return type is only possible in <code>untyped</code> files.</p> <p>Parameter names are optional in functionrefs. Otherwise the parameter syntax is like in regular functions.</p> <pre><code>void function Example( int n, ... ) {}\n\nvoid functionref( int, ... ) fn = Example\n</code></pre>"},{"location":"Modding/squirrel/types/integers/","title":"Integers","text":"<p>Integers in Squirrel are 32 bit signed integers and can be any whole number (in the 32 bit confines).</p> <p>An Integer is a primitive type with a default value of <code>0</code>.</p> <p>The type keyword for Integers is <code>int</code>.</p>"},{"location":"Modding/squirrel/types/integers/#literals","title":"Literals","text":"<p>Integers can be represented with multiple different literals.</p> <ul> <li> <p>Decimal</p> <p>Regular decimal letters will always be an integer decimal literal. .. code-block:</p> <pre><code>int n = 123\n</code></pre> </li> <li> <p>Hexadecimal</p> <p>If any number is prefixed with <code>0x</code>, it is a hexadecimal literal.</p> <pre><code>int n = 0x0012 // 18\n</code></pre> </li> <li> <p>Octal</p> <p>Numbers starting with a <code>0</code> are octal literals.</p> <pre><code>int n = 075 // 61\n</code></pre> </li> <li> <p>Chars</p> <p>A single letter or escaped sequence are character literals. Their value is the ASCII value of the letter.</p> <pre><code>int a = 'a' // 97\nint newline = '\\n' // 10\n</code></pre> </li> </ul>"},{"location":"Modding/squirrel/types/ornull/","title":"ornull","text":"<p><code>ornull</code> is a type suffix that flags the variable to be able to contain <code>null</code>. This is required for nesting structs inside themselves to ensure they are fixed size.</p> <p><code>ornull</code> makes any type complex and stops you from using any inbuilt functions or passing it to a function that does not expect that exact <code>ornull</code> type.</p> <p>To use the value of an <code>ornull</code> variable you need to ensure that it is not <code>null</code> and then cast to the correct type.</p> <pre><code>int ornull n = null\nn = 1\n\nif( n != null )\n{\n expect int( n ) // n is now in this scope an int\n n += 2\n}\n\nprint( n ) // 3\n</code></pre> <p>Being required to cast the value of <code>ornull</code> variables makes it impossible to use it with types that cannot be casted like complex arrays. You can still make complex ornull variables, just be aware that the content type can never be recasted.</p> <p>You can use <code>ornull</code> types in complex type as well, for example in complex arrays.</p> <pre><code>array&lt;int ornull&gt; a = [ 1, null ]\na.append( 2 )\na.append( null )\n</code></pre> <p>Additionally, <code>ornull</code> is useful for adding optional parameters to functions that need to preserve backwards compatability.</p> <pre><code>SomeAPIFunction( int ornull n = null ) {}\n\n// both are valid\nSomeAPIFunction()\nSomeAPIFunction( 1 )\n</code></pre>"},{"location":"Modding/squirrel/types/ornull/#default-values","title":"Default Values","text":"<p><code>ornull</code>-ing a type will make a variable always default initia will make a variable always default initialize with <code>null</code> instead of the types respective default value.lize with <code>null</code> instead of the types respective default value.</p>"},{"location":"Modding/squirrel/types/strings/","title":"Strings","text":"<p>Unlike in other languages, strings in squirrel are primitive types and immutable. That means you can\\'t change the value of a string but will need to copy and change it in another variable.</p> <p>The default value of strings is an empty string with a length of 0.</p> <p>The type keyword for strings is <code>string</code>.</p> <p>To create strings, simply write the text of the literals in <code>\"</code> quotes.</p> <p>``` string s = \"this is an example string literal\" <pre><code>## Verbatim Strings\n\nVerbatim strings do not escape sequences. They begin with a `@` token\nbefore a regular string literal. Verbatim strings can also extend over\nmultiple lines. If they do they include any white space between the\nmatching string quotes.\n</code></pre> string a = \"simple string\\nover two lines\" string b = @\"simple string over two lines\"</p> <p>Assert( a == b ) <pre><code>However, a doubled quotation mark within a verbatim string is replaced\nby a single quotation mark.\n</code></pre> string a = \"extra quotation mark\\\"\" string b = @\"extra quotation mark \"\"\"</p> <p>Assert( a == b ) <pre><code>## Assets\n\nAssets and strings are internally the same but at compile time they are\ndifferent types.\n\nAssets are used to reference a specific resource (often in rpak files).\n\nThe type keyword for assets is `asset`.\n\nAsset literals are regular string literals prefixed with the `$` token.\nVerbatim strings can\\'t be an asset.\n</code></pre> asset a = $\"my/resource\" ```</p> <p>Northstar added the <code>StringToAsset</code> function that allows converting any string into an asset.</p>"},{"location":"Modding/squirrel/types/structs/","title":"Structs","text":"<p>Structs are statically typed, fixed size structures that contain other values. Similar to tables they are used to store mutliple values, however structs allow for each value to have a seperate type.</p>"},{"location":"Modding/squirrel/types/structs/#declaration","title":"Declaration","text":"<p>Before using a struct you need to define it and all contents.</p> <p>The fields are typed like any regular variable.</p> <pre><code>struct MyStruct\n{\n int field1\n string field2\n array&lt;float&gt; field3\n}\n</code></pre> <p>You can then use <code>MyStruct</code> as a type anywhere in the file. Structs are default initialized by assigning each field it\\'s appropriate default value. Struct fields can be indexed by writing <code>instance.field</code>, just like with tables.</p> <pre><code>MyStruct myStructInstance\nprintt( myStructInstance.field1 ) // 0\n</code></pre> <p>Structs are passed by reference so if a function changes a field that field is changed for everything that uses the struct instance.</p> <p>Struct instances can also get initiaized with different default values if required.</p> <p>Similar like in static arrays, you can omit any fields that should have their type\\'s default value with <code>...</code>.</p> <pre><code>MyStruct ins = { field3 = [], field1 = 1, ... }\nprintt( ins.field1, ins.field2 ) // 1, \"\"\n</code></pre>"},{"location":"Modding/squirrel/types/structs/#nesting-structs","title":"Nesting Structs","text":"<p>Struct fields can be any type, this includes previously declared structs as well.</p> <pre><code>struct Engine\n{\n string manufacturer\n}\n\nstruct Tire\n{\n string material\n}\n\nstruct Car\n{\n Engine engine,\n Tire[4] tires\n}\n</code></pre>"},{"location":"Modding/squirrel/types/structs/#self-nesting-structs","title":"Self Nesting Structs","text":"<p>Structs can contain fields of their own type, however they need to be null initialized. You can achieve this by specifying their type as <code>ornull</code>.</p> <pre><code>struct LinkedList\n{\n var content\n LinkedList ornull nextNode\n}\n</code></pre>"},{"location":"Modding/squirrel/types/structs/#field-default-values","title":"Field Default Values","text":"<p>Any struct field can have an optional default value. If omitted, the type\\'s default value is used instead.</p> <p>Default values need to be a constant expression that can be evaluated at compile time.</p> <pre><code>struct Dice\n{\n int[6] sides = [ 1, 2, 3, 4, 5, 6 ]\n}\n</code></pre>"},{"location":"Modding/squirrel/types/structs/#singleton-instances","title":"Singleton Instances","text":"<p>You can define a struct and initialize a local variable of that struct instantly with singletons. These are often used to have global variables that are only used in a single script file.</p> <pre><code>struct {\n var menu\n} file\n\nvoid function InitMyMenu()\n{\n file.menu = GetMenu( \"SomeMenu\" )\n}\n</code></pre> <p>Singletons can also be used for struct fields.</p> <pre><code>struct Car\n{\n struct {\n   string manufacturer\n   } engine\n}\n\n// ...\nCar car\ncar.engine.manufacturer = \"Vinson Dynamics\"\n</code></pre>"},{"location":"Modding/squirrel/types/tables/","title":"Tables","text":"<p>Like arrays, tables are dynamically sized data structures that can have entries added or removed at runtime.</p> <p>In other languages tables might be called Hashmaps, Maps or Objects.</p> <p>Entries are added with a key that can subsequently be used to read that object from the table back.</p> <p>The type keyword is <code>table</code>.</p> <p>To index an array with a string you can write <code>t.index</code>, or with an expression just like in arrays with <code>t.[\"index\"]</code>.</p> <pre><code>table t = { val = \"value\" }\nstring v = t.val\nstring v2 = t[\"val\"]\n</code></pre>"},{"location":"Modding/squirrel/types/tables/#literals","title":"Literals","text":"<p>Table literals are comma or newline seperated expressions that are delimited by <code>{</code> and <code>}</code>.</p> <p>Each entry needs to have a key, seperated from the initial value with a <code>=</code>.</p> <p>Table keys will be by default strings if you just write their identifier in the literal. However they can also be any expression if wrapped with <code>[</code> and <code>]</code>.</p> <pre><code>table t = { key1 = 1, key2 = \"2\" }\ntable t2 = {\n randomValue = getSomethingRandom()\n [1] = 0x1\n}\n\nprintt( t[\"key1\"], t2[1] ) // 1 1\n</code></pre>"},{"location":"Modding/squirrel/types/tables/#primitive-tables","title":"Primitive Tables","text":"<p>Like arrays primitive tables can hold any type, both as values and keys.</p> <p>Any value of key of the table will therefore be <code>var</code> if retrieved.</p>"},{"location":"Modding/squirrel/types/tables/#complex-tables","title":"Complex Tables","text":"<p>Complex tables are tables that have their content types defined. It is necessary to both define the key and value types.</p> <pre><code>table&lt;string, int&gt; numbers = {\n one = 1,\n two = 2,\n three = 3,\n four = 4,\n five = 5,\n six = 6,\n seven = 7,\n eight = 8,\n nine = 9\n}\n</code></pre>"},{"location":"Modding/squirrel/types/typedefs/","title":"Typedefs","text":"<p>With typedefs you can create type aliases for types. Typedefs can be global as well.</p> <pre><code>typedef alias var\nglobal typedef SomeCallback void functionref(int)\n</code></pre>"},{"location":"Modding/squirrel/types/var/","title":"Var","text":"<p><code>var</code> stands for a variable of any type. Any primitive can be <code>var</code>, however complex types can never be <code>var</code>.</p> <pre><code>// var can be just about anything. \nvar v = 1\nv = \"string\"\nv = []\nv = {}\n</code></pre> <p>in <code>untyped</code> files you can also use the <code>local</code> keyword instead of <code>var</code>. However the keyword is deprecated and should not be used.</p> <p>If possible, usage of <code>var</code> should be avoided and other static types should be used instead to benefit from the type checking of squirrel.</p>"},{"location":"Modding/squirrel/types/vectors/","title":"Vectors","text":"<p>Vectors are a primitive data type to describe velocities or positions of objects in the game.</p> <p>Usually the positions are absolute in the game world, but that may depend on the function.</p> <p>Vectors store 3 float values that can be accessed with the <code>x</code>, <code>y</code> and <code>z</code> keys.</p>"},{"location":"Modding/squirrel/types/vectors/#literals","title":"Literals","text":"<p>A vector literal is a comma seperated list of expressions that evaluate to either a float or integer delimited by <code>&lt;</code> and <code>&gt;</code> brackets.</p> <pre><code>vector v = &lt; 1, 2.5, 3 &gt;\nv.y = 2\nprintt( v.x, v.y, v.z ) // 1 2 3\n</code></pre>"}]}